
gemm.o:     file format elf64-x86-64


Disassembly of section .text:
  llvm.func @rsync(!llvm.ptr<i64>, i64)
  llvm.func @rdma_req(i64, i64, i64, i64, i32)
  llvm.mlir.global external @rdma_wrid_cnt() {addr_space = 0 : i32} : i64
  llvm.mlir.global external @rbuf() {addr_space = 0 : i32} : !llvm.ptr<i8>
  llvm.func @_disagg_alloc(i32, i64) -> !llvm.ptr<i8>
  llvm.func @main_graph(%arg0: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %arg1: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> attributes {access_mem_catcher = [["ref0", 0], ["ref1", 1]], input_names = ["X1", "X2"], llvm.emit_c_interface, output_names = ["Y"]} {
0000000000000000 <main_graph> push   %rbp
0000000000000001 <main_graph+0x1> mov    %rsp,%rbp
0000000000000004 <main_graph+0x4> push   %r15
0000000000000006 <main_graph+0x6> push   %r14
0000000000000008 <main_graph+0x8> push   %r13
000000000000000a <main_graph+0xa> push   %r12
000000000000000c <main_graph+0xc> push   %rbx
000000000000000d <main_graph+0xd> and    $0xffffffffffffffc0,%rsp
0000000000000011 <main_graph+0x11> sub    $0x140,%rsp
0000000000000018 <main_graph+0x18> mov    %rsp,%rbx
000000000000001b <main_graph+0x1b> mov    %rcx,0x40(%rbx)
000000000000001f <main_graph+0x1f> mov    %rdx,0x38(%rbx)
0000000000000023 <main_graph+0x23> mov    %rdi,0xc8(%rbx)
    %39 = llvm.mlir.constant(512 : index) : i64
    %40 = llvm.mlir.null : !llvm.ptr<f32>
    %41 = llvm.getelementptr %40[33030144] : (!llvm.ptr<f32>) -> !llvm.ptr<f32>
    %42 = llvm.ptrtoint %41 : !llvm.ptr<f32> to i64
    %43 = llvm.add %42, %27  : i64
    %44 = llvm.call @_disagg_alloc(%28, %43) : (i32, i64) -> !llvm.ptr<i8>
000000000000002a <main_graph+0x2a> mov    $0x7e00010,%esi
000000000000002f <main_graph+0x2f> mov    $0x2,%edi
0000000000000034 <main_graph+0x34> callq  0000000000000039 <main_graph+0x39>
0000000000000039 <main_graph+0x39> mov    %rax,0xc0(%rbx)
    %45 = llvm.bitcast %44 : !llvm.ptr<i8> to !llvm.ptr<f32>
    %46 = llvm.ptrtoint %45 : !llvm.ptr<f32> to i64
    %47 = llvm.sub %27, %34  : i64
    %48 = llvm.add %46, %47  : i64
0000000000000040 <main_graph+0x40> add    $0xf,%rax
    %49 = llvm.urem %48, %27  : i64
    %50 = llvm.sub %48, %49  : i64
0000000000000044 <main_graph+0x44> and    $0xfffffffffffffff0,%rax
0000000000000048 <main_graph+0x48> mov    %rax,0x30(%rbx)
    %58 = llvm.insertvalue %39, %57[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %59 = llvm.insertvalue %34, %58[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %60 = llvm.alloca %31 x i64 : (i64) -> !llvm.ptr<i64>
    llvm.store %33, %60 : !llvm.ptr<i64>
    %61 = llvm.alloca %31 x i64 : (i64) -> !llvm.ptr<i64>
    llvm.store %33, %61 : !llvm.ptr<i64>
000000000000004c <main_graph+0x4c> movq   $0x0,0xf8(%rbx)
    %62 = llvm.getelementptr %40[524288] : (!llvm.ptr<f32>) -> !llvm.ptr<f32>
    %63 = llvm.inttoptr %24 : i64 to !llvm.ptr<f32>
    %64 = llvm.mlir.addressof @rbuf : !llvm.ptr<ptr<i8>>
    %65 = llvm.load %64 : !llvm.ptr<ptr<i8>>
0000000000000057 <main_graph+0x57> mov    0x0(%rip),%r15        # 000000000000005e <main_graph+0x5e>
000000000000005e <main_graph+0x5e> mov    (%r15),%rdi
    %75 = llvm.insertvalue %39, %74[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %76 = llvm.insertvalue %39, %75[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %77 = llvm.insertvalue %34, %76[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %78 = llvm.srem %31, %21  : i64
    %79 = llvm.mul %66, %78  : i64
    %80 = llvm.getelementptr %65[%79] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
0000000000000061 <main_graph+0x61> lea    0x200000(%rdi),%rax
    %85 = llvm.insertvalue %39, %84[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %86 = llvm.insertvalue %39, %85[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %87 = llvm.insertvalue %34, %86[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %88 = llvm.srem %20, %21  : i64
    %89 = llvm.mul %66, %88  : i64
    %90 = llvm.getelementptr %65[%89] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
0000000000000068 <main_graph+0x68> lea    0x400000(%rdi),%r13
    %95 = llvm.insertvalue %39, %94[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %96 = llvm.insertvalue %39, %95[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %97 = llvm.insertvalue %34, %96[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %98 = llvm.srem %19, %21  : i64
    %99 = llvm.mul %66, %98  : i64
    %100 = llvm.getelementptr %65[%99] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
000000000000006f <main_graph+0x6f> lea    0x600000(%rdi),%r12
0000000000000076 <main_graph+0x76> xor    %r14d,%r14d
0000000000000079 <main_graph+0x79> nopl   0x0(%rax)
0000000000000080 <main_graph+0x80> mov    %rax,0x28(%rbx)
0000000000000084 <main_graph+0x84> mov    %r13,0x48(%rbx)
0000000000000088 <main_graph+0x88> mov    %r12,%r13
  ^bb2:  // pred: ^bb1
    %116 = llvm.add %109, %34  : i64
    %117 = llvm.add %110, %34  : i64
    %118 = llvm.load %64 : !llvm.ptr<ptr<i8>>
    %119 = llvm.srem %109, %21  : i64
    %120 = llvm.mul %66, %119  : i64
000000000000008b <main_graph+0x8b> lea    0x800000(%r14),%r12d
0000000000000092 <main_graph+0x92> and    $0x7e00000,%r12d
    %121 = llvm.getelementptr %118[%120] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
0000000000000099 <main_graph+0x99> add    (%r15),%r12
  ^bb6:  // pred: ^bb5
    %133 = llvm.extractvalue %111[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %134 = llvm.mul %129, %39  : i64
    %135 = llvm.add %134, %131  : i64
    %136 = llvm.getelementptr %133[%135] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    llvm.store %37, %136 : !llvm.ptr<f32>
000000000000009c <main_graph+0x9c> mov    $0x200000,%edx
00000000000000a1 <main_graph+0xa1> xor    %esi,%esi
00000000000000a3 <main_graph+0xa3> callq  00000000000000a8 <main_graph+0xa8>
00000000000000a8 <main_graph+0xa8> mov    0x0(%rip),%rcx        # 00000000000000af <main_graph+0xaf>
  ^bb7:  // pred: ^bb5
    %138 = llvm.add %129, %34  : i64
    llvm.br ^bb3(%138 : i64)
  ^bb8:  // pred: ^bb3
    %139 = llvm.mlir.addressof @rdma_wrid_cnt : !llvm.ptr<i64>
    %140 = llvm.load %139 : !llvm.ptr<i64>
00000000000000af <main_graph+0xaf> mov    (%rcx),%r15
    %141 = llvm.add %140, %31  : i64
00000000000000b2 <main_graph+0xb2> lea    0x1(%r15),%rax
    llvm.store %141, %139 : !llvm.ptr<i64>
00000000000000b6 <main_graph+0xb6> mov    %rax,(%rcx)
00000000000000b9 <main_graph+0xb9> mov    0x0(%rip),%rax        # 00000000000000c0 <main_graph+0xc0>
00000000000000c0 <main_graph+0xc0> mov    (%rax),%rdi
    %144 = llvm.mul %66, %143  : i64
    %145 = llvm.getelementptr %142[%144] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
    %146 = llvm.bitcast %145 : !llvm.ptr<i8> to !llvm.ptr<f32>
    %147 = llvm.ptrtoint %146 : !llvm.ptr<f32> to i64
    %148 = llvm.ptrtoint %62 : !llvm.ptr<f32> to i64
    %149 = llvm.mul %108, %39  : i64
00000000000000c3 <main_graph+0xc3> add    %r14,%rdi
00000000000000c6 <main_graph+0xc6> mov    0x30(%rbx),%rax
    %150 = llvm.add %149, %32  : i64
    %151 = llvm.getelementptr %51[%150] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %152 = llvm.ptrtoint %151 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%147, %148, %152, %140, %18) : (i64, i64, i64, i64, i32) -> ()
00000000000000ca <main_graph+0xca> lea    (%rax,%r14,1),%rdx
00000000000000ce <main_graph+0xce> mov    $0x200000,%esi
00000000000000d3 <main_graph+0xd3> mov    %r15,%rcx
00000000000000d6 <main_graph+0xd6> xor    %r8d,%r8d
00000000000000d9 <main_graph+0xd9> callq  00000000000000de <main_graph+0xde>
    llvm.call @rsync(%61, %140) : (!llvm.ptr<i64>, i64) -> ()
00000000000000de <main_graph+0xde> lea    0xf8(%rbx),%rdi
00000000000000e5 <main_graph+0xe5> mov    %r15,%rsi
00000000000000e8 <main_graph+0xe8> mov    0x0(%rip),%r15        # 00000000000000ef <main_graph+0xef>
00000000000000ef <main_graph+0xef> callq  00000000000000f4 <main_graph+0xf4>
00000000000000f4 <main_graph+0xf4> mov    0x48(%rbx),%rax
    %115 = llvm.icmp "slt" %108, %38 : i64
00000000000000f8 <main_graph+0xf8> add    $0x200000,%r14
00000000000000ff <main_graph+0xff> mov    0x28(%rbx),%rdi
0000000000000103 <main_graph+0x103> cmp    $0x7e00000,%r14
    llvm.cond_br %115, ^bb2, ^bb9
000000000000010a <main_graph+0x10a> jne    0000000000000080 <main_graph+0x80>
    %153 = llvm.add %108, %26  : i64
    llvm.br ^bb1(%153, %116, %117, %112, %113, %114, %128 : i64, i64, i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)
  ^bb9:  // pred: ^bb1
    %154 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr<i8>
0000000000000110 <main_graph+0x110> mov    $0x7e00010,%edi
0000000000000115 <main_graph+0x115> callq  000000000000011a <main_graph+0x11a>
000000000000011a <main_graph+0x11a> mov    %rax,%r14
    %155 = llvm.bitcast %154 : !llvm.ptr<i8> to !llvm.ptr<f32>
    %156 = llvm.ptrtoint %155 : !llvm.ptr<f32> to i64
    %157 = llvm.add %156, %47  : i64
000000000000011d <main_graph+0x11d> add    $0xf,%r14
    %158 = llvm.urem %157, %27  : i64
    %159 = llvm.sub %157, %158  : i64
0000000000000121 <main_graph+0x121> and    $0xfffffffffffffff0,%r14
    %160 = llvm.inttoptr %159 : i64 to !llvm.ptr<f32>
    %161 = llvm.alloca %31 x i64 : (i64) -> !llvm.ptr<i64>
0000000000000125 <main_graph+0x125> mov    %rsp,%rax
0000000000000128 <main_graph+0x128> lea    -0x10(%rax),%rcx
000000000000012c <main_graph+0x12c> mov    %rcx,0x50(%rbx)
0000000000000130 <main_graph+0x130> mov    %rcx,%rsp
    llvm.store %33, %161 : !llvm.ptr<i64>
0000000000000133 <main_graph+0x133> movq   $0x0,-0x10(%rax)
000000000000013b <main_graph+0x13b> mov    0x0(%rip),%rdx        # 0000000000000142 <main_graph+0x142>
    %162 = llvm.alloca %31 x i64 : (i64) -> !llvm.ptr<i64>
    llvm.store %33, %162 : !llvm.ptr<i64>
    %163 = llvm.mlir.addressof @rdma_wrid_cnt : !llvm.ptr<i64>
    %164 = llvm.load %163 : !llvm.ptr<i64>
0000000000000142 <main_graph+0x142> mov    (%rdx),%rcx
    %165 = llvm.add %164, %31  : i64
0000000000000145 <main_graph+0x145> lea    0x1(%rcx),%rax
0000000000000149 <main_graph+0x149> mov    %rcx,0x28(%rbx)
    llvm.store %165, %163 : !llvm.ptr<i64>
000000000000014d <main_graph+0x14d> mov    %rax,(%rdx)
0000000000000150 <main_graph+0x150> mov    %rdx,%r12
    %166 = llvm.getelementptr %40[262144] : (!llvm.ptr<f32>) -> !llvm.ptr<f32>
    %167 = llvm.load %64 : !llvm.ptr<ptr<i8>>
0000000000000153 <main_graph+0x153> mov    (%r15),%rdi
0000000000000156 <main_graph+0x156> mov    %rdi,0xb0(%rbx)
    %178 = llvm.ptrtoint %171 : !llvm.ptr<f32> to i64
    %179 = llvm.ptrtoint %166 : !llvm.ptr<f32> to i64
    %180 = llvm.extractvalue %arg1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %181 = llvm.extractvalue %arg1[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %182 = llvm.add %181, %32  : i64
    %183 = llvm.getelementptr %180[%182] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
000000000000015d <main_graph+0x15d> mov    0x30(%rbp),%rax
0000000000000161 <main_graph+0x161> mov    0x28(%rbp),%rdx
0000000000000165 <main_graph+0x165> lea    (%rdx,%rax,4),%rdx
    %184 = llvm.ptrtoint %183 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%178, %179, %184, %164, %15) : (i64, i64, i64, i64, i32) -> ()
0000000000000169 <main_graph+0x169> mov    $0x100000,%esi
000000000000016e <main_graph+0x16e> mov    $0x4,%r8d
0000000000000174 <main_graph+0x174> callq  0000000000000179 <main_graph+0x179>
    %185 = llvm.load %64 : !llvm.ptr<ptr<i8>>
0000000000000179 <main_graph+0x179> mov    (%r15),%rdi
000000000000017c <main_graph+0x17c> mov    0x38(%rbx),%rcx
0000000000000180 <main_graph+0x180> mov    0x40(%rbx),%rax
    %194 = llvm.ptrtoint %187 : !llvm.ptr<f32> to i64
    %195 = llvm.ptrtoint %62 : !llvm.ptr<f32> to i64
    %196 = llvm.extractvalue %arg0[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %197 = llvm.extractvalue %arg0[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %198 = llvm.add %197, %32  : i64
    %199 = llvm.getelementptr %196[%198] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
0000000000000184 <main_graph+0x184> lea    (%rcx,%rax,4),%rdx
    %200 = llvm.ptrtoint %199 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%194, %195, %200, %33, %15) : (i64, i64, i64, i64, i32) -> ()
0000000000000188 <main_graph+0x188> mov    $0x200000,%esi
000000000000018d <main_graph+0x18d> mov    %rdi,0xa8(%rbx)
0000000000000194 <main_graph+0x194> xor    %ecx,%ecx
0000000000000196 <main_graph+0x196> mov    $0x4,%r8d
000000000000019c <main_graph+0x19c> callq  00000000000001a1 <main_graph+0x1a1>
    %201 = llvm.load %163 : !llvm.ptr<i64>
00000000000001a1 <main_graph+0x1a1> mov    (%r12),%rcx
    %202 = llvm.add %201, %31  : i64
00000000000001a5 <main_graph+0x1a5> lea    0x1(%rcx),%rax
    llvm.store %202, %163 : !llvm.ptr<i64>
00000000000001a9 <main_graph+0x1a9> mov    %rax,(%r12)
    %203 = llvm.load %64 : !llvm.ptr<ptr<i8>>
00000000000001ad <main_graph+0x1ad> mov    (%r15),%r13
    %211 = llvm.insertvalue %34, %210[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %212 = llvm.ptrtoint %205 : !llvm.ptr<f32> to i64
    %213 = llvm.add %32, %32  : i64
    %214 = llvm.getelementptr %51[%213] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %215 = llvm.ptrtoint %214 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%212, %195, %215, %201, %15) : (i64, i64, i64, i64, i32) -> ()
00000000000001b0 <main_graph+0x1b0> mov    $0x200000,%esi
00000000000001b5 <main_graph+0x1b5> mov    %r13,%rdi
00000000000001b8 <main_graph+0x1b8> mov    0x30(%rbx),%rdx
00000000000001bc <main_graph+0x1bc> mov    %rcx,0xa0(%rbx)
00000000000001c3 <main_graph+0x1c3> mov    $0x4,%r8d
00000000000001c9 <main_graph+0x1c9> callq  00000000000001ce <main_graph+0x1ce>
    %216 = llvm.load %64 : !llvm.ptr<ptr<i8>>
00000000000001ce <main_graph+0x1ce> mov    (%r15),%rdi
00000000000001d1 <main_graph+0x1d1> mov    0x38(%rbx),%r15
00000000000001d5 <main_graph+0x1d5> mov    0x40(%rbx),%r12
    %222 = llvm.insertvalue %13, %221[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %223 = llvm.insertvalue %13, %222[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %224 = llvm.insertvalue %34, %223[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %225 = llvm.ptrtoint %218 : !llvm.ptr<f32> to i64
    %226 = llvm.add %197, %25  : i64
    %227 = llvm.getelementptr %196[%226] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
00000000000001d9 <main_graph+0x1d9> lea    (%r15,%r12,4),%rdx
00000000000001dd <main_graph+0x1dd> add    $0x200000,%rdx
    %228 = llvm.ptrtoint %227 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%225, %195, %228, %33, %15) : (i64, i64, i64, i64, i32) -> ()
00000000000001e4 <main_graph+0x1e4> mov    $0x200000,%esi
00000000000001e9 <main_graph+0x1e9> mov    %rdi,0x98(%rbx)
00000000000001f0 <main_graph+0x1f0> xor    %ecx,%ecx
00000000000001f2 <main_graph+0x1f2> mov    $0x4,%r8d
00000000000001f8 <main_graph+0x1f8> callq  00000000000001fd <main_graph+0x1fd>
00000000000001fd <main_graph+0x1fd> mov    0x0(%rip),%rdx        # 0000000000000204 <main_graph+0x204>
    %229 = llvm.load %163 : !llvm.ptr<i64>
0000000000000204 <main_graph+0x204> mov    (%rdx),%rcx
    %230 = llvm.add %229, %31  : i64
0000000000000207 <main_graph+0x207> lea    0x1(%rcx),%rax
    llvm.store %230, %163 : !llvm.ptr<i64>
000000000000020b <main_graph+0x20b> mov    %rax,(%rdx)
000000000000020e <main_graph+0x20e> mov    0x0(%rip),%rax        # 0000000000000215 <main_graph+0x215>
    %231 = llvm.load %64 : !llvm.ptr<ptr<i8>>
0000000000000215 <main_graph+0x215> mov    (%rax),%rdi
0000000000000218 <main_graph+0x218> mov    0x30(%rbx),%rax
    %237 = llvm.insertvalue %13, %236[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %238 = llvm.insertvalue %13, %237[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %239 = llvm.insertvalue %34, %238[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %240 = llvm.ptrtoint %233 : !llvm.ptr<f32> to i64
    %241 = llvm.add %25, %32  : i64
    %242 = llvm.getelementptr %51[%241] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
000000000000021c <main_graph+0x21c> lea    0x200000(%rax),%rdx
    %243 = llvm.ptrtoint %242 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%240, %195, %243, %229, %15) : (i64, i64, i64, i64, i32) -> ()
0000000000000223 <main_graph+0x223> mov    $0x200000,%esi
0000000000000228 <main_graph+0x228> mov    %rdi,0x88(%rbx)
000000000000022f <main_graph+0x22f> mov    %rcx,0x90(%rbx)
0000000000000236 <main_graph+0x236> mov    $0x4,%r8d
000000000000023c <main_graph+0x23c> callq  0000000000000241 <main_graph+0x241>
    %244 = llvm.load %64 : !llvm.ptr<ptr<i8>>
0000000000000241 <main_graph+0x241> mov    0x0(%rip),%rax        # 0000000000000248 <main_graph+0x248>
0000000000000248 <main_graph+0x248> mov    (%rax),%rdi
    %250 = llvm.insertvalue %13, %249[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %251 = llvm.insertvalue %13, %250[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %252 = llvm.insertvalue %34, %251[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %253 = llvm.ptrtoint %246 : !llvm.ptr<f32> to i64
    %254 = llvm.add %197, %12  : i64
    %255 = llvm.getelementptr %196[%254] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
000000000000024b <main_graph+0x24b> lea    (%r15,%r12,4),%rdx
000000000000024f <main_graph+0x24f> add    $0x400000,%rdx
    %256 = llvm.ptrtoint %255 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%253, %195, %256, %33, %15) : (i64, i64, i64, i64, i32) -> ()
0000000000000256 <main_graph+0x256> mov    $0x200000,%esi
000000000000025b <main_graph+0x25b> mov    %rdi,0x80(%rbx)
0000000000000262 <main_graph+0x262> xor    %ecx,%ecx
0000000000000264 <main_graph+0x264> mov    $0x4,%r8d
000000000000026a <main_graph+0x26a> callq  000000000000026f <main_graph+0x26f>
000000000000026f <main_graph+0x26f> mov    0x0(%rip),%rdx        # 0000000000000276 <main_graph+0x276>
    %257 = llvm.load %163 : !llvm.ptr<i64>
0000000000000276 <main_graph+0x276> mov    (%rdx),%rcx
    %258 = llvm.add %257, %31  : i64
0000000000000279 <main_graph+0x279> lea    0x1(%rcx),%rax
    llvm.store %258, %163 : !llvm.ptr<i64>
000000000000027d <main_graph+0x27d> mov    %rax,(%rdx)
0000000000000280 <main_graph+0x280> mov    0x0(%rip),%r15        # 0000000000000287 <main_graph+0x287>
    %259 = llvm.load %64 : !llvm.ptr<ptr<i8>>
0000000000000287 <main_graph+0x287> mov    (%r15),%rdi
000000000000028a <main_graph+0x28a> mov    0x30(%rbx),%r12
    %265 = llvm.insertvalue %13, %264[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %266 = llvm.insertvalue %13, %265[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %267 = llvm.insertvalue %34, %266[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %268 = llvm.ptrtoint %261 : !llvm.ptr<f32> to i64
    %269 = llvm.add %12, %32  : i64
    %270 = llvm.getelementptr %51[%269] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
000000000000028e <main_graph+0x28e> lea    0x400000(%r12),%rdx
    %271 = llvm.ptrtoint %270 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%268, %195, %271, %257, %15) : (i64, i64, i64, i64, i32) -> ()
0000000000000296 <main_graph+0x296> mov    $0x200000,%esi
000000000000029b <main_graph+0x29b> mov    %rdi,0x70(%rbx)
000000000000029f <main_graph+0x29f> mov    %rcx,0x78(%rbx)
00000000000002a3 <main_graph+0x2a3> mov    $0x4,%r8d
00000000000002a9 <main_graph+0x2a9> callq  00000000000002ae <main_graph+0x2ae>
    %272 = llvm.load %64 : !llvm.ptr<ptr<i8>>
00000000000002ae <main_graph+0x2ae> mov    (%r15),%rdi
00000000000002b1 <main_graph+0x2b1> mov    0x40(%rbx),%rax
00000000000002b5 <main_graph+0x2b5> mov    0x38(%rbx),%rcx
    %278 = llvm.insertvalue %13, %277[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %279 = llvm.insertvalue %13, %278[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %280 = llvm.insertvalue %34, %279[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %281 = llvm.ptrtoint %274 : !llvm.ptr<f32> to i64
    %282 = llvm.add %197, %11  : i64
    %283 = llvm.getelementptr %196[%282] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
00000000000002b9 <main_graph+0x2b9> lea    (%rcx,%rax,4),%rdx
00000000000002bd <main_graph+0x2bd> add    $0x600000,%rdx
    %284 = llvm.ptrtoint %283 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%281, %195, %284, %33, %15) : (i64, i64, i64, i64, i32) -> ()
00000000000002c4 <main_graph+0x2c4> mov    $0x200000,%esi
00000000000002c9 <main_graph+0x2c9> mov    %rdi,0x68(%rbx)
00000000000002cd <main_graph+0x2cd> xor    %ecx,%ecx
00000000000002cf <main_graph+0x2cf> mov    $0x4,%r8d
00000000000002d5 <main_graph+0x2d5> callq  00000000000002da <main_graph+0x2da>
00000000000002da <main_graph+0x2da> mov    0x0(%rip),%rdx        # 00000000000002e1 <main_graph+0x2e1>
    %285 = llvm.load %163 : !llvm.ptr<i64>
00000000000002e1 <main_graph+0x2e1> mov    (%rdx),%rcx
    %286 = llvm.add %285, %31  : i64
00000000000002e4 <main_graph+0x2e4> lea    0x1(%rcx),%rax
    llvm.store %286, %163 : !llvm.ptr<i64>
00000000000002e8 <main_graph+0x2e8> mov    %rax,(%rdx)
    %287 = llvm.load %64 : !llvm.ptr<ptr<i8>>
00000000000002eb <main_graph+0x2eb> mov    (%r15),%rdi
00000000000002ee <main_graph+0x2ee> xor    %r15d,%r15d
    %293 = llvm.insertvalue %13, %292[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %294 = llvm.insertvalue %13, %293[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %295 = llvm.insertvalue %34, %294[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %296 = llvm.ptrtoint %289 : !llvm.ptr<f32> to i64
    %297 = llvm.add %11, %32  : i64
    %298 = llvm.getelementptr %51[%297] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
00000000000002f1 <main_graph+0x2f1> lea    0x600000(%r12),%rdx
    %299 = llvm.ptrtoint %298 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%296, %195, %299, %285, %15) : (i64, i64, i64, i64, i32) -> ()
00000000000002f9 <main_graph+0x2f9> mov    $0x200000,%esi
00000000000002fe <main_graph+0x2fe> mov    %rdi,0x58(%rbx)
0000000000000302 <main_graph+0x302> mov    %rcx,0x60(%rbx)
0000000000000306 <main_graph+0x306> mov    $0x4,%r8d
000000000000030c <main_graph+0x30c> callq  0000000000000311 <main_graph+0x311>
0000000000000311 <main_graph+0x311> mov    0x50(%rbx),%rdi
0000000000000315 <main_graph+0x315> mov    0x28(%rbx),%rsi
    llvm.call @rsync(%161, %164) : (!llvm.ptr<i64>, i64) -> ()
0000000000000319 <main_graph+0x319> callq  000000000000031e <main_graph+0x31e>
    llvm.br ^bb10(%32, %177, %193, %211, %201, %224, %239, %229, %252, %267, %257, %280, %295, %285 : i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<1 x i64>, array<1 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64)
  ^bb10(%300: i64, %301: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<1 x i64>, array<1 x i64>)>, %302: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %303: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %304: i64, %305: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %306: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %307: i64, %308: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %309: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %310: i64, %311: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %312: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %313: i64):  // 2 preds: ^bb9, ^bb23
    %314 = llvm.icmp "slt" %300, %38 : i64
    llvm.cond_br %314, ^bb11, ^bb24
000000000000031e <main_graph+0x31e> addq   $0x3800,0xb0(%rbx)
0000000000000329 <main_graph+0x329> nopl   0x0(%rax)
0000000000000330 <main_graph+0x330> mov    0xa8(%rbx),%r12
0000000000000337 <main_graph+0x337> mov    0xa0(%rbx),%rax
000000000000033e <main_graph+0x33e> mov    %rax,0x28(%rbx)
0000000000000342 <main_graph+0x342> mov    0x98(%rbx),%rax
0000000000000349 <main_graph+0x349> mov    %rax,0xa8(%rbx)
0000000000000350 <main_graph+0x350> mov    0x88(%rbx),%rax
0000000000000357 <main_graph+0x357> mov    %rax,0xd0(%rbx)
000000000000035e <main_graph+0x35e> mov    0x90(%rbx),%rax
0000000000000365 <main_graph+0x365> mov    %rax,0xa0(%rbx)
000000000000036c <main_graph+0x36c> mov    0x80(%rbx),%rax
0000000000000373 <main_graph+0x373> mov    %rax,0x98(%rbx)
000000000000037a <main_graph+0x37a> mov    0x70(%rbx),%rax
000000000000037e <main_graph+0x37e> mov    %rax,0x88(%rbx)
0000000000000385 <main_graph+0x385> mov    0x78(%rbx),%rax
0000000000000389 <main_graph+0x389> mov    %rax,0x90(%rbx)
0000000000000390 <main_graph+0x390> mov    0x68(%rbx),%rax
0000000000000394 <main_graph+0x394> mov    %rax,0x80(%rbx)
000000000000039b <main_graph+0x39b> mov    0x58(%rbx),%rax
000000000000039f <main_graph+0x39f> mov    %rax,0x70(%rbx)
00000000000003a3 <main_graph+0x3a3> mov    0x60(%rbx),%rax
00000000000003a7 <main_graph+0x3a7> mov    %rax,0x78(%rbx)
00000000000003ab <main_graph+0x3ab> mov    %r15,0xb8(%rbx)
    %321 = llvm.insertvalue %14, %320[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %322 = llvm.insertvalue %13, %321[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %323 = llvm.insertvalue %13, %322[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %324 = llvm.insertvalue %34, %323[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %325 = llvm.ptrtoint %318 : !llvm.ptr<f32> to i64
    %326 = llvm.mul %315, %39  : i64
00000000000003b2 <main_graph+0x3b2> shl    $0x9,%r15
00000000000003b6 <main_graph+0x3b6> mov    0x40(%rbx),%rax
    %327 = llvm.add %326, %197  : i64
00000000000003ba <main_graph+0x3ba> add    %r15,%rax
00000000000003bd <main_graph+0x3bd> add    $0x200000,%rax
00000000000003c3 <main_graph+0x3c3> mov    0x38(%rbx),%rcx
    %328 = llvm.getelementptr %196[%327] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
00000000000003c7 <main_graph+0x3c7> lea    (%rcx,%rax,4),%rdx
00000000000003cb <main_graph+0x3cb> mov    0x0(%rip),%rax        # 00000000000003d2 <main_graph+0x3d2>
    %316 = llvm.load %64 : !llvm.ptr<ptr<i8>>
00000000000003d2 <main_graph+0x3d2> mov    (%rax),%rdi
    %329 = llvm.ptrtoint %328 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%325, %195, %329, %33, %15) : (i64, i64, i64, i64, i32) -> ()
00000000000003d5 <main_graph+0x3d5> mov    $0x200000,%esi
00000000000003da <main_graph+0x3da> mov    %rdi,0x68(%rbx)
00000000000003de <main_graph+0x3de> xor    %ecx,%ecx
00000000000003e0 <main_graph+0x3e0> mov    $0x4,%r8d
00000000000003e6 <main_graph+0x3e6> callq  00000000000003eb <main_graph+0x3eb>
00000000000003eb <main_graph+0x3eb> mov    0x0(%rip),%rdx        # 00000000000003f2 <main_graph+0x3f2>
    %330 = llvm.load %163 : !llvm.ptr<i64>
00000000000003f2 <main_graph+0x3f2> mov    (%rdx),%rcx
    %331 = llvm.add %330, %31  : i64
00000000000003f5 <main_graph+0x3f5> lea    0x1(%rcx),%rax
    llvm.store %331, %163 : !llvm.ptr<i64>
00000000000003f9 <main_graph+0x3f9> mov    %rax,(%rdx)
    %332 = llvm.load %64 : !llvm.ptr<ptr<i8>>
00000000000003fc <main_graph+0x3fc> mov    0x0(%rip),%rax        # 0000000000000403 <main_graph+0x403>
0000000000000403 <main_graph+0x403> mov    (%rax),%rdi
0000000000000406 <main_graph+0x406> mov    0x30(%rbx),%rax
    %338 = llvm.insertvalue %13, %337[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %339 = llvm.insertvalue %13, %338[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %340 = llvm.insertvalue %34, %339[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %341 = llvm.ptrtoint %334 : !llvm.ptr<f32> to i64
    %342 = llvm.add %326, %32  : i64
    %343 = llvm.getelementptr %51[%342] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
000000000000040a <main_graph+0x40a> lea    0x800000(%rax,%r15,4),%rdx
    %344 = llvm.ptrtoint %343 : !llvm.ptr<f32> to i64
    llvm.call @rdma_req(%341, %195, %344, %330, %15) : (i64, i64, i64, i64, i32) -> ()
0000000000000412 <main_graph+0x412> mov    $0x200000,%esi
0000000000000417 <main_graph+0x417> mov    %rdi,0x58(%rbx)
000000000000041b <main_graph+0x41b> mov    %rcx,0x60(%rbx)
000000000000041f <main_graph+0x41f> mov    $0x4,%r8d
0000000000000425 <main_graph+0x425> callq  000000000000042a <main_graph+0x42a>
000000000000042a <main_graph+0x42a> mov    0x50(%rbx),%rdi
000000000000042e <main_graph+0x42e> mov    0x28(%rbx),%rsi
    llvm.call @rsync(%161, %304) : (!llvm.ptr<i64>, i64) -> ()
0000000000000432 <main_graph+0x432> callq  0000000000000437 <main_graph+0x437>
    llvm.br ^bb12(%32 : i64)
  ^bb12(%345: i64):  // 2 preds: ^bb11, ^bb22
    %346 = llvm.icmp "slt" %345, %14 : i64
    llvm.cond_br %346, ^bb13, ^bb23
0000000000000437 <main_graph+0x437> add    $0x181c,%r12
000000000000043e <main_graph+0x43e> xor    %ecx,%ecx
0000000000000440 <main_graph+0x440> mov    0xb8(%rbx),%rax
  ^bb13:  // pred: ^bb12
    %347 = llvm.mul %345, %30  : i64
    %348 = llvm.add %300, %347  : i64
0000000000000447 <main_graph+0x447> lea    (%rax,%rcx,4),%rdx
000000000000044b <main_graph+0x44b> mov    %rcx,0xd8(%rbx)
0000000000000452 <main_graph+0x452> shl    $0xb,%rcx
0000000000000456 <main_graph+0x456> mov    %rcx,0x48(%rbx)
000000000000045a <main_graph+0x45a> shl    $0x9,%rdx
000000000000045e <main_graph+0x45e> mov    %rdx,%rax
0000000000000461 <main_graph+0x461> or     $0x200,%rax
0000000000000467 <main_graph+0x467> mov    %rax,0xf0(%rbx)
000000000000046e <main_graph+0x46e> mov    %rdx,%rax
0000000000000471 <main_graph+0x471> or     $0x400,%rax
0000000000000477 <main_graph+0x477> mov    %rax,0xe8(%rbx)
000000000000047e <main_graph+0x47e> mov    %rdx,%rax
0000000000000481 <main_graph+0x481> mov    %rdx,0x28(%rbx)
0000000000000485 <main_graph+0x485> or     $0x600,%rdx
000000000000048c <main_graph+0x48c> mov    %rdx,0xe0(%rbx)
0000000000000493 <main_graph+0x493> mov    0xb0(%rbx),%r8
000000000000049a <main_graph+0x49a> xor    %r10d,%r10d
000000000000049d <main_graph+0x49d> nopl   (%rax)
00000000000004a0 <main_graph+0x4a0> mov    0x48(%rbx),%rax
00000000000004a4 <main_graph+0x4a4> lea    (%r10,%rax,1),%r11
00000000000004a8 <main_graph+0x4a8> mov    0x28(%rbx),%rax
00000000000004ac <main_graph+0x4ac> lea    (%r10,%rax,1),%r15
00000000000004b0 <main_graph+0x4b0> mov    0xf0(%rbx),%rax
00000000000004b7 <main_graph+0x4b7> add    %r10,%rax
00000000000004ba <main_graph+0x4ba> mov    0xe8(%rbx),%rcx
00000000000004c1 <main_graph+0x4c1> lea    (%rcx,%r10,1),%rdx
00000000000004c5 <main_graph+0x4c5> mov    0xe0(%rbx),%rcx
00000000000004cc <main_graph+0x4cc> lea    (%rcx,%r10,1),%rsi
00000000000004d0 <main_graph+0x4d0> mov    $0xfffffffffffffff8,%rdi
00000000000004d7 <main_graph+0x4d7> mov    %r8,%r9
00000000000004da <main_graph+0x4da> nopw   0x0(%rax,%rax,1)
    llvm.cond_br %352, ^bb17, ^bb21
  ^bb17:  // pred: ^bb16
    %353 = llvm.mlir.null : !llvm.ptr<vector<8xf32>>
    %354 = llvm.getelementptr %353[4] : (!llvm.ptr<vector<8xf32>>) -> !llvm.ptr<vector<8xf32>>
    %355 = llvm.ptrtoint %354 : !llvm.ptr<vector<8xf32>> to i64
    %356 = llvm.alloca %355 x vector<8xf32> {alignment = 64 : i64} : (i64) -> !llvm.ptr<vector<8xf32>>
00000000000004e0 <main_graph+0x4e0> mov    %rsp,%rcx
00000000000004e3 <main_graph+0x4e3> add    $0xfffffffffffff000,%rcx
00000000000004ea <main_graph+0x4ea> and    $0xffffffffffffffc0,%rcx
00000000000004ee <main_graph+0x4ee> mov    %rcx,%rsp
    %357 = llvm.extractvalue %303[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %358 = llvm.mul %345, %13  : i64
    %359 = llvm.add %358, %349  : i64
    %360 = llvm.getelementptr %357[%359] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %361 = llvm.bitcast %360 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    %362 = llvm.load %361 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
00000000000004f1 <main_graph+0x4f1> movups 0x0(%r13,%r11,4),%xmm5
00000000000004f7 <main_graph+0x4f7> movups 0x10(%r13,%r11,4),%xmm6
    llvm.store %362, %356 : !llvm.ptr<vector<8xf32>>
00000000000004fd <main_graph+0x4fd> movaps %xmm6,0x10(%rcx)
0000000000000501 <main_graph+0x501> movaps %xmm5,(%rcx)
    %363 = llvm.add %348, %34  : i64
    %364 = llvm.add %349, %39  : i64
    %365 = llvm.add %358, %364  : i64
    %366 = llvm.getelementptr %357[%365] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %367 = llvm.bitcast %366 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    %368 = llvm.load %367 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000504 <main_graph+0x504> movups 0x800(%r13,%r11,4),%xmm0
000000000000050d <main_graph+0x50d> movups 0x810(%r13,%r11,4),%xmm2
    %369 = llvm.getelementptr %356[1] : (!llvm.ptr<vector<8xf32>>) -> !llvm.ptr<vector<8xf32>>
    llvm.store %368, %369 : !llvm.ptr<vector<8xf32>>
0000000000000516 <main_graph+0x516> movaps %xmm2,0x30(%rcx)
000000000000051a <main_graph+0x51a> movaps %xmm0,0x20(%rcx)
    %370 = llvm.add %348, %35  : i64
    %371 = llvm.add %349, %26  : i64
    %372 = llvm.add %358, %371  : i64
    %373 = llvm.getelementptr %357[%372] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %374 = llvm.bitcast %373 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    %375 = llvm.load %374 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
000000000000051e <main_graph+0x51e> movups 0x1000(%r13,%r11,4),%xmm1
0000000000000527 <main_graph+0x527> movups 0x1010(%r13,%r11,4),%xmm3
    %376 = llvm.getelementptr %356[2] : (!llvm.ptr<vector<8xf32>>) -> !llvm.ptr<vector<8xf32>>
    llvm.store %375, %376 : !llvm.ptr<vector<8xf32>>
0000000000000530 <main_graph+0x530> movaps %xmm3,0x50(%rcx)
0000000000000534 <main_graph+0x534> movaps %xmm1,0x40(%rcx)
    %377 = llvm.add %348, %36  : i64
    %378 = llvm.add %349, %9  : i64
    %379 = llvm.add %358, %378  : i64
    %380 = llvm.getelementptr %357[%379] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %381 = llvm.bitcast %380 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    %382 = llvm.load %381 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000538 <main_graph+0x538> movups 0x1800(%r13,%r11,4),%xmm4
0000000000000541 <main_graph+0x541> movups 0x1810(%r13,%r11,4),%xmm7
    %383 = llvm.getelementptr %356[3] : (!llvm.ptr<vector<8xf32>>) -> !llvm.ptr<vector<8xf32>>
    llvm.store %382, %383 : !llvm.ptr<vector<8xf32>>
000000000000054a <main_graph+0x54a> movaps %xmm7,0x70(%rcx)
000000000000054e <main_graph+0x54e> movaps %xmm4,0x60(%rcx)
    %388 = llvm.add %358, %386  : i64
    %389 = llvm.getelementptr %387[%388] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %390 = llvm.load %389 : !llvm.ptr<f32>
    %391 = llvm.mlir.undef : vector<8xf32>
    %392 = llvm.insertelement %390, %391[%18 : i32] : vector<8xf32>
    %393 = llvm.shufflevector %392, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000552 <main_graph+0x552> movss  -0x17fc(%r12,%rdi,4),%xmm8
000000000000055c <main_graph+0x55c> shufps $0x0,%xmm8,%xmm8
    %396 = llvm.mul %384, %39  : i64
    %397 = llvm.add %395, %396  : i64
    %398 = llvm.extractvalue %301[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<1 x i64>, array<1 x i64>)> 
    %399 = llvm.getelementptr %398[%397] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %400 = llvm.bitcast %399 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    %401 = llvm.load %400 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000561 <main_graph+0x561> movups -0x3800(%r9),%xmm7
0000000000000569 <main_graph+0x569> movups -0x37f0(%r9),%xmm4
    %402 = llvm.load %356 : !llvm.ptr<vector<8xf32>>
    %403 = "llvm.intr.fmuladd"(%393, %401, %402) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000571 <main_graph+0x571> movaps %xmm8,%xmm10
0000000000000575 <main_graph+0x575> mulps  %xmm4,%xmm10
0000000000000579 <main_graph+0x579> mulps  %xmm7,%xmm8
000000000000057d <main_graph+0x57d> addps  %xmm5,%xmm8
0000000000000581 <main_graph+0x581> addps  %xmm6,%xmm10
    llvm.store %403, %356 : !llvm.ptr<vector<8xf32>>
0000000000000585 <main_graph+0x585> movaps %xmm8,(%rcx)
0000000000000589 <main_graph+0x589> movaps %xmm10,0x10(%rcx)
    %404 = llvm.add %386, %34  : i64
    %405 = llvm.add %358, %404  : i64
    %406 = llvm.getelementptr %387[%405] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %407 = llvm.load %406 : !llvm.ptr<f32>
    %408 = llvm.insertelement %407, %391[%18 : i32] : vector<8xf32>
    %409 = llvm.shufflevector %408, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
000000000000058e <main_graph+0x58e> movss  -0x17f8(%r12,%rdi,4),%xmm11
0000000000000598 <main_graph+0x598> shufps $0x0,%xmm11,%xmm11
    %410 = llvm.add %397, %39  : i64
    %411 = llvm.getelementptr %398[%410] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %412 = llvm.bitcast %411 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    %413 = llvm.load %412 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
000000000000059d <main_graph+0x59d> movups -0x3000(%r9),%xmm5
00000000000005a5 <main_graph+0x5a5> movups -0x2ff0(%r9),%xmm9
    %414 = llvm.load %356 : !llvm.ptr<vector<8xf32>>
    %415 = "llvm.intr.fmuladd"(%409, %413, %414) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000005ad <main_graph+0x5ad> movaps %xmm11,%xmm12
00000000000005b1 <main_graph+0x5b1> mulps  %xmm5,%xmm12
00000000000005b5 <main_graph+0x5b5> addps  %xmm8,%xmm12
00000000000005b9 <main_graph+0x5b9> mulps  %xmm9,%xmm11
00000000000005bd <main_graph+0x5bd> addps  %xmm10,%xmm11
    llvm.store %415, %356 : !llvm.ptr<vector<8xf32>>
00000000000005c1 <main_graph+0x5c1> movaps %xmm11,0x10(%rcx)
00000000000005c6 <main_graph+0x5c6> movaps %xmm12,(%rcx)
    %416 = llvm.add %386, %35  : i64
    %417 = llvm.add %358, %416  : i64
    %418 = llvm.getelementptr %387[%417] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %419 = llvm.load %418 : !llvm.ptr<f32>
    %420 = llvm.insertelement %419, %391[%18 : i32] : vector<8xf32>
    %421 = llvm.shufflevector %420, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000005ca <main_graph+0x5ca> movss  -0x17f4(%r12,%rdi,4),%xmm13
    %422 = llvm.add %397, %26  : i64
    %423 = llvm.getelementptr %398[%422] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %424 = llvm.bitcast %423 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    %425 = llvm.load %424 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
00000000000005d4 <main_graph+0x5d4> movups -0x2800(%r9),%xmm6
    %421 = llvm.shufflevector %420, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000005dc <main_graph+0x5dc> shufps $0x0,%xmm13,%xmm13
    %425 = llvm.load %424 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
00000000000005e1 <main_graph+0x5e1> movups -0x27f0(%r9),%xmm10
    %426 = llvm.load %356 : !llvm.ptr<vector<8xf32>>
    %427 = "llvm.intr.fmuladd"(%421, %425, %426) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000005e9 <main_graph+0x5e9> movaps %xmm13,%xmm14
00000000000005ed <main_graph+0x5ed> mulps  %xmm6,%xmm14
00000000000005f1 <main_graph+0x5f1> addps  %xmm12,%xmm14
00000000000005f5 <main_graph+0x5f5> mulps  %xmm10,%xmm13
00000000000005f9 <main_graph+0x5f9> addps  %xmm11,%xmm13
    llvm.store %427, %356 : !llvm.ptr<vector<8xf32>>
00000000000005fd <main_graph+0x5fd> movaps %xmm13,0x10(%rcx)
0000000000000602 <main_graph+0x602> movaps %xmm14,(%rcx)
    %428 = llvm.add %386, %36  : i64
    %429 = llvm.add %358, %428  : i64
    %430 = llvm.getelementptr %387[%429] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %431 = llvm.load %430 : !llvm.ptr<f32>
    %432 = llvm.insertelement %431, %391[%18 : i32] : vector<8xf32>
    %433 = llvm.shufflevector %432, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000606 <main_graph+0x606> movss  -0x17f0(%r12,%rdi,4),%xmm12
    %434 = llvm.add %397, %9  : i64
    %435 = llvm.getelementptr %398[%434] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %436 = llvm.bitcast %435 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    %437 = llvm.load %436 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000610 <main_graph+0x610> movups -0x2000(%r9),%xmm8
0000000000000618 <main_graph+0x618> movups -0x1ff0(%r9),%xmm11
    %433 = llvm.shufflevector %432, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000620 <main_graph+0x620> shufps $0x0,%xmm12,%xmm12
    %438 = llvm.load %356 : !llvm.ptr<vector<8xf32>>
    %439 = "llvm.intr.fmuladd"(%433, %437, %438) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000625 <main_graph+0x625> movaps %xmm12,%xmm15
0000000000000629 <main_graph+0x629> mulps  %xmm8,%xmm15
000000000000062d <main_graph+0x62d> mulps  %xmm11,%xmm12
0000000000000631 <main_graph+0x631> addps  %xmm14,%xmm15
0000000000000635 <main_graph+0x635> addps  %xmm13,%xmm12
    llvm.store %439, %356 : !llvm.ptr<vector<8xf32>>
0000000000000639 <main_graph+0x639> movaps %xmm12,0x10(%rcx)
000000000000063e <main_graph+0x63e> movaps %xmm15,(%rcx)
    %440 = llvm.add %386, %39  : i64
    %441 = llvm.add %358, %440  : i64
    %442 = llvm.getelementptr %387[%441] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %443 = llvm.load %442 : !llvm.ptr<f32>
    %444 = llvm.insertelement %443, %391[%18 : i32] : vector<8xf32>
    %445 = llvm.shufflevector %444, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000642 <main_graph+0x642> movss  -0xffc(%r12,%rdi,4),%xmm12
000000000000064c <main_graph+0x64c> shufps $0x0,%xmm12,%xmm12
    %446 = llvm.load %400 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %447 = llvm.load %369 : !llvm.ptr<vector<8xf32>>
    %448 = "llvm.intr.fmuladd"(%445, %446, %447) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000651 <main_graph+0x651> movaps %xmm12,%xmm13
0000000000000655 <main_graph+0x655> mulps  %xmm4,%xmm13
0000000000000659 <main_graph+0x659> addps  %xmm2,%xmm13
000000000000065d <main_graph+0x65d> mulps  %xmm7,%xmm12
0000000000000661 <main_graph+0x661> addps  %xmm0,%xmm12
    llvm.store %448, %369 : !llvm.ptr<vector<8xf32>>
0000000000000665 <main_graph+0x665> movaps %xmm12,0x20(%rcx)
000000000000066a <main_graph+0x66a> movaps %xmm13,0x30(%rcx)
    %449 = llvm.add %386, %8  : i64
    %450 = llvm.add %358, %449  : i64
    %451 = llvm.getelementptr %387[%450] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %452 = llvm.load %451 : !llvm.ptr<f32>
    %453 = llvm.insertelement %452, %391[%18 : i32] : vector<8xf32>
    %454 = llvm.shufflevector %453, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
000000000000066f <main_graph+0x66f> movss  -0xff8(%r12,%rdi,4),%xmm0
0000000000000679 <main_graph+0x679> shufps $0x0,%xmm0,%xmm0
    %455 = llvm.load %412 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %456 = llvm.load %369 : !llvm.ptr<vector<8xf32>>
    %457 = "llvm.intr.fmuladd"(%454, %455, %456) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
000000000000067d <main_graph+0x67d> movaps %xmm0,%xmm2
0000000000000680 <main_graph+0x680> mulps  %xmm9,%xmm2
0000000000000684 <main_graph+0x684> addps  %xmm13,%xmm2
0000000000000688 <main_graph+0x688> mulps  %xmm5,%xmm0
000000000000068b <main_graph+0x68b> addps  %xmm12,%xmm0
    llvm.store %457, %369 : !llvm.ptr<vector<8xf32>>
000000000000068f <main_graph+0x68f> movaps %xmm0,0x20(%rcx)
0000000000000693 <main_graph+0x693> movaps %xmm2,0x30(%rcx)
    %458 = llvm.add %386, %7  : i64
    %459 = llvm.add %358, %458  : i64
    %460 = llvm.getelementptr %387[%459] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %461 = llvm.load %460 : !llvm.ptr<f32>
    %462 = llvm.insertelement %461, %391[%18 : i32] : vector<8xf32>
    %463 = llvm.shufflevector %462, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000697 <main_graph+0x697> movss  -0xff4(%r12,%rdi,4),%xmm12
00000000000006a1 <main_graph+0x6a1> shufps $0x0,%xmm12,%xmm12
    %464 = llvm.load %424 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %465 = llvm.load %369 : !llvm.ptr<vector<8xf32>>
    %466 = "llvm.intr.fmuladd"(%463, %464, %465) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000006a6 <main_graph+0x6a6> movaps %xmm12,%xmm13
00000000000006aa <main_graph+0x6aa> mulps  %xmm10,%xmm13
00000000000006ae <main_graph+0x6ae> mulps  %xmm6,%xmm12
00000000000006b2 <main_graph+0x6b2> addps  %xmm0,%xmm12
00000000000006b6 <main_graph+0x6b6> addps  %xmm2,%xmm13
    llvm.store %466, %369 : !llvm.ptr<vector<8xf32>>
00000000000006ba <main_graph+0x6ba> movaps %xmm12,0x20(%rcx)
00000000000006bf <main_graph+0x6bf> movaps %xmm13,0x30(%rcx)
    %467 = llvm.add %386, %6  : i64
    %468 = llvm.add %358, %467  : i64
    %469 = llvm.getelementptr %387[%468] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %470 = llvm.load %469 : !llvm.ptr<f32>
    %471 = llvm.insertelement %470, %391[%18 : i32] : vector<8xf32>
    %472 = llvm.shufflevector %471, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000006c4 <main_graph+0x6c4> movss  -0xff0(%r12,%rdi,4),%xmm2
00000000000006ce <main_graph+0x6ce> shufps $0x0,%xmm2,%xmm2
    %473 = llvm.load %436 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %474 = llvm.load %369 : !llvm.ptr<vector<8xf32>>
    %475 = "llvm.intr.fmuladd"(%472, %473, %474) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000006d2 <main_graph+0x6d2> movaps %xmm2,%xmm0
00000000000006d5 <main_graph+0x6d5> mulps  %xmm11,%xmm0
00000000000006d9 <main_graph+0x6d9> mulps  %xmm8,%xmm2
00000000000006dd <main_graph+0x6dd> addps  %xmm13,%xmm0
00000000000006e1 <main_graph+0x6e1> addps  %xmm12,%xmm2
    llvm.store %475, %369 : !llvm.ptr<vector<8xf32>>
00000000000006e5 <main_graph+0x6e5> movaps %xmm2,0x20(%rcx)
00000000000006e9 <main_graph+0x6e9> movaps %xmm0,0x30(%rcx)
    %476 = llvm.add %386, %26  : i64
    %477 = llvm.add %358, %476  : i64
    %478 = llvm.getelementptr %387[%477] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %479 = llvm.load %478 : !llvm.ptr<f32>
    %480 = llvm.insertelement %479, %391[%18 : i32] : vector<8xf32>
    %481 = llvm.shufflevector %480, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000006ed <main_graph+0x6ed> movss  -0x7fc(%r12,%rdi,4),%xmm12
00000000000006f7 <main_graph+0x6f7> shufps $0x0,%xmm12,%xmm12
    %482 = llvm.load %400 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %483 = llvm.load %376 : !llvm.ptr<vector<8xf32>>
    %484 = "llvm.intr.fmuladd"(%481, %482, %483) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000006fc <main_graph+0x6fc> movaps %xmm12,%xmm13
0000000000000700 <main_graph+0x700> mulps  %xmm4,%xmm13
0000000000000704 <main_graph+0x704> addps  %xmm3,%xmm13
0000000000000708 <main_graph+0x708> mulps  %xmm7,%xmm12
000000000000070c <main_graph+0x70c> addps  %xmm1,%xmm12
    llvm.store %484, %376 : !llvm.ptr<vector<8xf32>>
0000000000000710 <main_graph+0x710> movaps %xmm12,0x40(%rcx)
0000000000000715 <main_graph+0x715> movaps %xmm13,0x50(%rcx)
    %485 = llvm.add %386, %5  : i64
    %486 = llvm.add %358, %485  : i64
    %487 = llvm.getelementptr %387[%486] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %488 = llvm.load %487 : !llvm.ptr<f32>
    %489 = llvm.insertelement %488, %391[%18 : i32] : vector<8xf32>
    %490 = llvm.shufflevector %489, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
000000000000071a <main_graph+0x71a> movss  -0x7f8(%r12,%rdi,4),%xmm1
0000000000000724 <main_graph+0x724> shufps $0x0,%xmm1,%xmm1
    %491 = llvm.load %412 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %492 = llvm.load %376 : !llvm.ptr<vector<8xf32>>
    %493 = "llvm.intr.fmuladd"(%490, %491, %492) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000728 <main_graph+0x728> movaps %xmm1,%xmm3
000000000000072b <main_graph+0x72b> mulps  %xmm9,%xmm3
000000000000072f <main_graph+0x72f> addps  %xmm13,%xmm3
0000000000000733 <main_graph+0x733> mulps  %xmm5,%xmm1
0000000000000736 <main_graph+0x736> addps  %xmm12,%xmm1
    llvm.store %493, %376 : !llvm.ptr<vector<8xf32>>
000000000000073a <main_graph+0x73a> movaps %xmm1,0x40(%rcx)
000000000000073e <main_graph+0x73e> movaps %xmm3,0x50(%rcx)
    %494 = llvm.add %386, %4  : i64
    %495 = llvm.add %358, %494  : i64
    %496 = llvm.getelementptr %387[%495] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %497 = llvm.load %496 : !llvm.ptr<f32>
    %498 = llvm.insertelement %497, %391[%18 : i32] : vector<8xf32>
    %499 = llvm.shufflevector %498, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000742 <main_graph+0x742> movss  -0x7f4(%r12,%rdi,4),%xmm12
000000000000074c <main_graph+0x74c> shufps $0x0,%xmm12,%xmm12
    %500 = llvm.load %424 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %501 = llvm.load %376 : !llvm.ptr<vector<8xf32>>
    %502 = "llvm.intr.fmuladd"(%499, %500, %501) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000751 <main_graph+0x751> movaps %xmm12,%xmm13
0000000000000755 <main_graph+0x755> mulps  %xmm10,%xmm13
0000000000000759 <main_graph+0x759> mulps  %xmm6,%xmm12
000000000000075d <main_graph+0x75d> addps  %xmm1,%xmm12
0000000000000761 <main_graph+0x761> addps  %xmm3,%xmm13
    llvm.store %502, %376 : !llvm.ptr<vector<8xf32>>
0000000000000765 <main_graph+0x765> movaps %xmm12,0x40(%rcx)
000000000000076a <main_graph+0x76a> movaps %xmm13,0x50(%rcx)
    %503 = llvm.add %386, %3  : i64
    %504 = llvm.add %358, %503  : i64
    %505 = llvm.getelementptr %387[%504] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %506 = llvm.load %505 : !llvm.ptr<f32>
    %507 = llvm.insertelement %506, %391[%18 : i32] : vector<8xf32>
    %508 = llvm.shufflevector %507, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
000000000000076f <main_graph+0x76f> movss  -0x7f0(%r12,%rdi,4),%xmm3
0000000000000779 <main_graph+0x779> shufps $0x0,%xmm3,%xmm3
    %509 = llvm.load %436 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %510 = llvm.load %376 : !llvm.ptr<vector<8xf32>>
    %511 = "llvm.intr.fmuladd"(%508, %509, %510) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
000000000000077d <main_graph+0x77d> movaps %xmm3,%xmm1
0000000000000780 <main_graph+0x780> mulps  %xmm11,%xmm1
0000000000000784 <main_graph+0x784> mulps  %xmm8,%xmm3
0000000000000788 <main_graph+0x788> addps  %xmm13,%xmm1
000000000000078c <main_graph+0x78c> addps  %xmm12,%xmm3
    llvm.store %511, %376 : !llvm.ptr<vector<8xf32>>
0000000000000790 <main_graph+0x790> movaps %xmm3,0x40(%rcx)
0000000000000794 <main_graph+0x794> movaps %xmm1,0x50(%rcx)
    %512 = llvm.add %386, %9  : i64
    %513 = llvm.add %358, %512  : i64
    %514 = llvm.getelementptr %387[%513] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %515 = llvm.load %514 : !llvm.ptr<f32>
    %516 = llvm.insertelement %515, %391[%18 : i32] : vector<8xf32>
    %517 = llvm.shufflevector %516, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000798 <main_graph+0x798> movss  0x4(%r12,%rdi,4),%xmm12
000000000000079f <main_graph+0x79f> shufps $0x0,%xmm12,%xmm12
    %518 = llvm.load %400 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %519 = llvm.load %383 : !llvm.ptr<vector<8xf32>>
    %520 = "llvm.intr.fmuladd"(%517, %518, %519) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000007a4 <main_graph+0x7a4> mulps  %xmm12,%xmm4
00000000000007a8 <main_graph+0x7a8> addps  0x70(%rcx),%xmm4
00000000000007ac <main_graph+0x7ac> mulps  %xmm7,%xmm12
00000000000007b0 <main_graph+0x7b0> addps  0x60(%rcx),%xmm12
    llvm.store %520, %383 : !llvm.ptr<vector<8xf32>>
00000000000007b5 <main_graph+0x7b5> movaps %xmm12,0x60(%rcx)
00000000000007ba <main_graph+0x7ba> movaps %xmm4,0x70(%rcx)
    %521 = llvm.add %386, %2  : i64
    %522 = llvm.add %358, %521  : i64
    %523 = llvm.getelementptr %387[%522] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %524 = llvm.load %523 : !llvm.ptr<f32>
    %525 = llvm.insertelement %524, %391[%18 : i32] : vector<8xf32>
    %526 = llvm.shufflevector %525, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000007be <main_graph+0x7be> movss  0x8(%r12,%rdi,4),%xmm7
00000000000007c5 <main_graph+0x7c5> shufps $0x0,%xmm7,%xmm7
    %527 = llvm.load %412 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %528 = llvm.load %383 : !llvm.ptr<vector<8xf32>>
    %529 = "llvm.intr.fmuladd"(%526, %527, %528) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000007c9 <main_graph+0x7c9> mulps  %xmm7,%xmm5
00000000000007cc <main_graph+0x7cc> addps  %xmm12,%xmm5
00000000000007d0 <main_graph+0x7d0> mulps  %xmm9,%xmm7
00000000000007d4 <main_graph+0x7d4> addps  %xmm4,%xmm7
    llvm.store %529, %383 : !llvm.ptr<vector<8xf32>>
00000000000007d7 <main_graph+0x7d7> movaps %xmm7,0x70(%rcx)
00000000000007db <main_graph+0x7db> movaps %xmm5,0x60(%rcx)
    %530 = llvm.add %386, %1  : i64
    %531 = llvm.add %358, %530  : i64
    %532 = llvm.getelementptr %387[%531] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %533 = llvm.load %532 : !llvm.ptr<f32>
    %534 = llvm.insertelement %533, %391[%18 : i32] : vector<8xf32>
    %535 = llvm.shufflevector %534, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000007df <main_graph+0x7df> movss  0xc(%r12,%rdi,4),%xmm4
00000000000007e6 <main_graph+0x7e6> shufps $0x0,%xmm4,%xmm4
    %536 = llvm.load %424 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %537 = llvm.load %383 : !llvm.ptr<vector<8xf32>>
    %538 = "llvm.intr.fmuladd"(%535, %536, %537) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000007ea <main_graph+0x7ea> mulps  %xmm4,%xmm6
00000000000007ed <main_graph+0x7ed> addps  %xmm5,%xmm6
00000000000007f0 <main_graph+0x7f0> mulps  %xmm10,%xmm4
00000000000007f4 <main_graph+0x7f4> addps  %xmm7,%xmm4
    llvm.store %538, %383 : !llvm.ptr<vector<8xf32>>
00000000000007f7 <main_graph+0x7f7> movaps %xmm4,0x70(%rcx)
00000000000007fb <main_graph+0x7fb> movaps %xmm6,0x60(%rcx)
    %539 = llvm.add %386, %0  : i64
    %540 = llvm.add %358, %539  : i64
    %541 = llvm.getelementptr %387[%540] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %542 = llvm.load %541 : !llvm.ptr<f32>
    %543 = llvm.insertelement %542, %391[%18 : i32] : vector<8xf32>
    %544 = llvm.shufflevector %543, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000007ff <main_graph+0x7ff> movss  0x10(%r12,%rdi,4),%xmm5
0000000000000806 <main_graph+0x806> shufps $0x0,%xmm5,%xmm5
    %545 = llvm.load %436 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
    %546 = llvm.load %383 : !llvm.ptr<vector<8xf32>>
    %547 = "llvm.intr.fmuladd"(%544, %545, %546) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
000000000000080a <main_graph+0x80a> mulps  %xmm5,%xmm8
000000000000080e <main_graph+0x80e> addps  %xmm6,%xmm8
0000000000000812 <main_graph+0x812> mulps  %xmm11,%xmm5
0000000000000816 <main_graph+0x816> addps  %xmm4,%xmm5
    llvm.store %547, %383 : !llvm.ptr<vector<8xf32>>
0000000000000819 <main_graph+0x819> movaps %xmm5,0x70(%rcx)
000000000000081d <main_graph+0x81d> movaps %xmm8,0x60(%rcx)
    %393 = llvm.shufflevector %392, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000822 <main_graph+0x822> movss  -0x17ec(%r12,%rdi,4),%xmm6
    %401 = llvm.load %400 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
000000000000082c <main_graph+0x82c> movups -0x1800(%r9),%xmm8
    %393 = llvm.shufflevector %392, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000834 <main_graph+0x834> shufps $0x0,%xmm6,%xmm6
    %401 = llvm.load %400 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000838 <main_graph+0x838> movups -0x17f0(%r9),%xmm4
    %403 = "llvm.intr.fmuladd"(%393, %401, %402) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000840 <main_graph+0x840> movaps %xmm6,%xmm7
0000000000000843 <main_graph+0x843> mulps  %xmm8,%xmm6
0000000000000847 <main_graph+0x847> mulps  %xmm4,%xmm7
000000000000084a <main_graph+0x84a> addps  (%rcx),%xmm6
000000000000084d <main_graph+0x84d> addps  0x10(%rcx),%xmm7
    llvm.store %403, %356 : !llvm.ptr<vector<8xf32>>
0000000000000851 <main_graph+0x851> movaps %xmm6,(%rcx)
0000000000000854 <main_graph+0x854> movaps %xmm7,0x10(%rcx)
    %409 = llvm.shufflevector %408, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000858 <main_graph+0x858> movss  -0x17e8(%r12,%rdi,4),%xmm11
0000000000000862 <main_graph+0x862> shufps $0x0,%xmm11,%xmm11
    %413 = llvm.load %412 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000867 <main_graph+0x867> movups -0x1000(%r9),%xmm5
000000000000086f <main_graph+0x86f> movups -0xff0(%r9),%xmm9
    %415 = "llvm.intr.fmuladd"(%409, %413, %414) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000877 <main_graph+0x877> movaps %xmm11,%xmm12
000000000000087b <main_graph+0x87b> mulps  %xmm5,%xmm12
000000000000087f <main_graph+0x87f> addps  %xmm6,%xmm12
0000000000000883 <main_graph+0x883> mulps  %xmm9,%xmm11
0000000000000887 <main_graph+0x887> addps  %xmm7,%xmm11
    llvm.store %415, %356 : !llvm.ptr<vector<8xf32>>
000000000000088b <main_graph+0x88b> movaps %xmm11,0x10(%rcx)
0000000000000890 <main_graph+0x890> movaps %xmm12,(%rcx)
    %421 = llvm.shufflevector %420, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000894 <main_graph+0x894> movss  -0x17e4(%r12,%rdi,4),%xmm13
    %425 = llvm.load %424 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
000000000000089e <main_graph+0x89e> movups -0x800(%r9),%xmm6
    %421 = llvm.shufflevector %420, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000008a6 <main_graph+0x8a6> shufps $0x0,%xmm13,%xmm13
    %425 = llvm.load %424 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
00000000000008ab <main_graph+0x8ab> movups -0x7f0(%r9),%xmm10
    %427 = "llvm.intr.fmuladd"(%421, %425, %426) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000008b3 <main_graph+0x8b3> movaps %xmm13,%xmm14
00000000000008b7 <main_graph+0x8b7> mulps  %xmm6,%xmm14
00000000000008bb <main_graph+0x8bb> addps  %xmm12,%xmm14
00000000000008bf <main_graph+0x8bf> mulps  %xmm10,%xmm13
00000000000008c3 <main_graph+0x8c3> addps  %xmm11,%xmm13
    llvm.store %427, %356 : !llvm.ptr<vector<8xf32>>
00000000000008c7 <main_graph+0x8c7> movaps %xmm13,0x10(%rcx)
00000000000008cc <main_graph+0x8cc> movaps %xmm14,(%rcx)
    %433 = llvm.shufflevector %432, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000008d0 <main_graph+0x8d0> movss  -0x17e0(%r12,%rdi,4),%xmm12
    %437 = llvm.load %436 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
00000000000008da <main_graph+0x8da> movups (%r9),%xmm7
00000000000008de <main_graph+0x8de> movups 0x10(%r9),%xmm11
    %433 = llvm.shufflevector %432, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000008e3 <main_graph+0x8e3> shufps $0x0,%xmm12,%xmm12
    %439 = "llvm.intr.fmuladd"(%433, %437, %438) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000008e8 <main_graph+0x8e8> movaps %xmm12,%xmm15
00000000000008ec <main_graph+0x8ec> mulps  %xmm7,%xmm15
00000000000008f0 <main_graph+0x8f0> mulps  %xmm11,%xmm12
00000000000008f4 <main_graph+0x8f4> addps  %xmm14,%xmm15
00000000000008f8 <main_graph+0x8f8> addps  %xmm13,%xmm12
    llvm.store %439, %356 : !llvm.ptr<vector<8xf32>>
00000000000008fc <main_graph+0x8fc> movaps %xmm12,0x10(%rcx)
0000000000000901 <main_graph+0x901> movaps %xmm15,(%rcx)
    %445 = llvm.shufflevector %444, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000905 <main_graph+0x905> movss  -0xfec(%r12,%rdi,4),%xmm12
000000000000090f <main_graph+0x90f> shufps $0x0,%xmm12,%xmm12
    %448 = "llvm.intr.fmuladd"(%445, %446, %447) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000914 <main_graph+0x914> movaps %xmm12,%xmm13
0000000000000918 <main_graph+0x918> mulps  %xmm8,%xmm13
000000000000091c <main_graph+0x91c> addps  %xmm2,%xmm13
0000000000000920 <main_graph+0x920> mulps  %xmm4,%xmm12
0000000000000924 <main_graph+0x924> addps  %xmm0,%xmm12
    llvm.store %448, %369 : !llvm.ptr<vector<8xf32>>
0000000000000928 <main_graph+0x928> movaps %xmm12,0x30(%rcx)
000000000000092d <main_graph+0x92d> movaps %xmm13,0x20(%rcx)
    %454 = llvm.shufflevector %453, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000932 <main_graph+0x932> movss  -0xfe8(%r12,%rdi,4),%xmm0
000000000000093c <main_graph+0x93c> shufps $0x0,%xmm0,%xmm0
    %457 = "llvm.intr.fmuladd"(%454, %455, %456) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000940 <main_graph+0x940> movaps %xmm0,%xmm2
0000000000000943 <main_graph+0x943> mulps  %xmm5,%xmm2
0000000000000946 <main_graph+0x946> addps  %xmm13,%xmm2
000000000000094a <main_graph+0x94a> mulps  %xmm9,%xmm0
000000000000094e <main_graph+0x94e> addps  %xmm12,%xmm0
    llvm.store %457, %369 : !llvm.ptr<vector<8xf32>>
0000000000000952 <main_graph+0x952> movaps %xmm0,0x30(%rcx)
0000000000000956 <main_graph+0x956> movaps %xmm2,0x20(%rcx)
    %463 = llvm.shufflevector %462, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
000000000000095a <main_graph+0x95a> movss  -0xfe4(%r12,%rdi,4),%xmm12
0000000000000964 <main_graph+0x964> shufps $0x0,%xmm12,%xmm12
    %466 = "llvm.intr.fmuladd"(%463, %464, %465) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000969 <main_graph+0x969> movaps %xmm12,%xmm13
000000000000096d <main_graph+0x96d> mulps  %xmm6,%xmm13
0000000000000971 <main_graph+0x971> mulps  %xmm10,%xmm12
0000000000000975 <main_graph+0x975> addps  %xmm0,%xmm12
0000000000000979 <main_graph+0x979> addps  %xmm2,%xmm13
    llvm.store %466, %369 : !llvm.ptr<vector<8xf32>>
000000000000097d <main_graph+0x97d> movaps %xmm12,0x30(%rcx)
0000000000000982 <main_graph+0x982> movaps %xmm13,0x20(%rcx)
    %472 = llvm.shufflevector %471, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000987 <main_graph+0x987> movss  -0xfe0(%r12,%rdi,4),%xmm0
0000000000000991 <main_graph+0x991> shufps $0x0,%xmm0,%xmm0
    %475 = "llvm.intr.fmuladd"(%472, %473, %474) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000995 <main_graph+0x995> movaps %xmm0,%xmm2
0000000000000998 <main_graph+0x998> mulps  %xmm7,%xmm2
000000000000099b <main_graph+0x99b> mulps  %xmm11,%xmm0
000000000000099f <main_graph+0x99f> addps  %xmm13,%xmm2
00000000000009a3 <main_graph+0x9a3> addps  %xmm12,%xmm0
    llvm.store %475, %369 : !llvm.ptr<vector<8xf32>>
00000000000009a7 <main_graph+0x9a7> movaps %xmm0,0x30(%rcx)
00000000000009ab <main_graph+0x9ab> movaps %xmm2,0x20(%rcx)
    %481 = llvm.shufflevector %480, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000009af <main_graph+0x9af> movss  -0x7ec(%r12,%rdi,4),%xmm12
00000000000009b9 <main_graph+0x9b9> shufps $0x0,%xmm12,%xmm12
    %484 = "llvm.intr.fmuladd"(%481, %482, %483) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000009be <main_graph+0x9be> movaps %xmm12,%xmm13
00000000000009c2 <main_graph+0x9c2> mulps  %xmm8,%xmm13
00000000000009c6 <main_graph+0x9c6> addps  %xmm3,%xmm13
00000000000009ca <main_graph+0x9ca> mulps  %xmm4,%xmm12
00000000000009ce <main_graph+0x9ce> addps  %xmm1,%xmm12
    llvm.store %484, %376 : !llvm.ptr<vector<8xf32>>
00000000000009d2 <main_graph+0x9d2> movaps %xmm12,0x50(%rcx)
00000000000009d7 <main_graph+0x9d7> movaps %xmm13,0x40(%rcx)
    %490 = llvm.shufflevector %489, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
00000000000009dc <main_graph+0x9dc> movss  -0x7e8(%r12,%rdi,4),%xmm1
00000000000009e6 <main_graph+0x9e6> shufps $0x0,%xmm1,%xmm1
    %493 = "llvm.intr.fmuladd"(%490, %491, %492) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
00000000000009ea <main_graph+0x9ea> movaps %xmm1,%xmm3
00000000000009ed <main_graph+0x9ed> mulps  %xmm5,%xmm3
00000000000009f0 <main_graph+0x9f0> addps  %xmm13,%xmm3
00000000000009f4 <main_graph+0x9f4> mulps  %xmm9,%xmm1
00000000000009f8 <main_graph+0x9f8> addps  %xmm12,%xmm1
    llvm.store %493, %376 : !llvm.ptr<vector<8xf32>>
00000000000009fc <main_graph+0x9fc> movaps %xmm1,0x50(%rcx)
0000000000000a00 <main_graph+0xa00> movaps %xmm3,0x40(%rcx)
    %499 = llvm.shufflevector %498, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000a04 <main_graph+0xa04> movss  -0x7e4(%r12,%rdi,4),%xmm12
0000000000000a0e <main_graph+0xa0e> shufps $0x0,%xmm12,%xmm12
    %502 = "llvm.intr.fmuladd"(%499, %500, %501) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000a13 <main_graph+0xa13> movaps %xmm12,%xmm13
0000000000000a17 <main_graph+0xa17> mulps  %xmm6,%xmm13
0000000000000a1b <main_graph+0xa1b> mulps  %xmm10,%xmm12
0000000000000a1f <main_graph+0xa1f> addps  %xmm1,%xmm12
0000000000000a23 <main_graph+0xa23> addps  %xmm3,%xmm13
    llvm.store %502, %376 : !llvm.ptr<vector<8xf32>>
0000000000000a27 <main_graph+0xa27> movaps %xmm12,0x50(%rcx)
0000000000000a2c <main_graph+0xa2c> movaps %xmm13,0x40(%rcx)
    %508 = llvm.shufflevector %507, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000a31 <main_graph+0xa31> movss  -0x7e0(%r12,%rdi,4),%xmm1
0000000000000a3b <main_graph+0xa3b> shufps $0x0,%xmm1,%xmm1
    %511 = "llvm.intr.fmuladd"(%508, %509, %510) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000a3f <main_graph+0xa3f> movaps %xmm1,%xmm3
0000000000000a42 <main_graph+0xa42> mulps  %xmm7,%xmm3
0000000000000a45 <main_graph+0xa45> mulps  %xmm11,%xmm1
0000000000000a49 <main_graph+0xa49> addps  %xmm13,%xmm3
0000000000000a4d <main_graph+0xa4d> addps  %xmm12,%xmm1
    llvm.store %511, %376 : !llvm.ptr<vector<8xf32>>
0000000000000a51 <main_graph+0xa51> movaps %xmm1,0x50(%rcx)
0000000000000a55 <main_graph+0xa55> movaps %xmm3,0x40(%rcx)
    %517 = llvm.shufflevector %516, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000a59 <main_graph+0xa59> movss  0x14(%r12,%rdi,4),%xmm12
0000000000000a60 <main_graph+0xa60> shufps $0x0,%xmm12,%xmm12
    %520 = "llvm.intr.fmuladd"(%517, %518, %519) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000a65 <main_graph+0xa65> mulps  %xmm12,%xmm4
0000000000000a69 <main_graph+0xa69> addps  0x70(%rcx),%xmm4
0000000000000a6d <main_graph+0xa6d> mulps  %xmm8,%xmm12
0000000000000a71 <main_graph+0xa71> addps  0x60(%rcx),%xmm12
    llvm.store %520, %383 : !llvm.ptr<vector<8xf32>>
0000000000000a76 <main_graph+0xa76> movaps %xmm12,0x60(%rcx)
0000000000000a7b <main_graph+0xa7b> movaps %xmm4,0x70(%rcx)
    %526 = llvm.shufflevector %525, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000a7f <main_graph+0xa7f> movss  0x18(%r12,%rdi,4),%xmm8
0000000000000a86 <main_graph+0xa86> shufps $0x0,%xmm8,%xmm8
    %529 = "llvm.intr.fmuladd"(%526, %527, %528) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000a8b <main_graph+0xa8b> mulps  %xmm8,%xmm5
0000000000000a8f <main_graph+0xa8f> mulps  %xmm9,%xmm8
0000000000000a93 <main_graph+0xa93> addps  %xmm12,%xmm5
0000000000000a97 <main_graph+0xa97> addps  %xmm4,%xmm8
    llvm.store %529, %383 : !llvm.ptr<vector<8xf32>>
0000000000000a9b <main_graph+0xa9b> movaps %xmm8,0x70(%rcx)
0000000000000aa0 <main_graph+0xaa0> movaps %xmm5,0x60(%rcx)
    %535 = llvm.shufflevector %534, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000aa4 <main_graph+0xaa4> movss  0x1c(%r12,%rdi,4),%xmm4
0000000000000aab <main_graph+0xaab> shufps $0x0,%xmm4,%xmm4
    %538 = "llvm.intr.fmuladd"(%535, %536, %537) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000aaf <main_graph+0xaaf> mulps  %xmm4,%xmm6
0000000000000ab2 <main_graph+0xab2> mulps  %xmm10,%xmm4
0000000000000ab6 <main_graph+0xab6> addps  %xmm5,%xmm6
0000000000000ab9 <main_graph+0xab9> addps  %xmm8,%xmm4
    llvm.store %538, %383 : !llvm.ptr<vector<8xf32>>
0000000000000abd <main_graph+0xabd> movaps %xmm4,0x70(%rcx)
0000000000000ac1 <main_graph+0xac1> movaps %xmm6,0x60(%rcx)
    %544 = llvm.shufflevector %543, %391 [0, 0, 0, 0, 0, 0, 0, 0] : vector<8xf32> 
0000000000000ac5 <main_graph+0xac5> movss  0x20(%r12,%rdi,4),%xmm5
0000000000000acc <main_graph+0xacc> shufps $0x0,%xmm5,%xmm5
    %547 = "llvm.intr.fmuladd"(%544, %545, %546) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>
0000000000000ad0 <main_graph+0xad0> mulps  %xmm5,%xmm7
0000000000000ad3 <main_graph+0xad3> mulps  %xmm11,%xmm5
0000000000000ad7 <main_graph+0xad7> addps  %xmm6,%xmm7
0000000000000ada <main_graph+0xada> addps  %xmm4,%xmm5
    llvm.store %547, %383 : !llvm.ptr<vector<8xf32>>
0000000000000add <main_graph+0xadd> movaps %xmm5,0x70(%rcx)
0000000000000ae1 <main_graph+0xae1> movaps %xmm7,0x60(%rcx)
    %548 = llvm.add %384, %30  : i64
    llvm.br ^bb18(%548 : i64)
  ^bb20:  // pred: ^bb18
    %549 = llvm.load %356 : !llvm.ptr<vector<8xf32>>
0000000000000ae5 <main_graph+0xae5> movaps (%rcx),%xmm4
0000000000000ae8 <main_graph+0xae8> movaps 0x10(%rcx),%xmm6
    %550 = llvm.mul %348, %39  : i64
    %551 = llvm.add %550, %349  : i64
    %552 = llvm.getelementptr %160[%551] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %553 = llvm.bitcast %552 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    llvm.store %549, %553 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000aec <main_graph+0xaec> movaps %xmm6,0x10(%r14,%r15,4)
0000000000000af2 <main_graph+0xaf2> movaps %xmm4,(%r14,%r15,4)
    %554 = llvm.load %369 : !llvm.ptr<vector<8xf32>>
    %555 = llvm.mul %363, %39  : i64
    %556 = llvm.add %555, %349  : i64
    %557 = llvm.getelementptr %160[%556] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %558 = llvm.bitcast %557 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    llvm.store %554, %558 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000af7 <main_graph+0xaf7> movaps %xmm0,0x10(%r14,%rax,4)
0000000000000afd <main_graph+0xafd> movaps %xmm2,(%r14,%rax,4)
    %559 = llvm.load %376 : !llvm.ptr<vector<8xf32>>
    %560 = llvm.mul %370, %39  : i64
    %561 = llvm.add %560, %349  : i64
    %562 = llvm.getelementptr %160[%561] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %563 = llvm.bitcast %562 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    llvm.store %559, %563 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000b02 <main_graph+0xb02> movaps %xmm1,0x10(%r14,%rdx,4)
0000000000000b08 <main_graph+0xb08> movaps %xmm3,(%r14,%rdx,4)
    %564 = llvm.load %383 : !llvm.ptr<vector<8xf32>>
    %565 = llvm.mul %377, %39  : i64
    %566 = llvm.add %565, %349  : i64
    %567 = llvm.getelementptr %160[%566] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %568 = llvm.bitcast %567 : !llvm.ptr<f32> to !llvm.ptr<vector<8xf32>>
    llvm.store %564, %568 {alignment = 4 : i64} : !llvm.ptr<vector<8xf32>>
0000000000000b0d <main_graph+0xb0d> movaps %xmm5,0x10(%r14,%rsi,4)
0000000000000b13 <main_graph+0xb13> movaps %xmm7,(%r14,%rsi,4)
    %352 = llvm.icmp "slt" %351, %39 : i64
0000000000000b18 <main_graph+0xb18> add    $0x8,%rdi
0000000000000b1c <main_graph+0xb1c> add    $0x4000,%r9
0000000000000b23 <main_graph+0xb23> cmp    $0x1f8,%rdi
    llvm.cond_br %352, ^bb17, ^bb21
0000000000000b2a <main_graph+0xb2a> jb     00000000000004e0 <main_graph+0x4e0>
    %569 = llvm.add %351, %10  : i64
    llvm.br ^bb16(%569 : i64)
  ^bb21:  // pred: ^bb16
    %570 = llvm.add %349, %10  : i64
0000000000000b30 <main_graph+0xb30> lea    0x8(%r10),%rax
    llvm.cond_br %350, ^bb15, ^bb22
0000000000000b34 <main_graph+0xb34> add    $0x20,%r8
    %350 = llvm.icmp "slt" %349, %39 : i64
0000000000000b38 <main_graph+0xb38> cmp    $0x1f8,%r10
0000000000000b3f <main_graph+0xb3f> mov    %rax,%r10
    llvm.cond_br %350, ^bb15, ^bb22
0000000000000b42 <main_graph+0xb42> jb     00000000000004a0 <main_graph+0x4a0>
0000000000000b48 <main_graph+0xb48> mov    0xd8(%rbx),%rcx
    llvm.br ^bb14(%570 : i64)
  ^bb22:  // pred: ^bb14
    %571 = llvm.add %345, %34  : i64
0000000000000b4f <main_graph+0xb4f> inc    %rcx
    llvm.cond_br %346, ^bb13, ^bb23
0000000000000b52 <main_graph+0xb52> add    $0x2000,%r12
    %346 = llvm.icmp "slt" %345, %14 : i64
0000000000000b59 <main_graph+0xb59> cmp    $0x100,%rcx
    llvm.cond_br %346, ^bb13, ^bb23
0000000000000b60 <main_graph+0xb60> jne    0000000000000440 <main_graph+0x440>
0000000000000b66 <main_graph+0xb66> mov    0xb8(%rbx),%rcx
    llvm.br ^bb12(%571 : i64)
  ^bb23:  // pred: ^bb12
    %572 = llvm.add %300, %26  : i64
0000000000000b6d <main_graph+0xb6d> lea    0x400(%rcx),%r15
0000000000000b74 <main_graph+0xb74> mov    0xd0(%rbx),%r13
    %314 = llvm.icmp "slt" %300, %38 : i64
0000000000000b7b <main_graph+0xb7b> cmp    $0xf800,%rcx
    llvm.cond_br %314, ^bb11, ^bb24
0000000000000b82 <main_graph+0xb82> jb     0000000000000330 <main_graph+0x330>
0000000000000b88 <main_graph+0xb88> mov    0xc8(%rbx),%rax
0000000000000b8f <main_graph+0xb8f> mov    0x30(%rbx),%rcx
    llvm.br ^bb10(%572, %301, %305, %306, %307, %308, %309, %310, %311, %312, %313, %324, %340, %330 : i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<1 x i64>, array<1 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64)
  ^bb24:  // pred: ^bb10
    llvm.return %59 : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>
0000000000000b93 <main_graph+0xb93> mov    %rcx,0x8(%rax)
0000000000000b97 <main_graph+0xb97> mov    0xc0(%rbx),%rcx
0000000000000b9e <main_graph+0xb9e> mov    %rcx,(%rax)
0000000000000ba1 <main_graph+0xba1> movq   $0x1,0x30(%rax)
0000000000000ba9 <main_graph+0xba9> movq   $0x200,0x28(%rax)
0000000000000bb1 <main_graph+0xbb1> movq   $0x200,0x20(%rax)
0000000000000bb9 <main_graph+0xbb9> movq   $0xfc00,0x18(%rax)
0000000000000bc1 <main_graph+0xbc1> movq   $0x0,0x10(%rax)
0000000000000bc9 <main_graph+0xbc9> lea    -0x28(%rbp),%rsp
0000000000000bcd <main_graph+0xbcd> pop    %rbx
0000000000000bce <main_graph+0xbce> pop    %r12
0000000000000bd0 <main_graph+0xbd0> pop    %r13
0000000000000bd2 <main_graph+0xbd2> pop    %r14
0000000000000bd4 <main_graph+0xbd4> pop    %r15
0000000000000bd6 <main_graph+0xbd6> pop    %rbp
0000000000000bd7 <main_graph+0xbd7> retq   
0000000000000bd8 <main_graph+0xbd8> nopl   0x0(%rax,%rax,1)
  }
  llvm.func @_mlir_ciface_main_graph(%arg0: !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>, %arg1: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, %arg2: !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) attributes {access_mem_catcher = [["ref0", 0], ["ref1", 1]], input_names = ["X1", "X2"], llvm.emit_c_interface, output_names = ["Y"]} {
0000000000000be0 <_mlir_ciface_main_graph> push   %rbx
0000000000000be1 <_mlir_ciface_main_graph+0x1> sub    $0x80,%rsp
0000000000000be8 <_mlir_ciface_main_graph+0x8> mov    %rdi,%rbx
0000000000000beb <_mlir_ciface_main_graph+0xb> movaps 0x90(%rsp),%xmm0
0000000000000bf3 <_mlir_ciface_main_graph+0x13> movaps 0xa0(%rsp),%xmm1
0000000000000bfb <_mlir_ciface_main_graph+0x1b> movaps 0xb0(%rsp),%xmm2
0000000000000c03 <_mlir_ciface_main_graph+0x23> movaps 0xc0(%rsp),%xmm3
0000000000000c0b <_mlir_ciface_main_graph+0x2b> mov    0xd0(%rsp),%rax
    %0 = llvm.call @main_graph(%arg1, %arg2) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>
0000000000000c13 <_mlir_ciface_main_graph+0x33> mov    %rax,0x40(%rsp)
0000000000000c18 <_mlir_ciface_main_graph+0x38> movups %xmm3,0x30(%rsp)
0000000000000c1d <_mlir_ciface_main_graph+0x3d> movups %xmm2,0x20(%rsp)
0000000000000c22 <_mlir_ciface_main_graph+0x42> movups %xmm1,0x10(%rsp)
0000000000000c27 <_mlir_ciface_main_graph+0x47> movups %xmm0,(%rsp)
0000000000000c2b <_mlir_ciface_main_graph+0x4b> lea    0x48(%rsp),%rdi
0000000000000c30 <_mlir_ciface_main_graph+0x50> callq  0000000000000c35 <_mlir_ciface_main_graph+0x55>
0000000000000c35 <_mlir_ciface_main_graph+0x55> mov    0x78(%rsp),%rax
0000000000000c3a <_mlir_ciface_main_graph+0x5a> movups 0x48(%rsp),%xmm0
0000000000000c3f <_mlir_ciface_main_graph+0x5f> movups 0x58(%rsp),%xmm1
0000000000000c44 <_mlir_ciface_main_graph+0x64> movups 0x68(%rsp),%xmm2
    llvm.store %0, %arg0 : !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>
0000000000000c49 <_mlir_ciface_main_graph+0x69> movups %xmm0,(%rbx)
0000000000000c4c <_mlir_ciface_main_graph+0x6c> movups %xmm1,0x10(%rbx)
0000000000000c50 <_mlir_ciface_main_graph+0x70> movups %xmm2,0x20(%rbx)
0000000000000c54 <_mlir_ciface_main_graph+0x74> mov    %rax,0x30(%rbx)
    llvm.return
0000000000000c58 <_mlir_ciface_main_graph+0x78> add    $0x80,%rsp
0000000000000c5f <_mlir_ciface_main_graph+0x7f> pop    %rbx
0000000000000c60 <_mlir_ciface_main_graph+0x80> retq   
