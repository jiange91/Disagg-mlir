
//===-------------------------------------------===//
Legalizing operation : 'builtin.module'(0x389f7a0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.global'(0x3849a80) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x389f740) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'func.func'(0x38a4d10)
    ** Erase   : 'func.func'(0x389f740)

    //===-------------------------------------------===//
    Legalizing operation : 'func.func'(0x38a4d10) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x3861c70) {
  %2 = "arith.constant"() {value = 2 : i8} : () -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x38801c0) {
  %3 = "arith.constant"() {value = 8192 : i32} : () -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x3881770) {
  %4 = "arith.constant"() {value = 4 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x3884210) {
  %5 = "arith.constant"() {value = 0.000000e+00 : f32} : () -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x38857c0) {
  %6 = "arith.constant"() {value = 0 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x3886d70) {
  %7 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %6) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x389f650) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x382a310) {
  %9 = "arith.addi"(%arg3, %4) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x382a420) {
  %10 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %9) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x382ac60) {
  %11 = "rmem.affine.paddr"(%7, <<UNKNOWN SSA VALUE>>, %arg3) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<2, memref<64512x512xf32>>, index) -> memref<4x512xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x382ad90) {
  %12 = "arith.addi"(%7, %3) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x387be90) {
  %13 = "arith.extsi"(%12) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x3886f10) {
  %14 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x3897fd0) {
  %15 = "llvm.getelementptr"(%14) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x389aaa0) {
  %16 = "llvm.getelementptr"(%15, %13) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x389d590) {
  %17 = "llvm.getelementptr"(%16) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x389d680) {
  %18 = "llvm.load"(%17) : (!llvm.ptr<i8>) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x389d770) {
  %19 = "arith.ori"(%18, %2) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x3861890) {
  "llvm.store"(%19, %17) : (i8, !llvm.ptr<i8>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x388ae90) {
  "rmem.poll"(%7) {cache_id = 2 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x389efc0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x3827e30) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x37fdfb0) {
  "affine.store"(%5, %11, %arg5, %arg6) {map = affine_map<(d0, d1) -> (d0, d1)>} : (f32, memref<4x512xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x389f5e0) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x389ef60) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x387a8a0) {
  "affine.yield"(%10) : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x389f6e0) {
  "func.return"() : () -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//
** Insert  : 'builtin.unrealized_conversion_cast'(0x38b3750)
2 caches read

//===-------------------------------------------===//
Legalizing operation : 'builtin.module'(0x389f7a0) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.global'(0x3849a80) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x38a4d10) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'llvm.func'(0x389d700)
    ** Insert  : 'llvm.func'(0x3885810)
    ** Insert  : 'llvm.load'(0x38afb20)
    ** Insert  : 'llvm.extractvalue'(0x38af680)
    ** Insert  : 'llvm.extractvalue'(0x38d5aa0)
    ** Insert  : 'llvm.extractvalue'(0x38d5b30)
    ** Insert  : 'llvm.extractvalue'(0x38e0e70)
    ** Insert  : 'llvm.extractvalue'(0x38e0f00)
    ** Insert  : 'llvm.extractvalue'(0x38e2480)
    ** Insert  : 'llvm.extractvalue'(0x38e2510)
    ** Insert  : 'llvm.load'(0x38e25a0)
    ** Insert  : 'llvm.extractvalue'(0x38e26c0)
    ** Insert  : 'llvm.extractvalue'(0x38e2750)
    ** Insert  : 'llvm.extractvalue'(0x38e27e0)
    ** Insert  : 'llvm.extractvalue'(0x38e2950)
    ** Insert  : 'llvm.extractvalue'(0x38e29e0)
    ** Insert  : 'llvm.extractvalue'(0x38e2a70)
    ** Insert  : 'llvm.extractvalue'(0x38e2b00)
    ** Insert  : 'llvm.load'(0x38e2b90)
    ** Insert  : 'llvm.extractvalue'(0x38e2630)
    ** Insert  : 'llvm.extractvalue'(0x38e2d40)
    ** Insert  : 'llvm.extractvalue'(0x38e2dd0)
    ** Insert  : 'llvm.extractvalue'(0x38e2e60)
    ** Insert  : 'llvm.extractvalue'(0x38e2ef0)
    ** Insert  : 'llvm.extractvalue'(0x38e2f80)
    ** Insert  : 'llvm.extractvalue'(0x38e3010)
    ** Insert  : 'llvm.call'(0x38e4990)
    ** Insert  : 'llvm.return'(0x3880210)
    ** Erase   : 'func.func'(0x38a4d10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x389d700) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x3885810) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x38afb20) {
      %0 = "llvm.load"(%arg0) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38af680) {
      %1 = "llvm.extractvalue"(%0) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38d5aa0) {
      %2 = "llvm.extractvalue"(%0) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38d5b30) {
      %3 = "llvm.extractvalue"(%0) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e0e70) {
      %4 = "llvm.extractvalue"(%0) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e0f00) {
      %5 = "llvm.extractvalue"(%0) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2480) {
      %6 = "llvm.extractvalue"(%0) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2510) {
      %7 = "llvm.extractvalue"(%0) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x38e25a0) {
      %8 = "llvm.load"(%arg1) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e26c0) {
      %9 = "llvm.extractvalue"(%8) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2750) {
      %10 = "llvm.extractvalue"(%8) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e27e0) {
      %11 = "llvm.extractvalue"(%8) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2950) {
      %12 = "llvm.extractvalue"(%8) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e29e0) {
      %13 = "llvm.extractvalue"(%8) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2a70) {
      %14 = "llvm.extractvalue"(%8) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2b00) {
      %15 = "llvm.extractvalue"(%8) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x38e2b90) {
      %16 = "llvm.load"(%arg2) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2630) {
      %17 = "llvm.extractvalue"(%16) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2d40) {
      %18 = "llvm.extractvalue"(%16) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2dd0) {
      %19 = "llvm.extractvalue"(%16) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2e60) {
      %20 = "llvm.extractvalue"(%16) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2ef0) {
      %21 = "llvm.extractvalue"(%16) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e2f80) {
      %22 = "llvm.extractvalue"(%16) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38e3010) {
      %23 = "llvm.extractvalue"(%16) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x38e4990) {
      "llvm.call"(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15, %17, %18, %19, %20, %21, %22, %23) {callee = @main_graph, fastmathFlags = #llvm.fastmath<none>} : (!llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x3880210) {
      "llvm.return"() : () -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x38b3750) {
  %3 = "builtin.unrealized_conversion_cast"(<<UNKNOWN SSA VALUE>>) {lower_arg_mat = true} : (memref<64512x512xf32>) -> !rmem.rmref<2, memref<64512x512xf32>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x3861c70) {
  %4 = "arith.constant"() {value = 2 : i8} : () -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x387ec70)
    ** Replace : 'arith.constant'(0x3861c70)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x387ec70) {
      %4 = "llvm.mlir.constant"() {value = 2 : i8} : () -> i8

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x38801c0) {
  %6 = "arith.constant"() {value = 8192 : i32} : () -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x38817d0)
    ** Replace : 'arith.constant'(0x38801c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38817d0) {
      %6 = "llvm.mlir.constant"() {value = 8192 : i32} : () -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x3881770) {
  %8 = "arith.constant"() {value = 4 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x38ea7d0)
    ** Replace : 'arith.constant'(0x3881770)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38ea7d0) {
      %8 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x3884210) {
  %10 = "arith.constant"() {value = 0.000000e+00 : f32} : () -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x38ea830)
    ** Replace : 'arith.constant'(0x3884210)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38ea830) {
      %10 = "llvm.mlir.constant"() {value = 0.000000e+00 : f32} : () -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x38857c0) {
  %12 = "arith.constant"() {value = 0 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x38ea8c0)
    ** Replace : 'arith.constant'(0x38857c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38ea8c0) {
      %12 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x3886d70) {
  %14 = "rmem.affine.req"(%3, %13) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x38ea9b0)
    ** Insert  : 'affine.apply'(0x38e2870)
    ** Insert  : 'arith.index_cast'(0x38ea6b0)
    ** Insert  : 'llvm.extractvalue'(0x38ea740)
    ** Insert  : 'arith.addi'(0x387a800)
    ** Insert  : 'llvm.getelementptr'(0x38d3970)
    ** Insert  : 'rmem.request'(0x38e7460)
    ** Replace : 'rmem.affine.req'(0x3886d70)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38ea9b0) {
      %15 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x38e2870) {
      %16 = "affine.apply"(%14) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
        ** Insert  : 'arith.constant'(0x38e74f0)
        ** Replace : 'affine.apply'(0x38e2870)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38e74f0) {
          %16 = "arith.constant"() {value = 0 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38e7550)
            ** Replace : 'arith.constant'(0x38e74f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38e7550) {
              %16 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS
    } -> SUCCESS : operation was folded
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x38ea6b0) {
      %19 = "arith.index_cast"(%18) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x38ea6b0)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38ea740) {
      %20 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x387a800) {
      %21 = "arith.addi"(%19, %20) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x38e75b0)
        ** Replace : 'arith.addi'(0x387a800)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x38e75b0) {
          %21 = "llvm.add"(%16, %20) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x38d3970) {
      %23 = "llvm.getelementptr"(%15, %22) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x38e7460) {
      %24 = "rmem.request"(%23) {cache_id = 2 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x38e6fc0)
        ** Insert  : 'arith.constant'(0x38ea190)
        ** Insert  : 'arith.andi'(0x38ea1f0)
        ** Insert  : 'arith.constant'(0x38ea2a0)
        ** Insert  : 'arith.divui'(0x38ea300)
        ** Insert  : 'arith.constant'(0x38e7660)
        ** Insert  : 'arith.remsi'(0x38e76c0)
        ** Insert  : 'arith.trunci'(0x38ea3d0)
        ** Insert  : 'arith.constant'(0x38e7770)
        ** Insert  : 'arith.constant'(0x38e8910)
        ** Insert  : 'llvm.call'(0x3861cd0)
        ** Replace : 'rmem.request'(0x38e7460)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x38e6fc0) {
          %24 = "llvm.ptrtoint"(%23) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38ea190) {
          %25 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38e8e50)
            ** Replace : 'arith.constant'(0x38ea190)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38e8e50) {
              %25 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x38ea1f0) {
          %27 = "arith.andi"(%24, %26) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x38e9a70)
            ** Replace : 'arith.andi'(0x38ea1f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x38e9a70) {
              %27 = "llvm.and"(%24, %25) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38ea2a0) {
          %29 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38ea130)
            ** Replace : 'arith.constant'(0x38ea2a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38ea130) {
              %29 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x38ea300) {
          %31 = "arith.divui"(%28, %30) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x38ea510)
            ** Replace : 'arith.divui'(0x38ea300)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x38ea510) {
              %31 = "llvm.udiv"(%27, %29) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38e7660) {
          %33 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38ea5c0)
            ** Replace : 'arith.constant'(0x38e7660)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38ea5c0) {
              %33 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x38e76c0) {
          %35 = "arith.remsi"(%32, %34) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x38e9230)
            ** Replace : 'arith.remsi'(0x38e76c0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x38e9230) {
              %35 = "llvm.srem"(%31, %33) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x38ea3d0) {
          %37 = "arith.trunci"(%36) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x38e9bc0)
            ** Replace : 'arith.trunci'(0x38ea3d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x38e9bc0) {
              %37 = "llvm.trunc"(%35) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38e7770) {
          %39 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38e9b30)
            ** Replace : 'arith.constant'(0x38e7770)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38e9b30) {
              %39 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38e8910) {
          %41 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38e95e0)
            ** Replace : 'arith.constant'(0x38e8910)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38e95e0) {
              %41 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x3861cd0) {
          %43 = "llvm.call"(%40, %28, %38, %42) {callee = @cache_request_impl_2, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x389f650) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x38e9c50)
    ** Insert  : 'arith.constant'(0x38e92e0)
    ** Insert  : 'arith.constant'(0x38e93a0)
    ** Insert  : 'scf.for'(0x3790a10)
    ** Replace : 'affine.for'(0x389f650)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38e9c50) {
      %46 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38e9400)
        ** Replace : 'arith.constant'(0x38e9c50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38e9400) {
          %46 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38e92e0) {
      %48 = "arith.constant"() {value = 64512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38e9460)
        ** Replace : 'arith.constant'(0x38e92e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38e9460) {
          %48 = "llvm.mlir.constant"() {value = 64512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38e93a0) {
      %50 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38e94f0)
        ** Replace : 'arith.constant'(0x38e93a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38e94f0) {
          %50 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x3790a10) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x38eeed0)
        ** Insert  : 'cf.br'(0x378fc40)
        ** Erase   : 'affine.yield'(0x387a8a0)
        ** Insert  : 'cf.br'(0x38eef70)
        ** Insert  : 'arith.cmpi'(0x38ef170)
        ** Insert  : 'cf.cond_br'(0x38ef2e0)
        ** Replace : 'scf.for'(0x3790a10)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x38eeed0) {
          %66 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %51) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x38ef0b0)
            ** Replace : 'arith.addi'(0x38eeed0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x38ef0b0) {
              %66 = "llvm.add"(%52, %50) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x378fc40) {
          "cf.br"(%67, %56)[^bb1] : (index, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x38ee680)
            ** Replace : 'cf.br'(0x378fc40)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x38ee680) {
              "llvm.br"(%66, %56)[^bb1] : (i64, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x38eef70) {
          "cf.br"(%47, %45)[^bb1] : (index, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x38ee740)
            ** Replace : 'cf.br'(0x38eef70)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x38ee740) {
              "llvm.br"(%46, %37)[^bb1] : (i64, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x38ef170) {
          %54 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %49) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x38ee810)
            ** Replace : 'arith.cmpi'(0x38ef170)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x38ee810) {
              %54 = "llvm.icmp"(%52, %48) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x38ef2e0) {
          "cf.cond_br"(%55)[^bb2, ^bb3] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x38eeaa0)
            ** Replace : 'cf.cond_br'(0x38ef2e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x38eeaa0) {
              "llvm.cond_br"(%54)[^bb2, ^bb3] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x382a310) {
  %56 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %10) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x38eeb70)
    ** Replace : 'arith.addi'(0x382a310)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x38eeb70) {
      %56 = "llvm.add"(%52, %9) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x382a420) {
  %58 = "rmem.affine.req"(%3, %57) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x38ee9c0)
    ** Insert  : 'affine.apply'(0x38eec20)
    ** Insert  : 'arith.index_cast'(0x38eecb0)
    ** Insert  : 'llvm.extractvalue'(0x38ef4f0)
    ** Insert  : 'arith.addi'(0x38ef580)
    ** Insert  : 'llvm.getelementptr'(0x38ef630)
    ** Insert  : 'rmem.request'(0x38ef6e0)
    ** Replace : 'rmem.affine.req'(0x382a420)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38ee9c0) {
      %58 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x38eec20) {
      %59 = "affine.apply"(%57) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x38eea50)
        ** Insert  : 'arith.muli'(0x38ef770)
        ** Replace : 'affine.apply'(0x38eec20)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38eea50) {
          %59 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38eed40)
            ** Replace : 'arith.constant'(0x38eea50)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38eed40) {
              %59 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x38ef770) {
          %61 = "arith.muli"(%57, %60) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x38ef820)
            ** Replace : 'arith.muli'(0x38ef770)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x38ef820) {
              %61 = "llvm.mul"(%56, %59) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x38eecb0) {
      %64 = "arith.index_cast"(%63) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x38eecb0)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38ef4f0) {
      %65 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x38ef580) {
      %66 = "arith.addi"(%64, %65) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x38ef8d0)
        ** Replace : 'arith.addi'(0x38ef580)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x38ef8d0) {
          %66 = "llvm.add"(%61, %65) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x38ef630) {
      %68 = "llvm.getelementptr"(%58, %67) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x38ef6e0) {
      %69 = "rmem.request"(%68) {cache_id = 2 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x38f1920)
        ** Insert  : 'arith.constant'(0x38eee00)
        ** Insert  : 'arith.andi'(0x38ee110)
        ** Insert  : 'arith.constant'(0x38ee1c0)
        ** Insert  : 'arith.divui'(0x38f01f0)
        ** Insert  : 'arith.constant'(0x38ee220)
        ** Insert  : 'arith.remsi'(0x38f02a0)
        ** Insert  : 'arith.trunci'(0x38f0350)
        ** Insert  : 'arith.constant'(0x38f03e0)
        ** Insert  : 'arith.constant'(0x38f0440)
        ** Insert  : 'llvm.call'(0x3861b80)
        ** Replace : 'rmem.request'(0x38ef6e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x38f1920) {
          %69 = "llvm.ptrtoint"(%68) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38eee00) {
          %70 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38f04a0)
            ** Replace : 'arith.constant'(0x38eee00)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38f04a0) {
              %70 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x38ee110) {
          %72 = "arith.andi"(%69, %71) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x38ef980)
            ** Replace : 'arith.andi'(0x38ee110)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x38ef980) {
              %72 = "llvm.and"(%69, %70) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38ee1c0) {
          %74 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38f0070)
            ** Replace : 'arith.constant'(0x38ee1c0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38f0070) {
              %74 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x38f01f0) {
          %76 = "arith.divui"(%73, %75) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x38f00d0)
            ** Replace : 'arith.divui'(0x38f01f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x38f00d0) {
              %76 = "llvm.udiv"(%72, %74) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38ee220) {
          %78 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38ed970)
            ** Replace : 'arith.constant'(0x38ee220)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38ed970) {
              %78 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x38f02a0) {
          %80 = "arith.remsi"(%77, %79) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x38efa30)
            ** Replace : 'arith.remsi'(0x38f02a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x38efa30) {
              %80 = "llvm.srem"(%76, %78) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x38f0350) {
          %82 = "arith.trunci"(%81) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x38efae0)
            ** Replace : 'arith.trunci'(0x38f0350)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x38efae0) {
              %82 = "llvm.trunc"(%80) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38f03e0) {
          %84 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38efb70)
            ** Replace : 'arith.constant'(0x38f03e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38efb70) {
              %84 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38f0440) {
          %86 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38ed8b0)
            ** Replace : 'arith.constant'(0x38f0440)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38ed8b0) {
              %86 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x3861b80) {
          %88 = "llvm.call"(%85, %73, %83, %87) {callee = @cache_request_impl_2, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x382ac60) {
  %91 = "rmem.affine.paddr"(%45, %3, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<2, memref<64512x512xf32>>, index) -> memref<4x512xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.paddr -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x38ee930)
    ** Insert  : 'affine.apply'(0x38f1790)
    ** Insert  : 'arith.index_cast'(0x38f1820)
    ** Insert  : 'llvm.extractvalue'(0x38efbd0)
    ** Insert  : 'arith.addi'(0x38efc60)
    ** Insert  : 'llvm.getelementptr'(0x38efd10)
    ** Insert  : 'llvm.ptrtoint'(0x38efdc0)
    ** Insert  : 'rmem.paddr'(0x38efe50)
    ** Insert  : 'llvm.mlir.constant'(0x38eff00)
    ** Insert  : 'llvm.mlir.constant'(0x38eff60)
    ** Insert  : 'llvm.mlir.constant'(0x38effc0)
    ** Insert  : 'llvm.mlir.constant'(0x38f1120)
    ** Insert  : 'llvm.mlir.null'(0x38f1180)
    ** Insert  : 'llvm.getelementptr'(0x38f11e0)
    ** Insert  : 'llvm.ptrtoint'(0x38f1290)
    ** Insert  : 'llvm.mlir.constant'(0x38f1320)
    ** Insert  : 'llvm.inttoptr'(0x38f1380)
    ** Insert  : 'llvm.mlir.undef'(0x38f1410)
    ** Insert  : 'llvm.insertvalue'(0x38f1470)
    ** Insert  : 'llvm.insertvalue'(0x38f1520)
    ** Insert  : 'llvm.mlir.constant'(0x38f15d0)
    ** Insert  : 'llvm.insertvalue'(0x38f1630)
    ** Insert  : 'llvm.insertvalue'(0x38ed270)
    ** Insert  : 'llvm.insertvalue'(0x38ed320)
    ** Insert  : 'llvm.insertvalue'(0x38ed3d0)
    ** Insert  : 'llvm.insertvalue'(0x38ed480)
    ** Replace : 'rmem.affine.paddr'(0x382ac60)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38ee930) {
      %91 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x38f1790) {
      %92 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x38ed530)
        ** Insert  : 'arith.muli'(0x38ed6e0)
        ** Replace : 'affine.apply'(0x38f1790)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x38ed530) {
          %92 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x38ed910)
            ** Replace : 'arith.constant'(0x38ed530)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x38ed910) {
              %92 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x38ed6e0) {
          %94 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %93) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x38f16e0)
            ** Replace : 'arith.muli'(0x38ed6e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x38f16e0) {
              %94 = "llvm.mul"(%52, %92) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x38f1820) {
      %97 = "arith.index_cast"(%96) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x38f1820)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x38efbd0) {
      %98 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x38efc60) {
      %99 = "arith.addi"(%97, %98) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x38f19b0)
        ** Replace : 'arith.addi'(0x38efc60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x38f19b0) {
          %99 = "llvm.add"(%94, %98) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x38efd10) {
      %101 = "llvm.getelementptr"(%91, %100) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x38efdc0) {
      %102 = "llvm.ptrtoint"(%101) : (!llvm.ptr<f32>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.paddr'(0x38efe50) {
      %103 = "rmem.paddr"(%37, %102) {cache_id = 2 : i32} : (i32, i64) -> !llvm.ptr<f32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.paddr -> ()' {
        ** Replace : 'rmem.paddr'(0x38efe50)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38eff00) {
      %104 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38eff60) {
      %105 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38effc0) {
      %106 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38f1120) {
      %107 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x38f1180) {
      %108 = "llvm.mlir.null"() : () -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x38f11e0) {
      %109 = "llvm.getelementptr"(%108, %107) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x38f1290) {
      %110 = "llvm.ptrtoint"(%109) : (!llvm.ptr<f32>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38f1320) {
      %111 = "llvm.mlir.constant"() {value = 3735928559 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.inttoptr'(0x38f1380) {
      %112 = "llvm.inttoptr"(%111) : (i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x38f1410) {
      %113 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x38f1470) {
      %114 = "llvm.insertvalue"(%113, %112) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x38f1520) {
      %115 = "llvm.insertvalue"(%114, %103) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x38f15d0) {
      %116 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x38f1630) {
      %117 = "llvm.insertvalue"(%115, %116) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x38ed270) {
      %118 = "llvm.insertvalue"(%117, %104) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x38ed320) {
      %119 = "llvm.insertvalue"(%118, %105) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x38ed3d0) {
      %120 = "llvm.insertvalue"(%119, %105) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x38ed480) {
      %121 = "llvm.insertvalue"(%120, %106) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x382ad90) {
  %123 = "arith.addi"(%45, %8) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x38f1a60)
    ** Replace : 'arith.addi'(0x382ad90)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x38f1a60) {
      %123 = "llvm.add"(%37, %7) : (i32, i32) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x387be90) {
  %125 = "arith.extsi"(%124) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extsi -> ()' {
    ** Insert  : 'llvm.sext'(0x38ed620)
    ** Replace : 'arith.extsi'(0x387be90)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.sext'(0x38ed620) {
      %125 = "llvm.sext"(%123) : (i32) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x3886f10) {
  %127 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x3897fd0) {
  %128 = "llvm.getelementptr"(%127) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x389aaa0) {
  %129 = "llvm.getelementptr"(%128, %126) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x389d590) {
  %130 = "llvm.getelementptr"(%129) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x389d680) {
  %131 = "llvm.load"(%130) : (!llvm.ptr<i8>) -> i8

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x389d770) {
  %132 = "arith.ori"(%131, %6) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.ori -> ()' {
    ** Insert  : 'llvm.or'(0x38f1b10)
    ** Replace : 'arith.ori'(0x389d770)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.or'(0x38f1b10) {
      %132 = "llvm.or"(%131, %5) : (i8, i8) -> i8

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x3861890) {
  "llvm.store"(%133, %130) : (i8, !llvm.ptr<i8>) -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x388ae90) {
  "rmem.poll"(%45) {cache_id = 2 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.poll -> ()' {
    ** Insert  : 'arith.constant'(0x38ed790)
    ** Insert  : 'arith.addi'(0x38f1bc0)
    ** Insert  : 'arith.extsi'(0x38f1c70)
    ** Insert  : 'llvm.mlir.addressof'(0x38ed850)
    ** Insert  : 'llvm.getelementptr'(0x38f1d00)
    ** Insert  : 'llvm.getelementptr'(0x38f1d90)
    ** Insert  : 'arith.constant'(0x38f1e40)
    ** Insert  : 'llvm.getelementptr'(0x38f1ea0)
    ** Insert  : 'llvm.load'(0x38f1f30)
    ** Insert  : 'llvm.call'(0x38ca070)
    ** Erase   : 'rmem.poll'(0x388ae90)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38ed790) {
      %134 = "arith.constant"() {value = 8192 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38ed7f0)
        ** Replace : 'arith.constant'(0x38ed790)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38ed7f0) {
          %134 = "llvm.mlir.constant"() {value = 8192 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x38f1bc0) {
      %136 = "arith.addi"(%37, %135) : (i32, i32) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x38f3100)
        ** Replace : 'arith.addi'(0x38f1bc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x38f3100) {
          %136 = "llvm.add"(%37, %134) : (i32, i32) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.extsi'(0x38f1c70) {
      %138 = "arith.extsi"(%137) : (i32) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.extsi -> ()' {
        ** Insert  : 'llvm.sext'(0x38ed590)
        ** Replace : 'arith.extsi'(0x38f1c70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.sext'(0x38ed590) {
          %138 = "llvm.sext"(%136) : (i32) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.addressof'(0x38ed850) {
      %140 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x38f1d00) {
      %141 = "llvm.getelementptr"(%140) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x38f1d90) {
      %142 = "llvm.getelementptr"(%141, %139) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38f1e40) {
      %143 = "arith.constant"() {value = 1 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38f31b0)
        ** Replace : 'arith.constant'(0x38f1e40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38f31b0) {
          %143 = "llvm.mlir.constant"() {value = 1 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x38f1ea0) {
      %145 = "llvm.getelementptr"(%142) {rawConstantIndices = array<i32: 0, 3>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i16>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x38f1f30) {
      %146 = "llvm.load"(%145) : (!llvm.ptr<i16>) -> i16

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x38ca070) {
      "llvm.call"(%144, %146) {callee = @poll_qid2, fastmathFlags = #llvm.fastmath<none>} : (i32, i16) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x389efc0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x38f3210)
    ** Insert  : 'arith.constant'(0x38f3270)
    ** Insert  : 'arith.constant'(0x38f32d0)
    ** Insert  : 'scf.yield'(0x38f3320)
    ** Insert  : 'scf.for'(0x38f3380)
    ** Erase   : 'scf.yield'(0x38f3320)
    ** Replace : 'affine.for'(0x389efc0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38f3210) {
      %147 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38f3ee0)
        ** Replace : 'arith.constant'(0x38f3210)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38f3ee0) {
          %147 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38f3270) {
      %149 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38f7570)
        ** Replace : 'arith.constant'(0x38f3270)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38f7570) {
          %149 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38f32d0) {
      %151 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38f6e70)
        ** Replace : 'arith.constant'(0x38f32d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38f6e70) {
          %151 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x38f3320) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x38f3380) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x38f6ed0)
        ** Insert  : 'cf.br'(0x3860300)
        ** Erase   : 'affine.yield'(0x389ef60)
        ** Insert  : 'cf.br'(0x387bf80)
        ** Insert  : 'arith.cmpi'(0x38f6f80)
        ** Insert  : 'cf.cond_br'(0x38f7020)
        ** Replace : 'scf.for'(0x38f3380)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x38f6ed0) {
          %155 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %152) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x38f71e0)
            ** Replace : 'arith.addi'(0x38f6ed0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x38f71e0) {
              %155 = "llvm.add"(%153, %151) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x3860300) {
          "cf.br"(%156)[^bb3] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x38f7280)
            ** Replace : 'cf.br'(0x3860300)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x38f7280) {
              "llvm.br"(%155)[^bb3] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x387bf80) {
          "cf.br"(%148)[^bb3] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x38f6da0)
            ** Replace : 'cf.br'(0x387bf80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x38f6da0) {
              "llvm.br"(%147)[^bb3] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x38f6f80) {
          %154 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %150) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x38f7330)
            ** Replace : 'arith.cmpi'(0x38f6f80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x38f7330) {
              %154 = "llvm.icmp"(%153, %149) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x38f7020) {
          "cf.cond_br"(%155)[^bb4, ^bb5] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x38f3f30)
            ** Replace : 'cf.cond_br'(0x38f7020)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x38f3f30) {
              "llvm.cond_br"(%154)[^bb4, ^bb5] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x3827e30) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x38f7440)
    ** Insert  : 'arith.constant'(0x38f74a0)
    ** Insert  : 'arith.constant'(0x38f7500)
    ** Insert  : 'scf.yield'(0x38f68b0)
    ** Insert  : 'scf.for'(0x38f6910)
    ** Erase   : 'scf.yield'(0x38f68b0)
    ** Replace : 'affine.for'(0x3827e30)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38f7440) {
      %156 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38f73e0)
        ** Replace : 'arith.constant'(0x38f7440)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38f73e0) {
          %156 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38f74a0) {
      %158 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38f4000)
        ** Replace : 'arith.constant'(0x38f74a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38f4000) {
          %158 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x38f7500) {
      %160 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x38eeda0)
        ** Replace : 'arith.constant'(0x38f7500)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38eeda0) {
          %160 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x38f68b0) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x38f6910) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x38f6a40)
        ** Insert  : 'cf.br'(0x38f6630)
        ** Erase   : 'affine.yield'(0x389f5e0)
        ** Insert  : 'cf.br'(0x38f66d0)
        ** Insert  : 'arith.cmpi'(0x38f6780)
        ** Insert  : 'cf.cond_br'(0x38f45f0)
        ** Replace : 'scf.for'(0x38f6910)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x38f6a40) {
          %164 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %161) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x38f8c80)
            ** Replace : 'arith.addi'(0x38f6a40)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x38f8c80) {
              %164 = "llvm.add"(%162, %160) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x38f6630) {
          "cf.br"(%165)[^bb5] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x38f8d20)
            ** Replace : 'cf.br'(0x38f6630)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x38f8d20) {
              "llvm.br"(%164)[^bb5] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x38f66d0) {
          "cf.br"(%157)[^bb5] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x38f8dc0)
            ** Replace : 'cf.br'(0x38f66d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x38f8dc0) {
              "llvm.br"(%156)[^bb5] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x38f6780) {
          %163 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %159) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x38f8e70)
            ** Replace : 'arith.cmpi'(0x38f6780)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x38f8e70) {
              %163 = "llvm.icmp"(%162, %158) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x38f45f0) {
          "cf.cond_br"(%164)[^bb6, ^bb7] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x38f8f10)
            ** Replace : 'cf.cond_br'(0x38f45f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x38f8f10) {
              "llvm.cond_br"(%163)[^bb6, ^bb7] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x37fdfb0) {
  "affine.store"(%12, %122, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0, d1)>} : (f32, memref<4x512xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'memref.store'(0x38a9480)
    ** Replace : 'affine.store'(0x37fdfb0)

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x38a9480) {
      "memref.store"(%12, %122, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (f32, memref<4x512xf32>, index, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x38e9550)
        ** Insert  : 'llvm.mlir.constant'(0x38f5df0)
        ** Insert  : 'llvm.mul'(0x38f5e50)
        ** Insert  : 'llvm.add'(0x38f5f00)
        ** Insert  : 'llvm.getelementptr'(0x38f5fb0)
        ** Insert  : 'llvm.store'(0x38f6050)
        ** Replace : 'memref.store'(0x38a9480)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x38e9550) {
          %165 = "llvm.extractvalue"(%121) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x38f5df0) {
          %166 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mul'(0x38f5e50) {
          %167 = "llvm.mul"(%153, %166) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x38f5f00) {
          %168 = "llvm.add"(%167, %162) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x38f5fb0) {
          %169 = "llvm.getelementptr"(%165, %168) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x38f6050) {
          "llvm.store"(%11, %169) : (f32, !llvm.ptr<f32>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x389f5e0) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x389ef60) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x387a8a0) {
  "affine.yield"(%90) : (i32) -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x389f6e0) {
  "func.return"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.return -> ()' {
    ** Insert  : 'llvm.return'(0x38f60f0)
    ** Replace : 'func.return'(0x389f6e0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x38f60f0) {
      "llvm.return"() : () -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//
** Insert  : 'llvm.mlir.undef'(0x38f6160)
** Insert  : 'llvm.insertvalue'(0x38f6250)
** Insert  : 'llvm.insertvalue'(0x38f6300)
** Insert  : 'llvm.insertvalue'(0x38f63b0)
** Insert  : 'llvm.insertvalue'(0x38f6460)
** Insert  : 'llvm.insertvalue'(0x38f6510)
** Insert  : 'llvm.insertvalue'(0x38f75d0)
** Insert  : 'llvm.insertvalue'(0x38f7680)
** Insert  : 'builtin.unrealized_conversion_cast'(0x38f61c0)
** Insert  : 'builtin.unrealized_conversion_cast'(0x38f7730)
