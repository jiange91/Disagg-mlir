
//===-------------------------------------------===//
Legalizing operation : 'builtin.module'(0x45e8e00) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.global'(0x4520350) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x4460ea0) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x447dab0) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45dcd40) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'func.func'(0x45894e0)
    ** Erase   : 'func.func'(0x45dcd40)

    //===-------------------------------------------===//
    Legalizing operation : 'func.func'(0x45894e0) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45ba9d0) {
  %0 = "arith.constant"() {value = 0 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45bbf80) {
  %1 = "arith.constant"() {value = 0 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45bd530) {
  %2 = "arith.constant"() {value = 1 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45beae0) {
  %3 = "arith.constant"() {value = 2 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45c0090) {
  %4 = "arith.constant"() {value = 1 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45c1640) {
  %5 = "arith.constant"() {value = 2 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.alloca'(0x4589680) {
  %6 = "llvm.alloca"(%4) : (i64) -> !llvm.ptr<array<2 x i64>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.alloca'(0x45c5630) {
  %7 = "llvm.alloca"(%5) : (i64) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45c95f0) {
  %8 = "llvm.getelementptr"(%6) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<2 x i64>>) -> !llvm.ptr<i64>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.null'(0x45cabd0) {
  %9 = "llvm.mlir.null"() : () -> !llvm.ptr<struct<(i64, array<48 x i8>)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.for'(0x45cafa0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.index_cast'(0x45cb090) {
  %16 = "arith.index_cast"(%arg3) : (index) -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45cdb40) {
  %17 = "rmem.llvm.getelementptr"(<<UNKNOWN SSA VALUE>>, %16) {structIndices = array<i32>} : (!llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45cf140) {
  %18 = "rmem.llvm.load"(%17) : (!llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> !rmem.rmref<1, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d0720) {
  %19 = "rmem.llvm.getelementptr"(<<UNKNOWN SSA VALUE>>, %16) {structIndices = array<i32>} : (!llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45d1d20) {
  %20 = "rmem.llvm.load"(%19) : (!llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> !rmem.rmref<2, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.cmpi'(0x45d1e10) {
  %21 = "arith.cmpi"(%arg3, %1) {predicate = 0 : i64} : (index, index) -> i1

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.if'(0x45dcda0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d2020) {
  %23 = "rmem.llvm.getelementptr"(%7, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d4bf0) {
  %24 = "rmem.llvm.getelementptr"(%23, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 0>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x459e810) {
  "rmem.llvm.store"(%20, %24) : (!rmem.rmref<2, memref<64512x512xf32>>, !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d6210) {
  %25 = "rmem.llvm.getelementptr"(%23, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 1>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x459fda0) {
  "rmem.llvm.store"(%18, %25) : (!rmem.rmref<1, memref<64512x512xf32>>, !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d7810) {
  %26 = "rmem.llvm.getelementptr"(%23, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 2>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<memref<512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x45d7910) {
  "rmem.llvm.store"(<<UNKNOWN SSA VALUE>>, %26) : (memref<512x512xf32>, !llvm.ptr<memref<512x512xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45d79c0) {
  %27 = "rmem.bitcast"(%23) : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.addressof'(0x45da2b0) {
  %28 = "rmem.llvm.addressof"() {global_name = @task_0} : () -> !llvm.ptr<func<ptr<i8> (ptr<i8>)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x4456bc0) {
  %29 = "func.call"(%8, %9, %28, %27) {callee = @pthread_create} : (!llvm.ptr<i64>, !llvm.ptr<struct<(i64, array<48 x i8>)>>, !llvm.ptr<func<ptr<i8> (ptr<i8>)>>, !llvm.ptr<i8>) -> i32

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.yield'(0x45d2100) {
  "scf.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.cmpi'(0x45dce60) {
  %22 = "arith.cmpi"(%arg3, %2) {predicate = 0 : i64} : (index, index) -> i1

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.if'(0x45deb90) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45dcf10) {
  %23 = "rmem.llvm.getelementptr"(%7, %4) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45dd0a0) {
  %24 = "rmem.llvm.getelementptr"(%23, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 0>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x45dd140) {
  "rmem.llvm.store"(%20, %24) : (!rmem.rmref<2, memref<64512x512xf32>>, !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45dd1f0) {
  %25 = "rmem.llvm.getelementptr"(%23, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 1>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x45dd290) {
  "rmem.llvm.store"(%18, %25) : (!rmem.rmref<1, memref<64512x512xf32>>, !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45dd340) {
  %26 = "rmem.llvm.getelementptr"(%23, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 2>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<memref<512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x45dd3e0) {
  "rmem.llvm.store"(<<UNKNOWN SSA VALUE>>, %26) : (memref<512x512xf32>, !llvm.ptr<memref<512x512xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45dd490) {
  %27 = "rmem.bitcast"(%23) : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45dd520) {
  %28 = "llvm.getelementptr"(%8) {rawConstantIndices = array<i32: 1>} : (!llvm.ptr<i64>) -> !llvm.ptr<i64>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.addressof'(0x45deaa0) {
  %29 = "rmem.llvm.addressof"() {global_name = @task_1} : () -> !llvm.ptr<func<ptr<i8> (ptr<i8>)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x4456270) {
  %30 = "func.call"(%28, %9, %29, %27) {callee = @pthread_create} : (!llvm.ptr<i64>, !llvm.ptr<struct<(i64, array<48 x i8>)>>, !llvm.ptr<func<ptr<i8> (ptr<i8>)>>, !llvm.ptr<i8>) -> i32

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.yield'(0x45dcfb0) {
  "scf.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.yield'(0x45dd010) {
  "scf.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.null'(0x45dec50) {
  %10 = "llvm.mlir.null"() : () -> !llvm.ptr<ptr<i8>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45decb0) {
  %11 = "llvm.load"(%8) : (!llvm.ptr<i64>) -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x45e0230) {
  %12 = "func.call"(%11, %10) {callee = @pthread_join} : (i64, !llvm.ptr<ptr<i8>>) -> i32

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45e02e0) {
  %13 = "llvm.getelementptr"(%8) {rawConstantIndices = array<i32: 1>} : (!llvm.ptr<i64>) -> !llvm.ptr<i64>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45e0370) {
  %14 = "llvm.load"(%13) : (!llvm.ptr<i64>) -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x45e0400) {
  %15 = "func.call"(%14, %10) {callee = @pthread_join} : (i64, !llvm.ptr<ptr<i8>>) -> i32

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x45d1eb0) {
  "func.return"() : () -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45f8a00) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'func.func'(0x45eee70)
    ** Erase   : 'func.func'(0x45f8a00)

    //===-------------------------------------------===//
    Legalizing operation : 'func.func'(0x45eee70) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45b7cf0) {
  %2 = "arith.constant"() {value = 2 : i8} : () -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45cdbf0) {
  %3 = "arith.constant"() {value = 24576 : i32} : () -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45cf1d0) {
  %4 = "arith.constant"() {value = 4 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45d07d0) {
  %5 = "arith.constant"() {value = 0.000000e+00 : f32} : () -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45d1db0) {
  %6 = "arith.constant"() {value = 0 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45e5950) {
  %7 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %6) {cache_id = 4 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<4, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45eac70) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45e5ae0) {
  %12 = "arith.addi"(%arg3, %4) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45e5b90) {
  %13 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %12) {cache_id = 4 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<4, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x45e5c40) {
  %14 = "rmem.affine.paddr"(%arg4, <<UNKNOWN SSA VALUE>>, %arg3) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<4, memref<64512x512xf32>>, index) -> memref<4x512xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45e5d10) {
  %15 = "arith.addi"(%arg4, %3) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x45e5e00) {
  %16 = "arith.extsi"(%15) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x45c55d0) {
  %17 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45e7490) {
  %18 = "llvm.getelementptr"(%17) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45e8a70) {
  %19 = "llvm.getelementptr"(%18, %16) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45e8b80) {
  %20 = "llvm.getelementptr"(%19) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45e8c70) {
  %21 = "llvm.load"(%20) : (!llvm.ptr<i8>) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x45e8d60) {
  %22 = "arith.ori"(%21, %2) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x45e59f0) {
  "llvm.store"(%22, %20) : (i8, !llvm.ptr<i8>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x45e9000) {
  "rmem.poll"(%arg4) {cache_id = 4 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45ea5e0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x4483ec0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4460480) {
  "affine.store"(%5, %14, %arg5, %arg6) {map = affine_map<(d0, d1) -> (d0, d1)>} : (f32, memref<4x512xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45c9670) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45bd580) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45b7b20) {
  "affine.yield"(%13) : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45b7a80) {
  %9 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %6) {cache_id = 4 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<4, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45b79d0) {
  %10 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %6) {cache_id = 3 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t1"} : (!rmem.rmref<3, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f86b0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45eae20) {
  %12 = "arith.addi"(%arg3, %4) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45eaed0) {
  %13 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %12) {cache_id = 4 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<4, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45eaf80) {
  %14 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %12) {cache_id = 3 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t1"} : (!rmem.rmref<3, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x45ec520) {
  %15 = "rmem.affine.paddr"(%arg4, <<UNKNOWN SSA VALUE>>, %arg3) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<4, memref<64512x512xf32>>, index) -> memref<1x2048xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45ec5f0) {
  %16 = "arith.addi"(%arg4, %3) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x45ec6a0) {
  %17 = "arith.extsi"(%16) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x45ec730) {
  %18 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ec790) {
  %19 = "llvm.getelementptr"(%18) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ec820) {
  %20 = "llvm.getelementptr"(%19, %17) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ec8d0) {
  %21 = "llvm.getelementptr"(%20) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45ead10) {
  %22 = "llvm.load"(%21) : (!llvm.ptr<i8>) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x45ecb60) {
  %23 = "arith.ori"(%22, %2) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x45ecc60) {
  "llvm.store"(%23, %21) : (i8, !llvm.ptr<i8>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x45ecd10) {
  %24 = "rmem.affine.paddr"(%arg5, <<UNKNOWN SSA VALUE>>, %arg3) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<3, memref<64512x512xf32>>, index) -> memref<1x2048xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x45ece30) {
  "rmem.poll"(%arg5) {cache_id = 3 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f8580) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f84b0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f83e0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.alloca'(0x45eeb50) {
  %25 = "memref.alloca"() {alignment = 64 : i64, operand_segment_sizes = array<i32: 0, 0>} : () -> memref<4xvector<8xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45eec20) {
  %26 = "vector.load"(%15, %arg6, %arg7) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45eed40) {
  "affine.store"(%26, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45eedf0) {
  %27 = "affine.apply"(%arg7) {map = affine_map<(d0) -> (d0 + 512)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45eeee0) {
  %28 = "vector.load"(%15, %arg6, %27) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45ef000) {
  "affine.store"(%28, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45ef0b0) {
  %29 = "affine.apply"(%arg7) {map = affine_map<(d0) -> (d0 + 1024)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45ef1a0) {
  %30 = "vector.load"(%15, %arg6, %29) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45ef2c0) {
  "affine.store"(%30, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45ef370) {
  %31 = "affine.apply"(%arg7) {map = affine_map<(d0) -> (d0 + 1536)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45ef460) {
  %32 = "vector.load"(%15, %arg6, %31) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45ef580) {
  "affine.store"(%32, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f7f30) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45ef880) {
  %37 = "arith.addi"(%arg9, %arg8) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45ef990) {
  %38 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45efaa0) {
  %39 = "memref.load"(%24, %arg6, %38) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45efbd0) {
  %40 = "vector.broadcast"(%39) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45efcc0) {
  %41 = "vector.load"(<<UNKNOWN SSA VALUE>>, %37, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45efdf0) {
  %42 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45efee0) {
  %43 = "vector.fma"(%40, %41, %42) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f0000) {
  "affine.store"(%43, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f00b0) {
  %44 = "affine.apply"(%arg9) {map = affine_map<(d0) -> (d0 + 1)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45f01a0) {
  %45 = "arith.addi"(%44, %arg8) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f08d0) {
  %46 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f09e0) {
  %47 = "memref.load"(%24, %arg6, %46) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f0b10) {
  %48 = "vector.broadcast"(%47) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45ef730) {
  %49 = "vector.load"(<<UNKNOWN SSA VALUE>>, %45, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f0e00) {
  %50 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f0ef0) {
  %51 = "vector.fma"(%48, %49, %50) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f1010) {
  "affine.store"(%51, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f10c0) {
  %52 = "affine.apply"(%arg9) {map = affine_map<(d0) -> (d0 + 2)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45f11b0) {
  %53 = "arith.addi"(%52, %arg8) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f12c0) {
  %54 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 2)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f13d0) {
  %55 = "memref.load"(%24, %arg6, %54) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f1500) {
  %56 = "vector.broadcast"(%55) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f15f0) {
  %57 = "vector.load"(<<UNKNOWN SSA VALUE>>, %53, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f1720) {
  %58 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f1810) {
  %59 = "vector.fma"(%56, %57, %58) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f1930) {
  "affine.store"(%59, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f19e0) {
  %60 = "affine.apply"(%arg9) {map = affine_map<(d0) -> (d0 + 3)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45f1df0) {
  %61 = "arith.addi"(%60, %arg8) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f1f00) {
  %62 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 3)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f2010) {
  %63 = "memref.load"(%24, %arg6, %62) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f2140) {
  %64 = "vector.broadcast"(%63) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f2230) {
  %65 = "vector.load"(<<UNKNOWN SSA VALUE>>, %61, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f2360) {
  %66 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f2450) {
  %67 = "vector.fma"(%64, %65, %66) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f2570) {
  "affine.store"(%67, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f2620) {
  %68 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 512)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f2730) {
  %69 = "memref.load"(%24, %arg6, %68) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f2860) {
  %70 = "vector.broadcast"(%69) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f2950) {
  %71 = "vector.load"(<<UNKNOWN SSA VALUE>>, %37, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f2a80) {
  %72 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f2b70) {
  %73 = "vector.fma"(%70, %71, %72) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f2c90) {
  "affine.store"(%73, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f2d40) {
  %74 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 513)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f2e50) {
  %75 = "memref.load"(%24, %arg6, %74) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f2f80) {
  %76 = "vector.broadcast"(%75) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f3070) {
  %77 = "vector.load"(<<UNKNOWN SSA VALUE>>, %45, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f31a0) {
  %78 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f3290) {
  %79 = "vector.fma"(%76, %77, %78) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f33b0) {
  "affine.store"(%79, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f3460) {
  %80 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 514)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f3570) {
  %81 = "memref.load"(%24, %arg6, %80) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f36a0) {
  %82 = "vector.broadcast"(%81) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f3790) {
  %83 = "vector.load"(<<UNKNOWN SSA VALUE>>, %53, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f38c0) {
  %84 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f3fd0) {
  %85 = "vector.fma"(%82, %83, %84) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f40f0) {
  "affine.store"(%85, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f41a0) {
  %86 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 515)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f42b0) {
  %87 = "memref.load"(%24, %arg6, %86) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f43e0) {
  %88 = "vector.broadcast"(%87) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f44d0) {
  %89 = "vector.load"(<<UNKNOWN SSA VALUE>>, %61, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f4600) {
  %90 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f46f0) {
  %91 = "vector.fma"(%88, %89, %90) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f4810) {
  "affine.store"(%91, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f48c0) {
  %92 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1024)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f49d0) {
  %93 = "memref.load"(%24, %arg6, %92) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f02b0) {
  %94 = "vector.broadcast"(%93) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f03a0) {
  %95 = "vector.load"(<<UNKNOWN SSA VALUE>>, %37, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f04d0) {
  %96 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f05c0) {
  %97 = "vector.fma"(%94, %95, %96) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f06e0) {
  "affine.store"(%97, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f0790) {
  %98 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1025)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f5700) {
  %99 = "memref.load"(%24, %arg6, %98) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f5830) {
  %100 = "vector.broadcast"(%99) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f5920) {
  %101 = "vector.load"(<<UNKNOWN SSA VALUE>>, %45, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f5a50) {
  %102 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f5b40) {
  %103 = "vector.fma"(%100, %101, %102) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f5c60) {
  "affine.store"(%103, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f5d10) {
  %104 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1026)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f5e20) {
  %105 = "memref.load"(%24, %arg6, %104) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f5f50) {
  %106 = "vector.broadcast"(%105) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f6040) {
  %107 = "vector.load"(<<UNKNOWN SSA VALUE>>, %53, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f6170) {
  %108 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f6260) {
  %109 = "vector.fma"(%106, %107, %108) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f6380) {
  "affine.store"(%109, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f6430) {
  %110 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1027)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f6540) {
  %111 = "memref.load"(%24, %arg6, %110) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f6670) {
  %112 = "vector.broadcast"(%111) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f6760) {
  %113 = "vector.load"(<<UNKNOWN SSA VALUE>>, %61, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f6890) {
  %114 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f6980) {
  %115 = "vector.fma"(%112, %113, %114) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f6aa0) {
  "affine.store"(%115, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f6b50) {
  %116 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1536)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f6c60) {
  %117 = "memref.load"(%24, %arg6, %116) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f6d90) {
  %118 = "vector.broadcast"(%117) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f6e80) {
  %119 = "vector.load"(<<UNKNOWN SSA VALUE>>, %37, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f6fb0) {
  %120 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f70a0) {
  %121 = "vector.fma"(%118, %119, %120) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f71c0) {
  "affine.store"(%121, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f7270) {
  %122 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1537)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f7380) {
  %123 = "memref.load"(%24, %arg6, %122) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f74b0) {
  %124 = "vector.broadcast"(%123) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f75a0) {
  %125 = "vector.load"(<<UNKNOWN SSA VALUE>>, %45, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f76d0) {
  %126 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f77c0) {
  %127 = "vector.fma"(%124, %125, %126) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f78e0) {
  "affine.store"(%127, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f7990) {
  %128 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1538)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f7aa0) {
  %129 = "memref.load"(%24, %arg6, %128) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f7bd0) {
  %130 = "vector.broadcast"(%129) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f7cc0) {
  %131 = "vector.load"(<<UNKNOWN SSA VALUE>>, %53, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f7df0) {
  %132 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f39b0) {
  %133 = "vector.fma"(%130, %131, %132) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f3ad0) {
  "affine.store"(%133, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f3b80) {
  %134 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1539)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f3c90) {
  %135 = "memref.load"(%24, %arg6, %134) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f3dc0) {
  %136 = "vector.broadcast"(%135) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f3eb0) {
  %137 = "vector.load"(<<UNKNOWN SSA VALUE>>, %61, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f8b20) {
  %138 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f8c10) {
  %139 = "vector.fma"(%136, %137, %138) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f8d30) {
  "affine.store"(%139, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f7ed0) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f7fb0) {
  %33 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x45eab10) {
  "vector.store"(%33, %15, %arg6, %arg7) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f8040) {
  %34 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x4477fb0) {
  "vector.store"(%34, %15, %arg6, %27) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f80d0) {
  %35 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x446ccd0) {
  "vector.store"(%35, %15, %arg6, %29) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f8160) {
  %36 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x45ed400) {
  "vector.store"(%36, %15, %arg6, %31) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f8380) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f8450) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f8520) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f85f0) {
  "affine.yield"(%13, %14) : (i32, i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x45f8900) {
  "func.return"() : () -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45e8cf0) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45d1f20) {
  %0 = "arith.constant"() {value = 0 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.null'(0x45c00f0) {
  %1 = "llvm.mlir.null"() : () -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45f8a70) {
  %2 = "rmem.bitcast"(%arg0) : (!llvm.ptr<i8>) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45fa2e0) {
  %3 = "rmem.llvm.getelementptr"(%2, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 0>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45fa390) {
  %4 = "rmem.llvm.load"(%3) : (!llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> !rmem.rmref<2, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45fa420) {
  %5 = "rmem.bitcast"(%4) : (!rmem.rmref<2, memref<64512x512xf32>>) -> !rmem.rmref<4, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45fa4b0) {
  %6 = "rmem.llvm.getelementptr"(%2, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 1>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45fa560) {
  %7 = "rmem.llvm.load"(%6) : (!llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> !rmem.rmref<1, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45fa5f0) {
  %8 = "rmem.bitcast"(%7) : (!rmem.rmref<1, memref<64512x512xf32>>) -> !rmem.rmref<3, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45fa680) {
  %9 = "rmem.llvm.getelementptr"(%2, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 2>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<memref<512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45fa730) {
  %10 = "rmem.llvm.load"(%9) : (!llvm.ptr<memref<512x512xf32>>) -> memref<512x512xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x43dbc40) {
  "func.call"(%5, %8, %10) {callee = @main_graph__1} : (!rmem.rmref<4, memref<64512x512xf32>>, !rmem.rmref<3, memref<64512x512xf32>>, memref<512x512xf32>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.call -> ()' {
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x4614850)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x46148e0)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x4614970)
    ** Insert  : 'func.call'(0x460d440)
    ** Replace : 'func.call'(0x43dbc40)

    //===-------------------------------------------===//
    Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614850) {
      %14 = "builtin.unrealized_conversion_cast"(%6) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<64512x512xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'builtin.unrealized_conversion_cast'(0x46148e0) {
      %15 = "builtin.unrealized_conversion_cast"(%10) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<64512x512xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614970) {
      %16 = "builtin.unrealized_conversion_cast"(%13) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<512x512xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'func.call'(0x460d440) {
      "func.call"(%14, %15, %16) {callee = @main_graph__1} : (memref<64512x512xf32>, memref<64512x512xf32>, memref<512x512xf32>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x45b9400) {
  "func.return"(%1) : (!llvm.ptr<i8>) -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45ecdd0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'func.func'(0x45f7c50)
    ** Erase   : 'func.func'(0x45ecdd0)

    //===-------------------------------------------===//
    Legalizing operation : 'func.func'(0x45f7c50) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45e8c10) {
  %2 = "arith.constant"() {value = 2 : i8} : () -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45ef400) {
  %3 = "arith.constant"() {value = 8192 : i32} : () -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45baa30) {
  %4 = "arith.constant"() {value = 4 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45e8b20) {
  %5 = "arith.constant"() {value = 0.000000e+00 : f32} : () -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45d78c0) {
  %6 = "arith.constant"() {value = 0 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45fef80) {
  %7 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %6) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t2"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45fffa0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45ff110) {
  %12 = "arith.addi"(%arg3, %4) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45ff1c0) {
  %13 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %12) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t2"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x45ff270) {
  %14 = "rmem.affine.paddr"(%arg4, <<UNKNOWN SSA VALUE>>, %arg3) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<2, memref<64512x512xf32>>, index) -> memref<4x512xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45ff340) {
  %15 = "arith.addi"(%arg4, %3) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x45ff3f0) {
  %16 = "arith.extsi"(%15) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x45b7bb0) {
  %17 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ffc90) {
  %18 = "llvm.getelementptr"(%17) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ffd20) {
  %19 = "llvm.getelementptr"(%18, %16) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ffdd0) {
  %20 = "llvm.getelementptr"(%19) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45ffe60) {
  %21 = "llvm.load"(%20) : (!llvm.ptr<i8>) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x45ffef0) {
  %22 = "arith.ori"(%21, %2) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x45f8960) {
  "llvm.store"(%22, %20) : (i8, !llvm.ptr<i8>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x45ff020) {
  "rmem.poll"(%arg4) {cache_id = 2 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x4600940) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x4600b00) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45e4370) {
  "affine.store"(%5, %14, %arg5, %arg6) {map = affine_map<(d0, d1) -> (d0, d1)>} : (f32, memref<4x512xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45b7e10) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f7a30) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x4600b70) {
  "affine.yield"(%13) : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x4600040) {
  %9 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %6) {cache_id = 1 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t3"} : (!rmem.rmref<1, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x4600c00) {
  %10 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %6) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t2"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x4601be0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x46015a0) {
  %12 = "arith.addi"(%arg3, %4) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x4601650) {
  %13 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %12) {cache_id = 1 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t3"} : (!rmem.rmref<1, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x4601700) {
  %14 = "rmem.affine.req"(<<UNKNOWN SSA VALUE>>, %12) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t2"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x46017b0) {
  %15 = "rmem.affine.paddr"(%arg4, <<UNKNOWN SSA VALUE>>, %arg3) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<1, memref<64512x512xf32>>, index) -> memref<1x2048xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x4601880) {
  %16 = "rmem.affine.paddr"(%arg5, <<UNKNOWN SSA VALUE>>, %arg3) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<2, memref<64512x512xf32>>, index) -> memref<1x2048xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4601950) {
  %17 = "arith.addi"(%arg5, %3) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x4601a00) {
  %18 = "arith.extsi"(%17) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x45ecc10) {
  %19 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x4601a90) {
  %20 = "llvm.getelementptr"(%19) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x4601b20) {
  %21 = "llvm.getelementptr"(%20, %18) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x46014c0) {
  %22 = "llvm.getelementptr"(%21) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x4601d70) {
  %23 = "llvm.load"(%22) : (!llvm.ptr<i8>) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x4601e00) {
  %24 = "arith.ori"(%23, %2) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x4601ea0) {
  "llvm.store"(%24, %22) : (i8, !llvm.ptr<i8>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x4601f40) {
  "rmem.poll"(%arg5) {cache_id = 2 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x460a7e0) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x460a770) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x460a700) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.alloca'(0x46009c0) {
  %25 = "memref.alloca"() {alignment = 64 : i64, operand_segment_sizes = array<i32: 0, 0>} : () -> memref<4xvector<8xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603290) {
  %26 = "vector.load"(%16, %arg6, %arg7) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603350) {
  "affine.store"(%26, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4603400) {
  %27 = "affine.apply"(%arg7) {map = affine_map<(d0) -> (d0 + 512)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603490) {
  %28 = "vector.load"(%16, %arg6, %27) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603550) {
  "affine.store"(%28, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4603600) {
  %29 = "affine.apply"(%arg7) {map = affine_map<(d0) -> (d0 + 1024)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603690) {
  %30 = "vector.load"(%16, %arg6, %29) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603750) {
  "affine.store"(%30, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4603800) {
  %31 = "affine.apply"(%arg7) {map = affine_map<(d0) -> (d0 + 1536)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603890) {
  %32 = "vector.load"(%16, %arg6, %31) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603950) {
  "affine.store"(%32, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x460a450) {
  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4603ae0) {
  %37 = "arith.addi"(%arg9, %arg8) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4603b90) {
  %38 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4603c40) {
  %39 = "memref.load"(%15, %arg6, %38) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4603d10) {
  %40 = "vector.broadcast"(%39) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603da0) {
  %41 = "vector.load"(<<UNKNOWN SSA VALUE>>, %37, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4603e70) {
  %42 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4603f00) {
  %43 = "vector.fma"(%40, %41, %42) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603fc0) {
  "affine.store"(%43, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4604070) {
  %44 = "affine.apply"(%arg9) {map = affine_map<(d0) -> (d0 + 1)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4604100) {
  %45 = "arith.addi"(%44, %arg8) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46049c0) {
  %46 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4604a70) {
  %47 = "memref.load"(%15, %arg6, %46) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4604b40) {
  %48 = "vector.broadcast"(%47) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603a00) {
  %49 = "vector.load"(<<UNKNOWN SSA VALUE>>, %45, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4604d70) {
  %50 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4604e00) {
  %51 = "vector.fma"(%48, %49, %50) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4604ec0) {
  "affine.store"(%51, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4604f70) {
  %52 = "affine.apply"(%arg9) {map = affine_map<(d0) -> (d0 + 2)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4605000) {
  %53 = "arith.addi"(%52, %arg8) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46050b0) {
  %54 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 2)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4605160) {
  %55 = "memref.load"(%15, %arg6, %54) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4605230) {
  %56 = "vector.broadcast"(%55) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46052c0) {
  %57 = "vector.load"(<<UNKNOWN SSA VALUE>>, %53, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4605390) {
  %58 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4605420) {
  %59 = "vector.fma"(%56, %57, %58) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x46054e0) {
  "affine.store"(%59, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4605590) {
  %60 = "affine.apply"(%arg9) {map = affine_map<(d0) -> (d0 + 3)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4604bd0) {
  %61 = "arith.addi"(%60, %arg8) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4605940) {
  %62 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 3)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x46059f0) {
  %63 = "memref.load"(%15, %arg6, %62) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4605ac0) {
  %64 = "vector.broadcast"(%63) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4605b50) {
  %65 = "vector.load"(<<UNKNOWN SSA VALUE>>, %61, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4605c20) {
  %66 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4605cb0) {
  %67 = "vector.fma"(%64, %65, %66) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4605d70) {
  "affine.store"(%67, %25) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4605e20) {
  %68 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 512)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4605ed0) {
  %69 = "memref.load"(%15, %arg6, %68) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4605fa0) {
  %70 = "vector.broadcast"(%69) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4606030) {
  %71 = "vector.load"(<<UNKNOWN SSA VALUE>>, %37, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4606100) {
  %72 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4606190) {
  %73 = "vector.fma"(%70, %71, %72) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4606250) {
  "affine.store"(%73, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4606300) {
  %74 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 513)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x46063b0) {
  %75 = "memref.load"(%15, %arg6, %74) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4606480) {
  %76 = "vector.broadcast"(%75) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4606510) {
  %77 = "vector.load"(<<UNKNOWN SSA VALUE>>, %45, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x46065e0) {
  %78 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4606670) {
  %79 = "vector.fma"(%76, %77, %78) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4606730) {
  "affine.store"(%79, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46067e0) {
  %80 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 514)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4606890) {
  %81 = "memref.load"(%15, %arg6, %80) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4606960) {
  %82 = "vector.broadcast"(%81) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46069f0) {
  %83 = "vector.load"(<<UNKNOWN SSA VALUE>>, %53, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4606ac0) {
  %84 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4605620) {
  %85 = "vector.fma"(%82, %83, %84) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4605700) {
  "affine.store"(%85, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46057b0) {
  %86 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 515)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4607170) {
  %87 = "memref.load"(%15, %arg6, %86) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4607240) {
  %88 = "vector.broadcast"(%87) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46072d0) {
  %89 = "vector.load"(<<UNKNOWN SSA VALUE>>, %61, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x46073a0) {
  %90 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4607430) {
  %91 = "vector.fma"(%88, %89, %90) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x46074f0) {
  "affine.store"(%91, %25) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46075a0) {
  %92 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1024)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4607650) {
  %93 = "memref.load"(%15, %arg6, %92) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4607720) {
  %94 = "vector.broadcast"(%93) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46077b0) {
  %95 = "vector.load"(<<UNKNOWN SSA VALUE>>, %37, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4607880) {
  %96 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4607910) {
  %97 = "vector.fma"(%94, %95, %96) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x46079d0) {
  "affine.store"(%97, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4607a80) {
  %98 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1025)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4607b30) {
  %99 = "memref.load"(%15, %arg6, %98) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45c97b0) {
  %100 = "vector.broadcast"(%99) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45c98a0) {
  %101 = "vector.load"(<<UNKNOWN SSA VALUE>>, %45, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45c99d0) {
  %102 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45c9ac0) {
  %103 = "vector.fma"(%100, %101, %102) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4608400) {
  "affine.store"(%103, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46084b0) {
  %104 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1026)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4608560) {
  %105 = "memref.load"(%15, %arg6, %104) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4608630) {
  %106 = "vector.broadcast"(%105) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46086c0) {
  %107 = "vector.load"(<<UNKNOWN SSA VALUE>>, %53, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4608790) {
  %108 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4608820) {
  %109 = "vector.fma"(%106, %107, %108) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4608900) {
  "affine.store"(%109, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46089b0) {
  %110 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1027)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4608ac0) {
  %111 = "memref.load"(%15, %arg6, %110) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4608bf0) {
  %112 = "vector.broadcast"(%111) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4608ce0) {
  %113 = "vector.load"(<<UNKNOWN SSA VALUE>>, %61, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4608e10) {
  %114 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4608f00) {
  %115 = "vector.fma"(%112, %113, %114) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4609020) {
  "affine.store"(%115, %25) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46090d0) {
  %116 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1536)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x46091e0) {
  %117 = "memref.load"(%15, %arg6, %116) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4609310) {
  %118 = "vector.broadcast"(%117) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4609400) {
  %119 = "vector.load"(<<UNKNOWN SSA VALUE>>, %37, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4609530) {
  %120 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4609620) {
  %121 = "vector.fma"(%118, %119, %120) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4609740) {
  "affine.store"(%121, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46097f0) {
  %122 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1537)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4609900) {
  %123 = "memref.load"(%15, %arg6, %122) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4609a30) {
  %124 = "vector.broadcast"(%123) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4609b20) {
  %125 = "vector.load"(<<UNKNOWN SSA VALUE>>, %45, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4609c50) {
  %126 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4609d40) {
  %127 = "vector.fma"(%124, %125, %126) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4609e60) {
  "affine.store"(%127, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4609f10) {
  %128 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1538)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x460a020) {
  %129 = "memref.load"(%15, %arg6, %128) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x460a150) {
  %130 = "vector.broadcast"(%129) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x460a240) {
  %131 = "vector.load"(<<UNKNOWN SSA VALUE>>, %53, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a370) {
  %132 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4606b50) {
  %133 = "vector.fma"(%130, %131, %132) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4606c70) {
  "affine.store"(%133, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4606d20) {
  %134 = "affine.apply"(%arg8, %arg9) {map = affine_map<(d0, d1) -> (d0 + d1 + 1539)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4606e30) {
  %135 = "memref.load"(%15, %arg6, %134) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4606f60) {
  %136 = "vector.broadcast"(%135) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4607050) {
  %137 = "vector.load"(<<UNKNOWN SSA VALUE>>, %61, %arg7) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460b0a0) {
  %138 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x460b190) {
  %139 = "vector.fma"(%136, %137, %138) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x460b2b0) {
  "affine.store"(%139, %25) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f66f0) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a4d0) {
  %33 = "affine.load"(%25) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x4600a20) {
  "vector.store"(%33, %16, %arg6, %arg7) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a560) {
  %34 = "affine.load"(%25) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x45ecf60) {
  "vector.store"(%34, %16, %arg6, %27) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a5f0) {
  %35 = "affine.load"(%25) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x45ed1b0) {
  "vector.store"(%35, %16, %arg6, %29) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a680) {
  %36 = "affine.load"(%25) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x4602990) {
  "vector.store"(%36, %16, %arg6, %31) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f4370) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f5c00) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f5fd0) {
  "affine.yield"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x460a850) {
  "affine.yield"(%13, %14) : (i32, i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x45f57c0) {
  "func.return"() : () -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45e5e80) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45e7520) {
  %0 = "arith.constant"() {value = 0 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.null'(0x45e7430) {
  %1 = "llvm.mlir.null"() : () -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x460a900) {
  %2 = "rmem.bitcast"(%arg0) : (!llvm.ptr<i8>) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x460a990) {
  %3 = "rmem.llvm.getelementptr"(%2, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 0>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x460aa40) {
  %4 = "rmem.llvm.load"(%3) : (!llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> !rmem.rmref<2, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x460aad0) {
  %5 = "rmem.llvm.getelementptr"(%2, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 1>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x460ab80) {
  %6 = "rmem.llvm.load"(%5) : (!llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> !rmem.rmref<1, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x460ac10) {
  %7 = "rmem.llvm.getelementptr"(%2, %0) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 2>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<memref<512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x460acc0) {
  %8 = "rmem.llvm.load"(%7) : (!llvm.ptr<memref<512x512xf32>>) -> memref<512x512xf32>

  * Fold {
  } -> FAILURE : unable to fold
} -> FAILURE : no matched legalization pattern
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x460ad40) {
  "func.call"(%4, %6, %8) {callee = @main_graph__0} : (!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.call -> ()' {
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x4614be0)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x4614c70)
    ** Insert  : 'builtin.unrealized_conversion_cast'(0x4614d00)
    ** Insert  : 'func.call'(0x46149f0)
    ** Replace : 'func.call'(0x460ad40)

    //===-------------------------------------------===//
    Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614be0) {
      %12 = "builtin.unrealized_conversion_cast"(%5) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<64512x512xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614c70) {
      %13 = "builtin.unrealized_conversion_cast"(%8) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<64512x512xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614d00) {
      %14 = "builtin.unrealized_conversion_cast"(%11) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<512x512xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'func.call'(0x46149f0) {
      "func.call"(%12, %13, %14) {callee = @main_graph__0} : (memref<64512x512xf32>, memref<64512x512xf32>, memref<512x512xf32>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x460ae00) {
  "func.return"(%1) : (!llvm.ptr<i8>) -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//
** Insert  : 'builtin.unrealized_conversion_cast'(0x4614e20)
** Insert  : 'builtin.unrealized_conversion_cast'(0x4616150)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46161e0)
** Insert  : 'builtin.unrealized_conversion_cast'(0x4616350)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46163e0)
** Insert  : 'builtin.unrealized_conversion_cast'(0x4616470)
** Insert  : 'builtin.unrealized_conversion_cast'(0x4616500)
** Insert  : 'builtin.unrealized_conversion_cast'(0x4616590)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46166b0)
** Insert  : 'builtin.unrealized_conversion_cast'(0x4616740)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46160c0)
** Insert  : 'builtin.unrealized_conversion_cast'(0x4617220)
4 caches read

//===-------------------------------------------===//
Legalizing operation : 'builtin.module'(0x45e8e00) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.global'(0x4520350) {
} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x4460ea0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'llvm.func'(0x45eefa0)
    ** Erase   : 'func.func'(0x4460ea0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x45eefa0) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x447dab0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'llvm.func'(0x45ef130)
    ** Erase   : 'func.func'(0x447dab0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x45ef130) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45894e0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'llvm.func'(0x4586900)
    ** Insert  : 'llvm.func'(0x45f2a10)
    ** Insert  : 'llvm.load'(0x46169d0)
    ** Insert  : 'llvm.extractvalue'(0x46147c0)
    ** Insert  : 'llvm.extractvalue'(0x4614730)
    ** Insert  : 'llvm.extractvalue'(0x46146a0)
    ** Insert  : 'llvm.extractvalue'(0x460c580)
    ** Insert  : 'llvm.extractvalue'(0x460d510)
    ** Insert  : 'llvm.extractvalue'(0x461d1c0)
    ** Insert  : 'llvm.extractvalue'(0x4635f50)
    ** Insert  : 'llvm.call'(0x46378d0)
    ** Insert  : 'llvm.return'(0x45ff0a0)
    ** Erase   : 'func.func'(0x45894e0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x4586900) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x45f2a10) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46169d0) {
      %0 = "llvm.load"(%arg2) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46147c0) {
      %1 = "llvm.extractvalue"(%0) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4614730) {
      %2 = "llvm.extractvalue"(%0) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46146a0) {
      %3 = "llvm.extractvalue"(%0) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x460c580) {
      %4 = "llvm.extractvalue"(%0) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x460d510) {
      %5 = "llvm.extractvalue"(%0) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x461d1c0) {
      %6 = "llvm.extractvalue"(%0) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4635f50) {
      %7 = "llvm.extractvalue"(%0) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x46378d0) {
      "llvm.call"(%arg0, %arg1, %1, %2, %3, %4, %5, %6, %7) {callee = @_driver, fastmathFlags = #llvm.fastmath<none>} : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>, !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x45ff0a0) {
      "llvm.return"() : () -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4617220) {
  %1 = "builtin.unrealized_conversion_cast"(<<UNKNOWN SSA VALUE>>) {lower_src_mat = true} : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x46160c0) {
  %2 = "builtin.unrealized_conversion_cast"(<<UNKNOWN SSA VALUE>>) {lower_src_mat = true} : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45ba9d0) {
  %3 = "arith.constant"() {value = 0 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45efe80)
    ** Replace : 'arith.constant'(0x45ba9d0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45efe80) {
      %3 = "llvm.mlir.constant"() {value = 0 : i64} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45bbf80) {
  %5 = "arith.constant"() {value = 0 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45efc60)
    ** Replace : 'arith.constant'(0x45bbf80)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45efc60) {
      %5 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45bd530) {
  %7 = "arith.constant"() {value = 1 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45f0140)
    ** Replace : 'arith.constant'(0x45bd530)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45f0140) {
      %7 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45beae0) {
  %9 = "arith.constant"() {value = 2 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45efa40)
    ** Replace : 'arith.constant'(0x45beae0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45efa40) {
      %9 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45c0090) {
  %11 = "arith.constant"() {value = 1 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x4604c80)
    ** Replace : 'arith.constant'(0x45c0090)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4604c80) {
      %11 = "llvm.mlir.constant"() {value = 1 : i64} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45c1640) {
  %13 = "arith.constant"() {value = 2 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45f7e80)
    ** Replace : 'arith.constant'(0x45c1640)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45f7e80) {
      %13 = "llvm.mlir.constant"() {value = 2 : i64} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.alloca'(0x4589680) {
  %15 = "llvm.alloca"(%12) : (i64) -> !llvm.ptr<array<2 x i64>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.alloca'(0x45c5630) {
  %16 = "llvm.alloca"(%14) : (i64) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45c95f0) {
  %17 = "llvm.getelementptr"(%15) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<2 x i64>>) -> !llvm.ptr<i64>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.null'(0x45cabd0) {
  %18 = "llvm.mlir.null"() : () -> !llvm.ptr<struct<(i64, array<48 x i8>)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.for'(0x45cafa0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'scf.for -> ()' {
    ** Insert  : 'arith.addi'(0x4639440)
    ** Insert  : 'cf.br'(0x45deaf0)
    ** Erase   : 'scf.yield'(0x45dd010)
    ** Insert  : 'cf.br'(0x4601c90)
    ** Insert  : 'arith.cmpi'(0x46394f0)
    ** Insert  : 'cf.cond_br'(0x43dbc40)
    ** Replace : 'scf.for'(0x45cafa0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4639440) {
      %28 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %8) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x463baa0)
        ** Replace : 'arith.addi'(0x4639440)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x463baa0) {
          %28 = "llvm.add"(%19, %7) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cf.br'(0x45deaf0) {
      "cf.br"(%29)[^bb1] : (index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'cf.br -> ()' {
        ** Insert  : 'llvm.br'(0x463bb40)
        ** Replace : 'cf.br'(0x45deaf0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.br'(0x463bb40) {
          "llvm.br"(%28)[^bb1] : (i64) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cf.br'(0x4601c90) {
      "cf.br"(%6)[^bb1] : (index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'cf.br -> ()' {
        ** Insert  : 'llvm.br'(0x463a670)
        ** Replace : 'cf.br'(0x4601c90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.br'(0x463a670) {
          "llvm.br"(%5)[^bb1] : (i64) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.cmpi'(0x46394f0) {
      %20 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %10) {predicate = 2 : i64} : (index, index) -> i1

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.cmpi -> ()' {
        ** Insert  : 'llvm.icmp'(0x4639360)
        ** Replace : 'arith.cmpi'(0x46394f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.icmp'(0x4639360) {
          %20 = "llvm.icmp"(%19, %9) {predicate = 2 : i64} : (i64, i64) -> i1

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cf.cond_br'(0x43dbc40) {
      "cf.cond_br"(%21)[^bb2, ^bb3] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'cf.cond_br -> ()' {
        ** Insert  : 'llvm.cond_br'(0x460ad40)
        ** Replace : 'cf.cond_br'(0x43dbc40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.cond_br'(0x460ad40) {
          "llvm.cond_br"(%20)[^bb2, ^bb3] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.index_cast'(0x45cb090) {
  %22 = "arith.index_cast"(<<UNKNOWN SSA VALUE>>) : (index) -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.index_cast -> ()' {
    ** Replace : 'arith.index_cast'(0x45cb090)
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45cdb40) {
  %23 = "rmem.llvm.getelementptr"(%1, %22) {structIndices = array<i32>} : (!llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463a970)
    ** Replace : 'rmem.llvm.getelementptr'(0x45cdb40)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463a970) {
      %24 = "llvm.getelementptr"(%2, %20) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45cf140) {
  %26 = "rmem.llvm.load"(%25) : (!llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> !rmem.rmref<1, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.load -> ()' {
    ** Insert  : 'llvm.load'(0x463c080)
    ** Replace : 'rmem.llvm.load'(0x45cf140)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x463c080) {
      %26 = "llvm.load"(%24) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d0720) {
  %28 = "rmem.llvm.getelementptr"(%3, %23) {structIndices = array<i32>} : (!llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463aa20)
    ** Replace : 'rmem.llvm.getelementptr'(0x45d0720)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463aa20) {
      %29 = "llvm.getelementptr"(%4, %21) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45d1d20) {
  %31 = "rmem.llvm.load"(%30) : (!llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> !rmem.rmref<2, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.load -> ()' {
    ** Insert  : 'llvm.load'(0x463b0e0)
    ** Replace : 'rmem.llvm.load'(0x45d1d20)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x463b0e0) {
      %31 = "llvm.load"(%29) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.cmpi'(0x45d1e10) {
  %33 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %8) {predicate = 0 : i64} : (index, index) -> i1

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.cmpi -> ()' {
    ** Insert  : 'llvm.icmp'(0x463aad0)
    ** Replace : 'arith.cmpi'(0x45d1e10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.icmp'(0x463aad0) {
      %33 = "llvm.icmp"(%21, %7) {predicate = 0 : i64} : (i64, i64) -> i1

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.if'(0x45dcda0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'scf.if -> ()' {
    ** Insert  : 'cf.br'(0x463bbe0)
    ** Erase   : 'scf.yield'(0x45d2100)
    ** Insert  : 'cf.cond_br'(0x463ab70)
    ** Replace : 'scf.if'(0x45dcda0)

    //===-------------------------------------------===//
    Legalizing operation : 'cf.br'(0x463bbe0) {
      "cf.br"()[^bb4] : () -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'cf.br -> ()' {
        ** Insert  : 'llvm.br'(0x463ac30)
        ** Replace : 'cf.br'(0x463bbe0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.br'(0x463ac30) {
          "llvm.br"()[^bb4] : () -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cf.cond_br'(0x463ab70) {
      "cf.cond_br"(%34)[^bb3, ^bb4] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'cf.cond_br -> ()' {
        ** Insert  : 'llvm.cond_br'(0x463acb0)
        ** Replace : 'cf.cond_br'(0x463ab70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.cond_br'(0x463acb0) {
          "llvm.cond_br"(%33)[^bb3, ^bb4] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d2020) {
  %35 = "rmem.llvm.getelementptr"(%18, %6) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463afe0)
    ** Replace : 'rmem.llvm.getelementptr'(0x45d2020)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463afe0) {
      %36 = "llvm.getelementptr"(%19, %5) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d4bf0) {
  %38 = "rmem.llvm.getelementptr"(%37, %6) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 0>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463d240)
    ** Replace : 'rmem.llvm.getelementptr'(0x45d4bf0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463d240) {
      %38 = "llvm.getelementptr"(%36, %5) {rawConstantIndices = array<i32: -2147483648, 0>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x459e810) {
  "rmem.llvm.store"(%33, %39) : (!rmem.rmref<2, memref<64512x512xf32>>, !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.store -> ()' {
    ** Insert  : 'llvm.store'(0x463d2e0)
    ** Replace : 'rmem.llvm.store'(0x459e810)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x463d2e0) {
      "llvm.store"(%32, %38) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d6210) {
  %40 = "rmem.llvm.getelementptr"(%37, %6) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 1>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463d390)
    ** Replace : 'rmem.llvm.getelementptr'(0x45d6210)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463d390) {
      %40 = "llvm.getelementptr"(%36, %5) {rawConstantIndices = array<i32: -2147483648, 1>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x459fda0) {
  "rmem.llvm.store"(%29, %41) : (!rmem.rmref<1, memref<64512x512xf32>>, !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.store -> ()' {
    ** Insert  : 'llvm.store'(0x463d430)
    ** Replace : 'rmem.llvm.store'(0x459fda0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x463d430) {
      "llvm.store"(%28, %40) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45d7810) {
  %42 = "rmem.llvm.getelementptr"(%37, %6) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 2>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<memref<512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463d4e0)
    ** Replace : 'rmem.llvm.getelementptr'(0x45d7810)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463d4e0) {
      %42 = "llvm.getelementptr"(%36, %5) {rawConstantIndices = array<i32: -2147483648, 2>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x45d7910) {
  "rmem.llvm.store"(<<UNKNOWN SSA VALUE>>, %43) : (memref<512x512xf32>, !llvm.ptr<memref<512x512xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.store -> ()' {
    ** Insert  : 'llvm.store'(0x463d580)
    ** Replace : 'rmem.llvm.store'(0x45d7910)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x463d580) {
      "llvm.store"(%0, %42) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45d79c0) {
  %44 = "rmem.bitcast"(%37) : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.bitcast -> ()' {
    ** Insert  : 'llvm.bitcast'(0x463d1b0)
    ** Replace : 'rmem.bitcast'(0x45d79c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x463d1b0) {
      %44 = "llvm.bitcast"(%36) : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>) -> !llvm.ptr<i8>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.addressof'(0x45da2b0) {
  %46 = "rmem.llvm.addressof"() {global_name = @task_0} : () -> !llvm.ptr<func<ptr<i8> (ptr<i8>)>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.addressof -> ()' {
    ** Insert  : 'llvm.mlir.addressof'(0x45f16c0)
    ** Replace : 'rmem.llvm.addressof'(0x45da2b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.addressof'(0x45f16c0) {
      %46 = "llvm.mlir.addressof"() {global_name = @task_0} : () -> !llvm.ptr<func<ptr<i8> (ptr<i8>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x4456bc0) {
  %48 = "func.call"(%20, %21, %47, %45) {callee = @pthread_create} : (!llvm.ptr<i64>, !llvm.ptr<struct<(i64, array<48 x i8>)>>, !llvm.ptr<func<ptr<i8> (ptr<i8>)>>, !llvm.ptr<i8>) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.call -> ()' {
    ** Insert  : 'llvm.call'(0x4449470)
    ** Replace : 'func.call'(0x4456bc0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x4449470) {
      %48 = "llvm.call"(%20, %21, %46, %44) {callee = @pthread_create, fastmathFlags = #llvm.fastmath<none>} : (!llvm.ptr<i64>, !llvm.ptr<struct<(i64, array<48 x i8>)>>, !llvm.ptr<func<ptr<i8> (ptr<i8>)>>, !llvm.ptr<i8>) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.yield'(0x45d2100) {
  "scf.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.cmpi'(0x45dce60) {
  %50 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %10) {predicate = 0 : i64} : (index, index) -> i1

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.cmpi -> ()' {
    ** Insert  : 'llvm.icmp'(0x463f260)
    ** Replace : 'arith.cmpi'(0x45dce60)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.icmp'(0x463f260) {
      %50 = "llvm.icmp"(%22, %9) {predicate = 0 : i64} : (i64, i64) -> i1

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.if'(0x45deb90) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'scf.if -> ()' {
    ** Insert  : 'cf.br'(0x463ae80)
    ** Erase   : 'scf.yield'(0x45dcfb0)
    ** Insert  : 'cf.cond_br'(0x463ad70)
    ** Replace : 'scf.if'(0x45deb90)

    //===-------------------------------------------===//
    Legalizing operation : 'cf.br'(0x463ae80) {
      "cf.br"()[^bb6] : () -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'cf.br -> ()' {
        ** Insert  : 'llvm.br'(0x463f570)
        ** Replace : 'cf.br'(0x463ae80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.br'(0x463f570) {
          "llvm.br"()[^bb6] : () -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'cf.cond_br'(0x463ad70) {
      "cf.cond_br"(%51)[^bb5, ^bb6] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'cf.cond_br -> ()' {
        ** Insert  : 'llvm.cond_br'(0x463f5f0)
        ** Replace : 'cf.cond_br'(0x463ad70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.cond_br'(0x463f5f0) {
          "llvm.cond_br"(%50)[^bb5, ^bb6] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45dcf10) {
  %52 = "rmem.llvm.getelementptr"(%18, %14) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463f6c0)
    ** Replace : 'rmem.llvm.getelementptr'(0x45dcf10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463f6c0) {
      %52 = "llvm.getelementptr"(%19, %13) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45dd0a0) {
  %54 = "rmem.llvm.getelementptr"(%53, %6) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 0>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463f770)
    ** Replace : 'rmem.llvm.getelementptr'(0x45dd0a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463f770) {
      %54 = "llvm.getelementptr"(%52, %5) {rawConstantIndices = array<i32: -2147483648, 0>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x45dd140) {
  "rmem.llvm.store"(%33, %55) : (!rmem.rmref<2, memref<64512x512xf32>>, !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.store -> ()' {
    ** Insert  : 'llvm.store'(0x463da30)
    ** Replace : 'rmem.llvm.store'(0x45dd140)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x463da30) {
      "llvm.store"(%32, %54) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45dd1f0) {
  %56 = "rmem.llvm.getelementptr"(%53, %6) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 1>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463dae0)
    ** Replace : 'rmem.llvm.getelementptr'(0x45dd1f0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463dae0) {
      %56 = "llvm.getelementptr"(%52, %5) {rawConstantIndices = array<i32: -2147483648, 1>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x45dd290) {
  "rmem.llvm.store"(%29, %57) : (!rmem.rmref<1, memref<64512x512xf32>>, !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.store -> ()' {
    ** Insert  : 'llvm.store'(0x463db80)
    ** Replace : 'rmem.llvm.store'(0x45dd290)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x463db80) {
      "llvm.store"(%28, %56) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45dd340) {
  %58 = "rmem.llvm.getelementptr"(%53, %6) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 2>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<memref<512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x463dc30)
    ** Replace : 'rmem.llvm.getelementptr'(0x45dd340)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463dc30) {
      %58 = "llvm.getelementptr"(%52, %5) {rawConstantIndices = array<i32: -2147483648, 2>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.store'(0x45dd3e0) {
  "rmem.llvm.store"(<<UNKNOWN SSA VALUE>>, %59) : (memref<512x512xf32>, !llvm.ptr<memref<512x512xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.store -> ()' {
    ** Insert  : 'llvm.store'(0x463dcd0)
    ** Replace : 'rmem.llvm.store'(0x45dd3e0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x463dcd0) {
      "llvm.store"(%0, %58) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45dd490) {
  %60 = "rmem.bitcast"(%53) : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>) -> !llvm.ptr<i8>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.bitcast -> ()' {
    ** Insert  : 'llvm.bitcast'(0x463d630)
    ** Replace : 'rmem.bitcast'(0x45dd490)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x463d630) {
      %60 = "llvm.bitcast"(%52) : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>) -> !llvm.ptr<i8>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45dd520) {
  %62 = "llvm.getelementptr"(%20) {rawConstantIndices = array<i32: 1>} : (!llvm.ptr<i64>) -> !llvm.ptr<i64>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.addressof'(0x45deaa0) {
  %63 = "rmem.llvm.addressof"() {global_name = @task_1} : () -> !llvm.ptr<func<ptr<i8> (ptr<i8>)>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.addressof -> ()' {
    ** Insert  : 'llvm.mlir.addressof'(0x45f0ba0)
    ** Replace : 'rmem.llvm.addressof'(0x45deaa0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.addressof'(0x45f0ba0) {
      %63 = "llvm.mlir.addressof"() {global_name = @task_1} : () -> !llvm.ptr<func<ptr<i8> (ptr<i8>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x4456270) {
  %65 = "func.call"(%62, %21, %64, %61) {callee = @pthread_create} : (!llvm.ptr<i64>, !llvm.ptr<struct<(i64, array<48 x i8>)>>, !llvm.ptr<func<ptr<i8> (ptr<i8>)>>, !llvm.ptr<i8>) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.call -> ()' {
    ** Insert  : 'llvm.call'(0x4449320)
    ** Replace : 'func.call'(0x4456270)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x4449320) {
      %65 = "llvm.call"(%62, %21, %63, %60) {callee = @pthread_create, fastmathFlags = #llvm.fastmath<none>} : (!llvm.ptr<i64>, !llvm.ptr<struct<(i64, array<48 x i8>)>>, !llvm.ptr<func<ptr<i8> (ptr<i8>)>>, !llvm.ptr<i8>) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.yield'(0x45dcfb0) {
  "scf.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'scf.yield'(0x45dd010) {
  "scf.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.null'(0x45dec50) {
  %69 = "llvm.mlir.null"() : () -> !llvm.ptr<ptr<i8>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45decb0) {
  %70 = "llvm.load"(%20) : (!llvm.ptr<i64>) -> i64

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x45e0230) {
  %71 = "func.call"(%70, %69) {callee = @pthread_join} : (i64, !llvm.ptr<ptr<i8>>) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.call -> ()' {
    ** Insert  : 'llvm.call'(0x463ec30)
    ** Replace : 'func.call'(0x45e0230)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x463ec30) {
      %71 = "llvm.call"(%70, %69) {callee = @pthread_join, fastmathFlags = #llvm.fastmath<none>} : (i64, !llvm.ptr<ptr<i8>>) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45e02e0) {
  %73 = "llvm.getelementptr"(%20) {rawConstantIndices = array<i32: 1>} : (!llvm.ptr<i64>) -> !llvm.ptr<i64>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45e0370) {
  %74 = "llvm.load"(%73) : (!llvm.ptr<i64>) -> i64

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x45e0400) {
  %75 = "func.call"(%74, %69) {callee = @pthread_join} : (i64, !llvm.ptr<ptr<i8>>) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.call -> ()' {
    ** Insert  : 'llvm.call'(0x463f820)
    ** Replace : 'func.call'(0x45e0400)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x463f820) {
      %75 = "llvm.call"(%74, %69) {callee = @pthread_join, fastmathFlags = #llvm.fastmath<none>} : (i64, !llvm.ptr<ptr<i8>>) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x45d1eb0) {
  "func.return"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.return -> ()' {
    ** Insert  : 'llvm.return'(0x45f0970)
    ** Replace : 'func.return'(0x45d1eb0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x45f0970) {
      "llvm.return"() : () -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45eee70) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'llvm.func'(0x45f1250)
    ** Insert  : 'llvm.func'(0x45f4680)
    ** Insert  : 'llvm.load'(0x4616830)
    ** Insert  : 'llvm.extractvalue'(0x463eba0)
    ** Insert  : 'llvm.extractvalue'(0x463eb10)
    ** Insert  : 'llvm.extractvalue'(0x46423c0)
    ** Insert  : 'llvm.extractvalue'(0x4642450)
    ** Insert  : 'llvm.extractvalue'(0x46424e0)
    ** Insert  : 'llvm.extractvalue'(0x4642570)
    ** Insert  : 'llvm.extractvalue'(0x4642600)
    ** Insert  : 'llvm.load'(0x4642690)
    ** Insert  : 'llvm.extractvalue'(0x46427b0)
    ** Insert  : 'llvm.extractvalue'(0x4642840)
    ** Insert  : 'llvm.extractvalue'(0x46428d0)
    ** Insert  : 'llvm.extractvalue'(0x4642960)
    ** Insert  : 'llvm.extractvalue'(0x46429f0)
    ** Insert  : 'llvm.extractvalue'(0x4642a80)
    ** Insert  : 'llvm.extractvalue'(0x4642b10)
    ** Insert  : 'llvm.load'(0x4642ba0)
    ** Insert  : 'llvm.extractvalue'(0x4642720)
    ** Insert  : 'llvm.extractvalue'(0x4642d50)
    ** Insert  : 'llvm.extractvalue'(0x4642de0)
    ** Insert  : 'llvm.extractvalue'(0x4642e70)
    ** Insert  : 'llvm.extractvalue'(0x4642f00)
    ** Insert  : 'llvm.extractvalue'(0x4642f90)
    ** Insert  : 'llvm.extractvalue'(0x4643020)
    ** Insert  : 'llvm.call'(0x46430a0)
    ** Insert  : 'llvm.return'(0x45f1490)
    ** Erase   : 'func.func'(0x45eee70)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x45f1250) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x45f4680) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4616830) {
      %0 = "llvm.load"(%arg0) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x463eba0) {
      %1 = "llvm.extractvalue"(%0) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x463eb10) {
      %2 = "llvm.extractvalue"(%0) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46423c0) {
      %3 = "llvm.extractvalue"(%0) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642450) {
      %4 = "llvm.extractvalue"(%0) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46424e0) {
      %5 = "llvm.extractvalue"(%0) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642570) {
      %6 = "llvm.extractvalue"(%0) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642600) {
      %7 = "llvm.extractvalue"(%0) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4642690) {
      %8 = "llvm.load"(%arg1) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46427b0) {
      %9 = "llvm.extractvalue"(%8) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642840) {
      %10 = "llvm.extractvalue"(%8) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46428d0) {
      %11 = "llvm.extractvalue"(%8) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642960) {
      %12 = "llvm.extractvalue"(%8) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46429f0) {
      %13 = "llvm.extractvalue"(%8) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642a80) {
      %14 = "llvm.extractvalue"(%8) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642b10) {
      %15 = "llvm.extractvalue"(%8) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4642ba0) {
      %16 = "llvm.load"(%arg2) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642720) {
      %17 = "llvm.extractvalue"(%16) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642d50) {
      %18 = "llvm.extractvalue"(%16) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642de0) {
      %19 = "llvm.extractvalue"(%16) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642e70) {
      %20 = "llvm.extractvalue"(%16) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642f00) {
      %21 = "llvm.extractvalue"(%16) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4642f90) {
      %22 = "llvm.extractvalue"(%16) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4643020) {
      %23 = "llvm.extractvalue"(%16) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x46430a0) {
      "llvm.call"(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15, %17, %18, %19, %20, %21, %22, %23) {callee = @main_graph__1, fastmathFlags = #llvm.fastmath<none>} : (!llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x45f1490) {
      "llvm.return"() : () -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4616740) {
  %3 = "builtin.unrealized_conversion_cast"(<<UNKNOWN SSA VALUE>>) {lower_arg_mat = true} : (memref<64512x512xf32>) -> !rmem.rmref<4, memref<64512x512xf32>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x46166b0) {
  %4 = "builtin.unrealized_conversion_cast"(<<UNKNOWN SSA VALUE>>) {lower_arg_mat = true} : (memref<64512x512xf32>) -> !rmem.rmref<3, memref<64512x512xf32>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45b7cf0) {
  %5 = "arith.constant"() {value = 2 : i8} : () -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45f6c00)
    ** Replace : 'arith.constant'(0x45b7cf0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45f6c00) {
      %5 = "llvm.mlir.constant"() {value = 2 : i8} : () -> i8

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45cdbf0) {
  %7 = "arith.constant"() {value = 24576 : i32} : () -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45f1590)
    ** Replace : 'arith.constant'(0x45cdbf0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45f1590) {
      %7 = "llvm.mlir.constant"() {value = 24576 : i32} : () -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45cf1d0) {
  %9 = "arith.constant"() {value = 4 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45f6830)
    ** Replace : 'arith.constant'(0x45cf1d0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45f6830) {
      %9 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45d07d0) {
  %11 = "arith.constant"() {value = 0.000000e+00 : f32} : () -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45f2f20)
    ** Replace : 'arith.constant'(0x45d07d0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45f2f20) {
      %11 = "llvm.mlir.constant"() {value = 0.000000e+00 : f32} : () -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45d1db0) {
  %13 = "arith.constant"() {value = 0 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x45f3c30)
    ** Replace : 'arith.constant'(0x45d1db0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x45f3c30) {
      %13 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45e5950) {
  %15 = "rmem.affine.req"(%3, %14) {cache_id = 4 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<4, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4646e20)
    ** Insert  : 'affine.apply'(0x4646eb0)
    ** Insert  : 'arith.index_cast'(0x4646f40)
    ** Insert  : 'llvm.extractvalue'(0x4646fd0)
    ** Insert  : 'arith.addi'(0x463e7d0)
    ** Insert  : 'llvm.getelementptr'(0x4641e10)
    ** Insert  : 'rmem.request'(0x4643fd0)
    ** Replace : 'rmem.affine.req'(0x45e5950)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4646e20) {
      %16 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4646eb0) {
      %17 = "affine.apply"(%15) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
        ** Insert  : 'arith.constant'(0x4646ac0)
        ** Replace : 'affine.apply'(0x4646eb0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4646ac0) {
          %17 = "arith.constant"() {value = 0 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4646d90)
            ** Replace : 'arith.constant'(0x4646ac0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4646d90) {
              %17 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS
    } -> SUCCESS : operation was folded
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4646f40) {
      %20 = "arith.index_cast"(%19) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4646f40)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4646fd0) {
      %21 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x463e7d0) {
      %22 = "arith.addi"(%20, %21) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4646b50)
        ** Replace : 'arith.addi'(0x463e7d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4646b50) {
          %22 = "llvm.add"(%17, %21) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4641e10) {
      %24 = "llvm.getelementptr"(%16, %23) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x4643fd0) {
      %25 = "rmem.request"(%24) {cache_id = 4 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x4646a30)
        ** Insert  : 'arith.constant'(0x463a860)
        ** Insert  : 'arith.andi'(0x4645780)
        ** Insert  : 'arith.constant'(0x4646d30)
        ** Insert  : 'arith.divui'(0x4645830)
        ** Insert  : 'arith.constant'(0x46458e0)
        ** Insert  : 'arith.remsi'(0x4645940)
        ** Insert  : 'arith.trunci'(0x46459f0)
        ** Insert  : 'arith.constant'(0x4645a80)
        ** Insert  : 'arith.constant'(0x4645ce0)
        ** Insert  : 'llvm.call'(0x44425e0)
        ** Replace : 'rmem.request'(0x4643fd0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x4646a30) {
          %25 = "llvm.ptrtoint"(%24) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x463a860) {
          %26 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46465b0)
            ** Replace : 'arith.constant'(0x463a860)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46465b0) {
              %26 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x4645780) {
          %28 = "arith.andi"(%25, %27) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x4646610)
            ** Replace : 'arith.andi'(0x4645780)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x4646610) {
              %28 = "llvm.and"(%25, %26) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4646d30) {
          %30 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46466c0)
            ** Replace : 'arith.constant'(0x4646d30)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46466c0) {
              %30 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x4645830) {
          %32 = "arith.divui"(%29, %31) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x4646720)
            ** Replace : 'arith.divui'(0x4645830)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x4646720) {
              %32 = "llvm.udiv"(%28, %30) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46458e0) {
          %34 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46467d0)
            ** Replace : 'arith.constant'(0x46458e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46467d0) {
              %34 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x4645940) {
          %36 = "arith.remsi"(%33, %35) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x4646830)
            ** Replace : 'arith.remsi'(0x4645940)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x4646830) {
              %36 = "llvm.srem"(%32, %34) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x46459f0) {
          %38 = "arith.trunci"(%37) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x4645d40)
            ** Replace : 'arith.trunci'(0x46459f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x4645d40) {
              %38 = "llvm.trunc"(%36) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4645a80) {
          %40 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4645dd0)
            ** Replace : 'arith.constant'(0x4645a80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4645dd0) {
              %40 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4645ce0) {
          %42 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4645e30)
            ** Replace : 'arith.constant'(0x4645ce0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4645e30) {
              %42 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x44425e0) {
          %44 = "llvm.call"(%41, %29, %39, %43) {callee = @cache_request_impl_4, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45eac70) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4645e90)
    ** Insert  : 'arith.constant'(0x4645ef0)
    ** Insert  : 'arith.constant'(0x4645f50)
    ** Insert  : 'scf.for'(0x45ed510)
    ** Replace : 'affine.for'(0x45eac70)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4645e90) {
      %47 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4646ca0)
        ** Replace : 'arith.constant'(0x4645e90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4646ca0) {
          %47 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4645ef0) {
      %49 = "arith.constant"() {value = 64512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x45f18e0)
        ** Replace : 'arith.constant'(0x4645ef0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x45f18e0) {
          %49 = "llvm.mlir.constant"() {value = 64512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4645f50) {
      %51 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46460f0)
        ** Replace : 'arith.constant'(0x4645f50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46460f0) {
          %51 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x45ed510) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4646200)
        ** Insert  : 'cf.br'(0x463ecd0)
        ** Erase   : 'affine.yield'(0x45b7b20)
        ** Insert  : 'cf.br'(0x46462a0)
        ** Insert  : 'arith.cmpi'(0x4646370)
        ** Insert  : 'cf.cond_br'(0x4646410)
        ** Replace : 'scf.for'(0x45ed510)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4646200) {
          %67 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %52) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4649650)
            ** Replace : 'arith.addi'(0x4646200)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4649650) {
              %67 = "llvm.add"(%53, %51) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x463ecd0) {
          "cf.br"(%68, %57)[^bb1] : (index, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x464cb70)
            ** Replace : 'cf.br'(0x463ecd0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x464cb70) {
              "llvm.br"(%67, %57)[^bb1] : (i64, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x46462a0) {
          "cf.br"(%48, %46)[^bb1] : (index, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x464c590)
            ** Replace : 'cf.br'(0x46462a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x464c590) {
              "llvm.br"(%47, %38)[^bb1] : (i64, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4646370) {
          %55 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %50) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x464c660)
            ** Replace : 'arith.cmpi'(0x4646370)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x464c660) {
              %55 = "llvm.icmp"(%53, %49) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4646410) {
          "cf.cond_br"(%56)[^bb2, ^bb3] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x464c700)
            ** Replace : 'cf.cond_br'(0x4646410)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x464c700) {
              "llvm.cond_br"(%55)[^bb2, ^bb3] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45e5ae0) {
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %11) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x464c7d0)
    ** Replace : 'arith.addi'(0x45e5ae0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x464c7d0) {
      %57 = "llvm.add"(%53, %10) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45e5b90) {
  %59 = "rmem.affine.req"(%3, %58) {cache_id = 4 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<4, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x464c880)
    ** Insert  : 'affine.apply'(0x464c910)
    ** Insert  : 'arith.index_cast'(0x464c9a0)
    ** Insert  : 'llvm.extractvalue'(0x464ca30)
    ** Insert  : 'arith.addi'(0x464cac0)
    ** Insert  : 'llvm.getelementptr'(0x4649700)
    ** Insert  : 'rmem.request'(0x46497b0)
    ** Replace : 'rmem.affine.req'(0x45e5b90)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x464c880) {
      %59 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x464c910) {
      %60 = "affine.apply"(%58) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x4649840)
        ** Insert  : 'arith.muli'(0x46498a0)
        ** Replace : 'affine.apply'(0x464c910)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4649840) {
          %60 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464c4f0)
            ** Replace : 'arith.constant'(0x4649840)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464c4f0) {
              %60 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x46498a0) {
          %62 = "arith.muli"(%58, %61) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x4649950)
            ** Replace : 'arith.muli'(0x46498a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x4649950) {
              %62 = "llvm.mul"(%57, %60) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x464c9a0) {
      %65 = "arith.index_cast"(%64) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x464c9a0)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x464ca30) {
      %66 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x464cac0) {
      %67 = "arith.addi"(%65, %66) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4649a00)
        ** Replace : 'arith.addi'(0x464cac0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4649a00) {
          %67 = "llvm.add"(%62, %66) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4649700) {
      %69 = "llvm.getelementptr"(%59, %68) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x46497b0) {
      %70 = "rmem.request"(%69) {cache_id = 4 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x464c460)
        ** Insert  : 'arith.constant'(0x464c340)
        ** Insert  : 'arith.andi'(0x4649ab0)
        ** Insert  : 'arith.constant'(0x4649b60)
        ** Insert  : 'arith.divui'(0x4649bc0)
        ** Insert  : 'arith.constant'(0x4649c70)
        ** Insert  : 'arith.remsi'(0x4649cd0)
        ** Insert  : 'arith.trunci'(0x4649d80)
        ** Insert  : 'arith.constant'(0x4649e10)
        ** Insert  : 'arith.constant'(0x4649e70)
        ** Insert  : 'llvm.call'(0x44282f0)
        ** Replace : 'rmem.request'(0x46497b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x464c460) {
          %70 = "llvm.ptrtoint"(%69) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464c340) {
          %71 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464cc90)
            ** Replace : 'arith.constant'(0x464c340)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464cc90) {
              %71 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x4649ab0) {
          %73 = "arith.andi"(%70, %72) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x464ccf0)
            ** Replace : 'arith.andi'(0x4649ab0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x464ccf0) {
              %73 = "llvm.and"(%70, %71) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4649b60) {
          %75 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464bf50)
            ** Replace : 'arith.constant'(0x4649b60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464bf50) {
              %75 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x4649bc0) {
          %77 = "arith.divui"(%74, %76) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x464bfb0)
            ** Replace : 'arith.divui'(0x4649bc0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x464bfb0) {
              %77 = "llvm.udiv"(%73, %75) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4649c70) {
          %79 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464c060)
            ** Replace : 'arith.constant'(0x4649c70)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464c060) {
              %79 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x4649cd0) {
          %81 = "arith.remsi"(%78, %80) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x464c0c0)
            ** Replace : 'arith.remsi'(0x4649cd0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x464c0c0) {
              %81 = "llvm.srem"(%77, %79) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x4649d80) {
          %83 = "arith.trunci"(%82) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x464c170)
            ** Replace : 'arith.trunci'(0x4649d80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x464c170) {
              %83 = "llvm.trunc"(%81) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4649e10) {
          %85 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464c200)
            ** Replace : 'arith.constant'(0x4649e10)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464c200) {
              %85 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4649e70) {
          %87 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464c260)
            ** Replace : 'arith.constant'(0x4649e70)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464c260) {
              %87 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x44282f0) {
          %89 = "llvm.call"(%86, %74, %84, %88) {callee = @cache_request_impl_4, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x45e5c40) {
  %92 = "rmem.affine.paddr"(<<UNKNOWN SSA VALUE>>, %3, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<4, memref<64512x512xf32>>, index) -> memref<4x512xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.paddr -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x463dd80)
    ** Insert  : 'affine.apply'(0x463de10)
    ** Insert  : 'arith.index_cast'(0x463dea0)
    ** Insert  : 'llvm.extractvalue'(0x463df30)
    ** Insert  : 'arith.addi'(0x463dfc0)
    ** Insert  : 'llvm.getelementptr'(0x463e070)
    ** Insert  : 'rmem.paddr'(0x463e120)
    ** Insert  : 'llvm.mlir.constant'(0x463e1d0)
    ** Insert  : 'llvm.mlir.constant'(0x463e230)
    ** Insert  : 'llvm.mlir.constant'(0x463e290)
    ** Insert  : 'llvm.mlir.constant'(0x463e2f0)
    ** Insert  : 'llvm.mlir.null'(0x463e350)
    ** Insert  : 'llvm.getelementptr'(0x463e3b0)
    ** Insert  : 'llvm.ptrtoint'(0x463e460)
    ** Insert  : 'llvm.mlir.constant'(0x463e4f0)
    ** Insert  : 'llvm.inttoptr'(0x4649ed0)
    ** Insert  : 'llvm.mlir.undef'(0x4649f60)
    ** Insert  : 'llvm.insertvalue'(0x4649fc0)
    ** Insert  : 'llvm.insertvalue'(0x464a070)
    ** Insert  : 'llvm.mlir.constant'(0x464a120)
    ** Insert  : 'llvm.insertvalue'(0x464a180)
    ** Insert  : 'llvm.insertvalue'(0x464a230)
    ** Insert  : 'llvm.insertvalue'(0x464a2e0)
    ** Insert  : 'llvm.insertvalue'(0x464a390)
    ** Insert  : 'llvm.insertvalue'(0x464a440)
    ** Replace : 'rmem.affine.paddr'(0x45e5c40)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x463dd80) {
      %92 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x463de10) {
      %93 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x464ddb0)
        ** Insert  : 'arith.muli'(0x464de10)
        ** Replace : 'affine.apply'(0x463de10)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464ddb0) {
          %93 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464dec0)
            ** Replace : 'arith.constant'(0x464ddb0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464dec0) {
              %93 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x464de10) {
          %95 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %94) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x464df20)
            ** Replace : 'arith.muli'(0x464de10)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x464df20) {
              %95 = "llvm.mul"(%53, %93) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x463dea0) {
      %98 = "arith.index_cast"(%97) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x463dea0)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x463df30) {
      %99 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x463dfc0) {
      %100 = "arith.addi"(%98, %99) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x464dfd0)
        ** Replace : 'arith.addi'(0x463dfc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x464dfd0) {
          %100 = "llvm.add"(%95, %99) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463e070) {
      %102 = "llvm.getelementptr"(%92, %101) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.paddr'(0x463e120) {
      %103 = "rmem.paddr"(%54, %102) {cache_id = 4 : i32} : (i32, !llvm.ptr<f32>) -> !llvm.ptr<f32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.paddr -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x464f3d0)
        ** Insert  : 'arith.constant'(0x464e080)
        ** Insert  : 'arith.extsi'(0x464e0e0)
        ** Insert  : 'arith.constant'(0x464e170)
        ** Insert  : 'arith.muli'(0x464e1d0)
        ** Insert  : 'arith.constant'(0x464e280)
        ** Insert  : 'arith.remsi'(0x464e2e0)
        ** Insert  : 'arith.addi'(0x464e390)
        ** Insert  : 'arith.addi'(0x464e440)
        ** Insert  : 'llvm.mlir.addressof'(0x464e550)
        ** Insert  : 'llvm.load'(0x464e5b0)
        ** Insert  : 'llvm.getelementptr'(0x464e640)
        ** Insert  : 'llvm.bitcast'(0x464e6f0)
        ** Replace : 'rmem.paddr'(0x463e120)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x464f3d0) {
          %103 = "llvm.ptrtoint"(%102) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464e080) {
          %104 = "arith.constant"() {value = 201326592 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464e780)
            ** Replace : 'arith.constant'(0x464e080)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464e780) {
              %104 = "llvm.mlir.constant"() {value = 201326592 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extsi'(0x464e0e0) {
          %106 = "arith.extsi"(%54) : (i32) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.extsi -> ()' {
            ** Insert  : 'llvm.sext'(0x464f030)
            ** Replace : 'arith.extsi'(0x464e0e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.sext'(0x464f030) {
              %106 = "llvm.sext"(%54) : (i32) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464e170) {
          %108 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464f0c0)
            ** Replace : 'arith.constant'(0x464e170)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464f0c0) {
              %108 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x464e1d0) {
          %110 = "arith.muli"(%107, %109) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x464f120)
            ** Replace : 'arith.muli'(0x464e1d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x464f120) {
              %110 = "llvm.mul"(%106, %108) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464e280) {
          %112 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464ee50)
            ** Replace : 'arith.constant'(0x464e280)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464ee50) {
              %112 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x464e2e0) {
          %114 = "arith.remsi"(%103, %113) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x464f230)
            ** Replace : 'arith.remsi'(0x464e2e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x464f230) {
              %114 = "llvm.srem"(%103, %112) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x464e390) {
          %116 = "arith.addi"(%111, %115) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x464ef40)
            ** Replace : 'arith.addi'(0x464e390)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x464ef40) {
              %116 = "llvm.add"(%110, %114) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x464e440) {
          %118 = "arith.addi"(%105, %117) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x464e7e0)
            ** Replace : 'arith.addi'(0x464e440)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x464e7e0) {
              %118 = "llvm.add"(%104, %116) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.addressof'(0x464e550) {
          %120 = "llvm.mlir.addressof"() {global_name = @_rbuf} : () -> !llvm.ptr<ptr<i8>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x464e5b0) {
          %121 = "llvm.load"(%120) : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x464e640) {
          %122 = "llvm.getelementptr"(%121, %119) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.bitcast'(0x464e6f0) {
          %123 = "llvm.bitcast"(%122) : (!llvm.ptr<i8>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x463e1d0) {
      %125 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x463e230) {
      %126 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x463e290) {
      %127 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x463e2f0) {
      %128 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x463e350) {
      %129 = "llvm.mlir.null"() : () -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x463e3b0) {
      %130 = "llvm.getelementptr"(%129, %128) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x463e460) {
      %131 = "llvm.ptrtoint"(%130) : (!llvm.ptr<f32>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x463e4f0) {
      %132 = "llvm.mlir.constant"() {value = 3735928559 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.inttoptr'(0x4649ed0) {
      %133 = "llvm.inttoptr"(%132) : (i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x4649f60) {
      %134 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4649fc0) {
      %135 = "llvm.insertvalue"(%134, %133) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a070) {
      %136 = "llvm.insertvalue"(%135, %124) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x464a120) {
      %137 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a180) {
      %138 = "llvm.insertvalue"(%136, %137) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a230) {
      %139 = "llvm.insertvalue"(%138, %125) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a2e0) {
      %140 = "llvm.insertvalue"(%139, %126) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a390) {
      %141 = "llvm.insertvalue"(%140, %126) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a440) {
      %142 = "llvm.insertvalue"(%141, %127) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45e5d10) {
  %144 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %9) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x464e950)
    ** Replace : 'arith.addi'(0x45e5d10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x464e950) {
      %144 = "llvm.add"(%54, %8) : (i32, i32) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x45e5e00) {
  %146 = "arith.extsi"(%145) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extsi -> ()' {
    ** Insert  : 'llvm.sext'(0x464e8c0)
    ** Replace : 'arith.extsi'(0x45e5e00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.sext'(0x464e8c0) {
      %146 = "llvm.sext"(%144) : (i32) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x45c55d0) {
  %148 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45e7490) {
  %149 = "llvm.getelementptr"(%148) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45e8a70) {
  %150 = "llvm.getelementptr"(%149, %147) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45e8b80) {
  %151 = "llvm.getelementptr"(%150) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45e8c70) {
  %152 = "llvm.load"(%151) : (!llvm.ptr<i8>) -> i8

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x45e8d60) {
  %153 = "arith.ori"(%152, %7) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.ori -> ()' {
    ** Insert  : 'llvm.or'(0x464ea00)
    ** Replace : 'arith.ori'(0x45e8d60)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.or'(0x464ea00) {
      %153 = "llvm.or"(%152, %6) : (i8, i8) -> i8

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x45e59f0) {
  "llvm.store"(%154, %151) : (i8, !llvm.ptr<i8>) -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x45e9000) {
  "rmem.poll"(<<UNKNOWN SSA VALUE>>) {cache_id = 4 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.poll -> ()' {
    ** Insert  : 'arith.constant'(0x464eab0)
    ** Insert  : 'arith.addi'(0x464eb10)
    ** Insert  : 'arith.extsi'(0x464ebc0)
    ** Insert  : 'llvm.mlir.addressof'(0x464ec50)
    ** Insert  : 'llvm.getelementptr'(0x464ecb0)
    ** Insert  : 'llvm.getelementptr'(0x464ed40)
    ** Insert  : 'arith.constant'(0x464edf0)
    ** Insert  : 'llvm.getelementptr'(0x464eeb0)
    ** Insert  : 'llvm.load'(0x464f2e0)
    ** Insert  : 'llvm.call'(0x463f8c0)
    ** Erase   : 'rmem.poll'(0x45e9000)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x464eab0) {
      %155 = "arith.constant"() {value = 24576 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x464be30)
        ** Replace : 'arith.constant'(0x464eab0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x464be30) {
          %155 = "llvm.mlir.constant"() {value = 24576 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x464eb10) {
      %157 = "arith.addi"(%54, %156) : (i32, i32) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46456c0)
        ** Replace : 'arith.addi'(0x464eb10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46456c0) {
          %157 = "llvm.add"(%54, %155) : (i32, i32) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.extsi'(0x464ebc0) {
      %159 = "arith.extsi"(%158) : (i32) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.extsi -> ()' {
        ** Insert  : 'llvm.sext'(0x464b700)
        ** Replace : 'arith.extsi'(0x464ebc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.sext'(0x464b700) {
          %159 = "llvm.sext"(%157) : (i32) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.addressof'(0x464ec50) {
      %161 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x464ecb0) {
      %162 = "llvm.getelementptr"(%161) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x464ed40) {
      %163 = "llvm.getelementptr"(%162, %160) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x464edf0) {
      %164 = "arith.constant"() {value = 3 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x464b790)
        ** Replace : 'arith.constant'(0x464edf0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x464b790) {
          %164 = "llvm.mlir.constant"() {value = 3 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x464eeb0) {
      %166 = "llvm.getelementptr"(%163) {rawConstantIndices = array<i32: 0, 3>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i16>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x464f2e0) {
      %167 = "llvm.load"(%166) : (!llvm.ptr<i16>) -> i16

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x463f8c0) {
      "llvm.call"(%165, %167) {callee = @poll_qid4, fastmathFlags = #llvm.fastmath<none>} : (i32, i16) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45ea5e0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x464b7f0)
    ** Insert  : 'arith.constant'(0x464b850)
    ** Insert  : 'arith.constant'(0x464b8b0)
    ** Insert  : 'scf.yield'(0x464b900)
    ** Insert  : 'scf.for'(0x464b960)
    ** Erase   : 'scf.yield'(0x464b900)
    ** Replace : 'affine.for'(0x45ea5e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x464b7f0) {
      %168 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x464bb90)
        ** Replace : 'arith.constant'(0x464b7f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x464bb90) {
          %168 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x464b850) {
      %170 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x464bbf0)
        ** Replace : 'arith.constant'(0x464b850)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x464bbf0) {
          %170 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x464b8b0) {
      %172 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x464bc50)
        ** Replace : 'arith.constant'(0x464b8b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x464bc50) {
          %172 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x464b900) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x464b960) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x464be90)
        ** Insert  : 'cf.br'(0x463e720)
        ** Erase   : 'affine.yield'(0x45bd580)
        ** Insert  : 'cf.br'(0x464ba30)
        ** Insert  : 'arith.cmpi'(0x464bae0)
        ** Insert  : 'cf.cond_br'(0x464bca0)
        ** Replace : 'scf.for'(0x464b960)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x464be90) {
          %176 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %173) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x46441f0)
            ** Replace : 'arith.addi'(0x464be90)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x46441f0) {
              %176 = "llvm.add"(%174, %172) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x463e720) {
          "cf.br"(%177)[^bb3] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4644d40)
            ** Replace : 'cf.br'(0x463e720)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4644d40) {
              "llvm.br"(%176)[^bb3] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x464ba30) {
          "cf.br"(%169)[^bb3] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4644ad0)
            ** Replace : 'cf.br'(0x464ba30)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4644ad0) {
              "llvm.br"(%168)[^bb3] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x464bae0) {
          %175 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %171) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x4644eb0)
            ** Replace : 'arith.cmpi'(0x464bae0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x4644eb0) {
              %175 = "llvm.icmp"(%174, %170) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x464bca0) {
          "cf.cond_br"(%176)[^bb4, ^bb5] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4644c00)
            ** Replace : 'cf.cond_br'(0x464bca0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4644c00) {
              "llvm.cond_br"(%175)[^bb4, ^bb5] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x4483ec0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x46167d0)
    ** Insert  : 'arith.constant'(0x45f1a70)
    ** Insert  : 'arith.constant'(0x4645020)
    ** Insert  : 'scf.yield'(0x4644290)
    ** Insert  : 'scf.for'(0x46442f0)
    ** Erase   : 'scf.yield'(0x4644290)
    ** Replace : 'affine.for'(0x4483ec0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46167d0) {
      %177 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4644a40)
        ** Replace : 'arith.constant'(0x46167d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4644a40) {
          %177 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x45f1a70) {
      %179 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46443d0)
        ** Replace : 'arith.constant'(0x45f1a70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46443d0) {
          %179 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4645020) {
      %181 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4644430)
        ** Replace : 'arith.constant'(0x4645020)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4644430) {
          %181 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4644290) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x46442f0) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4644f60)
        ** Insert  : 'cf.br'(0x4644de0)
        ** Erase   : 'affine.yield'(0x45c9670)
        ** Insert  : 'cf.br'(0x4644480)
        ** Insert  : 'arith.cmpi'(0x4644530)
        ** Insert  : 'cf.cond_br'(0x46445d0)
        ** Replace : 'scf.for'(0x46442f0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4644f60) {
          %185 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %182) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x46446f0)
            ** Replace : 'arith.addi'(0x4644f60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x46446f0) {
              %185 = "llvm.add"(%183, %181) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4644de0) {
          "cf.br"(%186)[^bb5] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4644790)
            ** Replace : 'cf.br'(0x4644de0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4644790) {
              "llvm.br"(%185)[^bb5] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4644480) {
          "cf.br"(%178)[^bb5] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4644830)
            ** Replace : 'cf.br'(0x4644480)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4644830) {
              "llvm.br"(%177)[^bb5] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4644530) {
          %184 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %180) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x46448e0)
            ** Replace : 'arith.cmpi'(0x4644530)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x46448e0) {
              %184 = "llvm.icmp"(%183, %179) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x46445d0) {
          "cf.cond_br"(%185)[^bb6, ^bb7] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4653490)
            ** Replace : 'cf.cond_br'(0x46445d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4653490) {
              "llvm.cond_br"(%184)[^bb6, ^bb7] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4460480) {
  "affine.store"(%13, %143, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0, d1)>} : (f32, memref<4x512xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'memref.store'(0x45fe680)
    ** Replace : 'affine.store'(0x4460480)

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x45fe680) {
      "memref.store"(%13, %143, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (f32, memref<4x512xf32>, index, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4644b80)
        ** Insert  : 'llvm.mlir.constant'(0x4644cd0)
        ** Insert  : 'llvm.mul'(0x4653560)
        ** Insert  : 'llvm.add'(0x4653610)
        ** Insert  : 'llvm.getelementptr'(0x46536c0)
        ** Insert  : 'llvm.store'(0x4644990)
        ** Replace : 'memref.store'(0x45fe680)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4644b80) {
          %186 = "llvm.extractvalue"(%142) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4644cd0) {
          %187 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mul'(0x4653560) {
          %188 = "llvm.mul"(%174, %187) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4653610) {
          %189 = "llvm.add"(%188, %183) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46536c0) {
          %190 = "llvm.getelementptr"(%186, %189) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4644990) {
          "llvm.store"(%12, %190) : (f32, !llvm.ptr<f32>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45c9670) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45bd580) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45b7b20) {
  "affine.yield"(%91) : (i32) -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45b7a80) {
  %199 = "rmem.affine.req"(%3, %15) {cache_id = 4 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<4, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4656600)
    ** Insert  : 'affine.apply'(0x4656690)
    ** Insert  : 'arith.index_cast'(0x4656720)
    ** Insert  : 'llvm.extractvalue'(0x46567b0)
    ** Insert  : 'arith.addi'(0x4656840)
    ** Insert  : 'llvm.getelementptr'(0x46568f0)
    ** Insert  : 'rmem.request'(0x46569a0)
    ** Replace : 'rmem.affine.req'(0x45b7a80)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4656600) {
      %199 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4656690) {
      %200 = "affine.apply"(%15) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
        ** Insert  : 'arith.constant'(0x4656ac0)
        ** Replace : 'affine.apply'(0x4656690)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4656ac0) {
          %200 = "arith.constant"() {value = 0 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4656b20)
            ** Replace : 'arith.constant'(0x4656ac0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4656b20) {
              %200 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS
    } -> SUCCESS : operation was folded
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4656720) {
      %203 = "arith.index_cast"(%202) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4656720)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46567b0) {
      %204 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4656840) {
      %205 = "arith.addi"(%203, %204) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4656b80)
        ** Replace : 'arith.addi'(0x4656840)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4656b80) {
          %205 = "llvm.add"(%200, %204) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46568f0) {
      %207 = "llvm.getelementptr"(%199, %206) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x46569a0) {
      %208 = "rmem.request"(%207) {cache_id = 4 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x4656a30)
        ** Insert  : 'arith.constant'(0x4656c30)
        ** Insert  : 'arith.andi'(0x4656c90)
        ** Insert  : 'arith.constant'(0x4656d40)
        ** Insert  : 'arith.divui'(0x4656da0)
        ** Insert  : 'arith.constant'(0x4656e50)
        ** Insert  : 'arith.remsi'(0x4656eb0)
        ** Insert  : 'arith.trunci'(0x4656f60)
        ** Insert  : 'arith.constant'(0x4656ff0)
        ** Insert  : 'arith.constant'(0x4657050)
        ** Insert  : 'llvm.call'(0x43fdbc0)
        ** Replace : 'rmem.request'(0x46569a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x4656a30) {
          %208 = "llvm.ptrtoint"(%207) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4656c30) {
          %209 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46570b0)
            ** Replace : 'arith.constant'(0x4656c30)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46570b0) {
              %209 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x4656c90) {
          %211 = "arith.andi"(%208, %210) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x4657110)
            ** Replace : 'arith.andi'(0x4656c90)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x4657110) {
              %211 = "llvm.and"(%208, %209) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4656d40) {
          %213 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46571c0)
            ** Replace : 'arith.constant'(0x4656d40)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46571c0) {
              %213 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x4656da0) {
          %215 = "arith.divui"(%212, %214) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x4657220)
            ** Replace : 'arith.divui'(0x4656da0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x4657220) {
              %215 = "llvm.udiv"(%211, %213) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4656e50) {
          %217 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46572d0)
            ** Replace : 'arith.constant'(0x4656e50)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46572d0) {
              %217 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x4656eb0) {
          %219 = "arith.remsi"(%216, %218) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x4657330)
            ** Replace : 'arith.remsi'(0x4656eb0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x4657330) {
              %219 = "llvm.srem"(%215, %217) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x4656f60) {
          %221 = "arith.trunci"(%220) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x46573e0)
            ** Replace : 'arith.trunci'(0x4656f60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x46573e0) {
              %221 = "llvm.trunc"(%219) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4656ff0) {
          %223 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4657470)
            ** Replace : 'arith.constant'(0x4656ff0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4657470) {
              %223 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4657050) {
          %225 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46574d0)
            ** Replace : 'arith.constant'(0x4657050)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46574d0) {
              %225 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x43fdbc0) {
          %227 = "llvm.call"(%224, %212, %222, %226) {callee = @cache_request_impl_4, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45b79d0) {
  %230 = "rmem.affine.req"(%5, %15) {cache_id = 3 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t1"} : (!rmem.rmref<3, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46575c0)
    ** Insert  : 'affine.apply'(0x4657650)
    ** Insert  : 'arith.index_cast'(0x46576e0)
    ** Insert  : 'llvm.extractvalue'(0x4657770)
    ** Insert  : 'arith.addi'(0x4657800)
    ** Insert  : 'llvm.getelementptr'(0x46578b0)
    ** Insert  : 'rmem.request'(0x4657960)
    ** Replace : 'rmem.affine.req'(0x45b79d0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46575c0) {
      %231 = "llvm.extractvalue"(%6) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4657650) {
      %232 = "affine.apply"(%16) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
        ** Insert  : 'arith.constant'(0x4657a80)
        ** Replace : 'affine.apply'(0x4657650)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4657a80) {
          %232 = "arith.constant"() {value = 0 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4657ae0)
            ** Replace : 'arith.constant'(0x4657a80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4657ae0) {
              %232 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS
    } -> SUCCESS : operation was folded
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x46576e0) {
      %235 = "arith.index_cast"(%234) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x46576e0)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4657770) {
      %236 = "llvm.extractvalue"(%6) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4657800) {
      %237 = "arith.addi"(%235, %236) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4657b40)
        ** Replace : 'arith.addi'(0x4657800)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4657b40) {
          %237 = "llvm.add"(%232, %236) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46578b0) {
      %239 = "llvm.getelementptr"(%231, %238) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x4657960) {
      %240 = "rmem.request"(%239) {cache_id = 3 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x46579f0)
        ** Insert  : 'arith.constant'(0x4657bf0)
        ** Insert  : 'arith.andi'(0x4657c50)
        ** Insert  : 'arith.constant'(0x4657d00)
        ** Insert  : 'arith.divui'(0x4657d60)
        ** Insert  : 'arith.constant'(0x4657e10)
        ** Insert  : 'arith.remsi'(0x4657e70)
        ** Insert  : 'arith.trunci'(0x4657f20)
        ** Insert  : 'arith.constant'(0x4657fb0)
        ** Insert  : 'arith.constant'(0x4658070)
        ** Insert  : 'llvm.call'(0x46580d0)
        ** Replace : 'rmem.request'(0x4657960)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x46579f0) {
          %240 = "llvm.ptrtoint"(%239) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4657bf0) {
          %241 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4653770)
            ** Replace : 'arith.constant'(0x4657bf0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4653770) {
              %241 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x4657c50) {
          %243 = "arith.andi"(%240, %242) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x46537d0)
            ** Replace : 'arith.andi'(0x4657c50)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x46537d0) {
              %243 = "llvm.and"(%240, %241) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4657d00) {
          %245 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4653880)
            ** Replace : 'arith.constant'(0x4657d00)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4653880) {
              %245 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x4657d60) {
          %247 = "arith.divui"(%244, %246) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x46538e0)
            ** Replace : 'arith.divui'(0x4657d60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x46538e0) {
              %247 = "llvm.udiv"(%243, %245) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4657e10) {
          %249 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4653990)
            ** Replace : 'arith.constant'(0x4657e10)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4653990) {
              %249 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x4657e70) {
          %251 = "arith.remsi"(%248, %250) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x46539f0)
            ** Replace : 'arith.remsi'(0x4657e70)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x46539f0) {
              %251 = "llvm.srem"(%247, %249) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x4657f20) {
          %253 = "arith.trunci"(%252) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x4653aa0)
            ** Replace : 'arith.trunci'(0x4657f20)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x4653aa0) {
              %253 = "llvm.trunc"(%251) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4657fb0) {
          %255 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4653b30)
            ** Replace : 'arith.constant'(0x4657fb0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4653b30) {
              %255 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4658070) {
          %257 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4653b90)
            ** Replace : 'arith.constant'(0x4658070)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4653b90) {
              %257 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x46580d0) {
          %259 = "llvm.call"(%256, %244, %254, %258) {callee = @cache_request_impl_3, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f86b0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4653bf0)
    ** Insert  : 'arith.constant'(0x4653c50)
    ** Insert  : 'arith.constant'(0x4653cb0)
    ** Insert  : 'scf.for'(0x45f4b60)
    ** Replace : 'affine.for'(0x45f86b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4653bf0) {
      %262 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46581c0)
        ** Replace : 'arith.constant'(0x4653bf0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46581c0) {
          %262 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4653c50) {
      %264 = "arith.constant"() {value = 64512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46563f0)
        ** Replace : 'arith.constant'(0x4653c50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46563f0) {
          %264 = "llvm.mlir.constant"() {value = 64512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4653cb0) {
      %266 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46561b0)
        ** Replace : 'arith.constant'(0x4653cb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46561b0) {
          %266 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x45f4b60) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4646040)
        ** Insert  : 'cf.br'(0x4601fc0)
        ** Erase   : 'affine.yield'(0x45f85f0)
        ** Insert  : 'cf.br'(0x46028b0)
        ** Insert  : 'arith.cmpi'(0x4656450)
        ** Insert  : 'cf.cond_br'(0x4656200)
        ** Replace : 'scf.for'(0x45f4b60)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4646040) {
          %285 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %267) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4656500)
            ** Replace : 'arith.addi'(0x4646040)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4656500) {
              %285 = "llvm.add"(%268, %266) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4601fc0) {
          "cf.br"(%286, %273, %274)[^bb10] : (index, i32, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x43c4ca0)
            ** Replace : 'cf.br'(0x4601fc0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x43c4ca0) {
              "llvm.br"(%285, %273, %274)[^bb10] : (i64, i32, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x46028b0) {
          "cf.br"(%263, %230, %261)[^bb10] : (index, i32, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x43c4390)
            ** Replace : 'cf.br'(0x46028b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x43c4390) {
              "llvm.br"(%262, %222, %253)[^bb10] : (i64, i32, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4656450) {
          %271 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %265) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x465a390)
            ** Replace : 'arith.cmpi'(0x4656450)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x465a390) {
              %271 = "llvm.icmp"(%268, %264) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4656200) {
          "cf.cond_br"(%272)[^bb11, ^bb12] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4649150)
            ** Replace : 'cf.cond_br'(0x4656200)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4649150) {
              "llvm.cond_br"(%271)[^bb11, ^bb12] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45eae20) {
  %273 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %12) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x4655da0)
    ** Replace : 'arith.addi'(0x45eae20)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4655da0) {
      %273 = "llvm.add"(%268, %11) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45eaed0) {
  %275 = "rmem.affine.req"(%3, %274) {cache_id = 4 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t0"} : (!rmem.rmref<4, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4656110)
    ** Insert  : 'affine.apply'(0x4655e50)
    ** Insert  : 'arith.index_cast'(0x4655f40)
    ** Insert  : 'llvm.extractvalue'(0x4655a70)
    ** Insert  : 'arith.addi'(0x4655b00)
    ** Insert  : 'llvm.getelementptr'(0x4655bb0)
    ** Insert  : 'rmem.request'(0x4655c60)
    ** Replace : 'rmem.affine.req'(0x45eaed0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4656110) {
      %275 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4655e50) {
      %276 = "affine.apply"(%274) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x4655fd0)
        ** Insert  : 'arith.muli'(0x4649250)
        ** Replace : 'affine.apply'(0x4655e50)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4655fd0) {
          %276 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4655ee0)
            ** Replace : 'arith.constant'(0x4655fd0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4655ee0) {
              %276 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x4649250) {
          %278 = "arith.muli"(%274, %277) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x4649460)
            ** Replace : 'arith.muli'(0x4649250)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x4649460) {
              %278 = "llvm.mul"(%273, %276) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4655f40) {
      %281 = "arith.index_cast"(%280) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4655f40)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4655a70) {
      %282 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4655b00) {
      %283 = "arith.addi"(%281, %282) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4649520)
        ** Replace : 'arith.addi'(0x4655b00)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4649520) {
          %283 = "llvm.add"(%278, %282) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4655bb0) {
      %285 = "llvm.getelementptr"(%275, %284) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x4655c60) {
      %286 = "rmem.request"(%285) {cache_id = 4 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x4655cf0)
        ** Insert  : 'arith.constant'(0x46495e0)
        ** Insert  : 'arith.andi'(0x4649340)
        ** Insert  : 'arith.constant'(0x46493f0)
        ** Insert  : 'arith.divui'(0x464cda0)
        ** Insert  : 'arith.constant'(0x464ce50)
        ** Insert  : 'arith.remsi'(0x464ceb0)
        ** Insert  : 'arith.trunci'(0x464cf60)
        ** Insert  : 'arith.constant'(0x464cff0)
        ** Insert  : 'arith.constant'(0x464d050)
        ** Insert  : 'llvm.call'(0x464d0b0)
        ** Replace : 'rmem.request'(0x4655c60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x4655cf0) {
          %286 = "llvm.ptrtoint"(%285) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46495e0) {
          %287 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464d1a0)
            ** Replace : 'arith.constant'(0x46495e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464d1a0) {
              %287 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x4649340) {
          %289 = "arith.andi"(%286, %288) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x464d200)
            ** Replace : 'arith.andi'(0x4649340)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x464d200) {
              %289 = "llvm.and"(%286, %287) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46493f0) {
          %291 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464d2b0)
            ** Replace : 'arith.constant'(0x46493f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464d2b0) {
              %291 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x464cda0) {
          %293 = "arith.divui"(%290, %292) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x46557c0)
            ** Replace : 'arith.divui'(0x464cda0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x46557c0) {
              %293 = "llvm.udiv"(%289, %291) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464ce50) {
          %295 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4655870)
            ** Replace : 'arith.constant'(0x464ce50)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4655870) {
              %295 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x464ceb0) {
          %297 = "arith.remsi"(%294, %296) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x464dc40)
            ** Replace : 'arith.remsi'(0x464ceb0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x464dc40) {
              %297 = "llvm.srem"(%293, %295) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x464cf60) {
          %299 = "arith.trunci"(%298) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x464dcf0)
            ** Replace : 'arith.trunci'(0x464cf60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x464dcf0) {
              %299 = "llvm.trunc"(%297) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464cff0) {
          %301 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46558d0)
            ** Replace : 'arith.constant'(0x464cff0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46558d0) {
              %301 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464d050) {
          %303 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4655930)
            ** Replace : 'arith.constant'(0x464d050)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4655930) {
              %303 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x464d0b0) {
          %305 = "llvm.call"(%302, %290, %300, %304) {callee = @cache_request_impl_4, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45eaf80) {
  %308 = "rmem.affine.req"(%5, %274) {cache_id = 3 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t1"} : (!rmem.rmref<3, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4655990)
    ** Insert  : 'affine.apply'(0x464db50)
    ** Insert  : 'arith.index_cast'(0x464d310)
    ** Insert  : 'llvm.extractvalue'(0x464d3a0)
    ** Insert  : 'arith.addi'(0x464d430)
    ** Insert  : 'llvm.getelementptr'(0x464d4e0)
    ** Insert  : 'rmem.request'(0x464d590)
    ** Replace : 'rmem.affine.req'(0x45eaf80)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4655990) {
      %308 = "llvm.extractvalue"(%6) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x464db50) {
      %309 = "affine.apply"(%274) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x464dbe0)
        ** Insert  : 'arith.muli'(0x464d6b0)
        ** Replace : 'affine.apply'(0x464db50)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464dbe0) {
          %309 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464d760)
            ** Replace : 'arith.constant'(0x464dbe0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464d760) {
              %309 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x464d6b0) {
          %311 = "arith.muli"(%274, %310) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x464d7c0)
            ** Replace : 'arith.muli'(0x464d6b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x464d7c0) {
              %311 = "llvm.mul"(%273, %309) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x464d310) {
      %314 = "arith.index_cast"(%313) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x464d310)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x464d3a0) {
      %315 = "llvm.extractvalue"(%6) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x464d430) {
      %316 = "arith.addi"(%314, %315) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x464d870)
        ** Replace : 'arith.addi'(0x464d430)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x464d870) {
          %316 = "llvm.add"(%311, %315) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x464d4e0) {
      %318 = "llvm.getelementptr"(%308, %317) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x464d590) {
      %319 = "rmem.request"(%318) {cache_id = 3 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x464d620)
        ** Insert  : 'arith.constant'(0x464d920)
        ** Insert  : 'arith.andi'(0x464d980)
        ** Insert  : 'arith.constant'(0x464da30)
        ** Insert  : 'arith.divui'(0x464da90)
        ** Insert  : 'arith.constant'(0x4654750)
        ** Insert  : 'arith.remsi'(0x46547b0)
        ** Insert  : 'arith.trunci'(0x4654860)
        ** Insert  : 'arith.constant'(0x46548f0)
        ** Insert  : 'arith.constant'(0x4654950)
        ** Insert  : 'llvm.call'(0x46549b0)
        ** Replace : 'rmem.request'(0x464d590)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x464d620) {
          %319 = "llvm.ptrtoint"(%318) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464d920) {
          %320 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4654aa0)
            ** Replace : 'arith.constant'(0x464d920)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4654aa0) {
              %320 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x464d980) {
          %322 = "arith.andi"(%319, %321) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x4654b00)
            ** Replace : 'arith.andi'(0x464d980)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x4654b00) {
              %322 = "llvm.and"(%319, %320) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464da30) {
          %324 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4654bb0)
            ** Replace : 'arith.constant'(0x464da30)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4654bb0) {
              %324 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x464da90) {
          %326 = "arith.divui"(%323, %325) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x4654c10)
            ** Replace : 'arith.divui'(0x464da90)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x4654c10) {
              %326 = "llvm.udiv"(%322, %324) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4654750) {
          %328 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4654cc0)
            ** Replace : 'arith.constant'(0x4654750)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4654cc0) {
              %328 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x46547b0) {
          %330 = "arith.remsi"(%327, %329) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x4654d20)
            ** Replace : 'arith.remsi'(0x46547b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x4654d20) {
              %330 = "llvm.srem"(%326, %328) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x4654860) {
          %332 = "arith.trunci"(%331) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x4654dd0)
            ** Replace : 'arith.trunci'(0x4654860)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x4654dd0) {
              %332 = "llvm.trunc"(%330) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46548f0) {
          %334 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4654e60)
            ** Replace : 'arith.constant'(0x46548f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4654e60) {
              %334 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4654950) {
          %336 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4654ec0)
            ** Replace : 'arith.constant'(0x4654950)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4654ec0) {
              %336 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x46549b0) {
          %338 = "llvm.call"(%335, %323, %333, %337) {callee = @cache_request_impl_3, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x45ec520) {
  %341 = "rmem.affine.paddr"(<<UNKNOWN SSA VALUE>>, %3, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<4, memref<64512x512xf32>>, index) -> memref<1x2048xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.paddr -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4654f20)
    ** Insert  : 'affine.apply'(0x4654fb0)
    ** Insert  : 'arith.index_cast'(0x4655040)
    ** Insert  : 'llvm.extractvalue'(0x46550d0)
    ** Insert  : 'arith.addi'(0x4655160)
    ** Insert  : 'llvm.getelementptr'(0x4655210)
    ** Insert  : 'rmem.paddr'(0x46552c0)
    ** Insert  : 'llvm.mlir.constant'(0x4655370)
    ** Insert  : 'llvm.mlir.constant'(0x46553d0)
    ** Insert  : 'llvm.mlir.constant'(0x4655430)
    ** Insert  : 'llvm.mlir.constant'(0x4655490)
    ** Insert  : 'llvm.mlir.null'(0x46554f0)
    ** Insert  : 'llvm.getelementptr'(0x4655550)
    ** Insert  : 'llvm.ptrtoint'(0x4655600)
    ** Insert  : 'llvm.mlir.constant'(0x4655690)
    ** Insert  : 'llvm.inttoptr'(0x46556f0)
    ** Insert  : 'llvm.mlir.undef'(0x464a4f0)
    ** Insert  : 'llvm.insertvalue'(0x464a550)
    ** Insert  : 'llvm.insertvalue'(0x464a600)
    ** Insert  : 'llvm.mlir.constant'(0x464a6b0)
    ** Insert  : 'llvm.insertvalue'(0x464a710)
    ** Insert  : 'llvm.insertvalue'(0x464a7c0)
    ** Insert  : 'llvm.insertvalue'(0x464a870)
    ** Insert  : 'llvm.insertvalue'(0x464a920)
    ** Insert  : 'llvm.insertvalue'(0x464a9d0)
    ** Replace : 'rmem.affine.paddr'(0x45ec520)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4654f20) {
      %341 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4654fb0) {
      %342 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x464aa80)
        ** Insert  : 'arith.muli'(0x464aae0)
        ** Replace : 'affine.apply'(0x4654fb0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464aa80) {
          %342 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464ab90)
            ** Replace : 'arith.constant'(0x464aa80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464ab90) {
              %342 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x464aae0) {
          %344 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %343) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x464abf0)
            ** Replace : 'arith.muli'(0x464aae0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x464abf0) {
              %344 = "llvm.mul"(%268, %342) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4655040) {
      %347 = "arith.index_cast"(%346) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4655040)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46550d0) {
      %348 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4655160) {
      %349 = "arith.addi"(%347, %348) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x464aca0)
        ** Replace : 'arith.addi'(0x4655160)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x464aca0) {
          %349 = "llvm.add"(%344, %348) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4655210) {
      %351 = "llvm.getelementptr"(%341, %350) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.paddr'(0x46552c0) {
      %352 = "rmem.paddr"(%269, %351) {cache_id = 4 : i32} : (i32, !llvm.ptr<f32>) -> !llvm.ptr<f32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.paddr -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x465f060)
        ** Insert  : 'arith.constant'(0x464ad50)
        ** Insert  : 'arith.extsi'(0x464adb0)
        ** Insert  : 'arith.constant'(0x464ae40)
        ** Insert  : 'arith.muli'(0x464aea0)
        ** Insert  : 'arith.constant'(0x464af50)
        ** Insert  : 'arith.remsi'(0x464afb0)
        ** Insert  : 'arith.addi'(0x464b060)
        ** Insert  : 'arith.addi'(0x464b110)
        ** Insert  : 'llvm.mlir.addressof'(0x464b1c0)
        ** Insert  : 'llvm.load'(0x464b220)
        ** Insert  : 'llvm.getelementptr'(0x464f460)
        ** Insert  : 'llvm.bitcast'(0x464f510)
        ** Replace : 'rmem.paddr'(0x46552c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x465f060) {
          %352 = "llvm.ptrtoint"(%351) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464ad50) {
          %353 = "arith.constant"() {value = 201326592 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464f5a0)
            ** Replace : 'arith.constant'(0x464ad50)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464f5a0) {
              %353 = "llvm.mlir.constant"() {value = 201326592 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extsi'(0x464adb0) {
          %355 = "arith.extsi"(%269) : (i32) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.extsi -> ()' {
            ** Insert  : 'llvm.sext'(0x464f600)
            ** Replace : 'arith.extsi'(0x464adb0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.sext'(0x464f600) {
              %355 = "llvm.sext"(%269) : (i32) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464ae40) {
          %357 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464f690)
            ** Replace : 'arith.constant'(0x464ae40)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464f690) {
              %357 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x464aea0) {
          %359 = "arith.muli"(%356, %358) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x464f6f0)
            ** Replace : 'arith.muli'(0x464aea0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x464f6f0) {
              %359 = "llvm.mul"(%355, %357) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x464af50) {
          %361 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x464f7a0)
            ** Replace : 'arith.constant'(0x464af50)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x464f7a0) {
              %361 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x464afb0) {
          %363 = "arith.remsi"(%352, %362) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x464f800)
            ** Replace : 'arith.remsi'(0x464afb0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x464f800) {
              %363 = "llvm.srem"(%352, %361) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x464b060) {
          %365 = "arith.addi"(%360, %364) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x464f8b0)
            ** Replace : 'arith.addi'(0x464b060)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x464f8b0) {
              %365 = "llvm.add"(%359, %363) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x464b110) {
          %367 = "arith.addi"(%354, %366) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x464f960)
            ** Replace : 'arith.addi'(0x464b110)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x464f960) {
              %367 = "llvm.add"(%353, %365) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.addressof'(0x464b1c0) {
          %369 = "llvm.mlir.addressof"() {global_name = @_rbuf} : () -> !llvm.ptr<ptr<i8>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x464b220) {
          %370 = "llvm.load"(%369) : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x464f460) {
          %371 = "llvm.getelementptr"(%370, %368) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.bitcast'(0x464f510) {
          %372 = "llvm.bitcast"(%371) : (!llvm.ptr<i8>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4655370) {
      %374 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46553d0) {
      %375 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4655430) {
      %376 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4655490) {
      %377 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x46554f0) {
      %378 = "llvm.mlir.null"() : () -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4655550) {
      %379 = "llvm.getelementptr"(%378, %377) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x4655600) {
      %380 = "llvm.ptrtoint"(%379) : (!llvm.ptr<f32>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4655690) {
      %381 = "llvm.mlir.constant"() {value = 3735928559 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.inttoptr'(0x46556f0) {
      %382 = "llvm.inttoptr"(%381) : (i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x464a4f0) {
      %383 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a550) {
      %384 = "llvm.insertvalue"(%383, %382) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a600) {
      %385 = "llvm.insertvalue"(%384, %373) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x464a6b0) {
      %386 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a710) {
      %387 = "llvm.insertvalue"(%385, %386) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a7c0) {
      %388 = "llvm.insertvalue"(%387, %374) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a870) {
      %389 = "llvm.insertvalue"(%388, %375) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a920) {
      %390 = "llvm.insertvalue"(%389, %375) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x464a9d0) {
      %391 = "llvm.insertvalue"(%390, %376) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45ec5f0) {
  %393 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %10) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x46502b0)
    ** Replace : 'arith.addi'(0x45ec5f0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46502b0) {
      %393 = "llvm.add"(%269, %9) : (i32, i32) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x45ec6a0) {
  %395 = "arith.extsi"(%394) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extsi -> ()' {
    ** Insert  : 'llvm.sext'(0x4650220)
    ** Replace : 'arith.extsi'(0x45ec6a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.sext'(0x4650220) {
      %395 = "llvm.sext"(%393) : (i32) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x45ec730) {
  %397 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ec790) {
  %398 = "llvm.getelementptr"(%397) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ec820) {
  %399 = "llvm.getelementptr"(%398, %396) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ec8d0) {
  %400 = "llvm.getelementptr"(%399) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45ead10) {
  %401 = "llvm.load"(%400) : (!llvm.ptr<i8>) -> i8

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x45ecb60) {
  %402 = "arith.ori"(%401, %8) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.ori -> ()' {
    ** Insert  : 'llvm.or'(0x4650360)
    ** Replace : 'arith.ori'(0x45ecb60)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.or'(0x4650360) {
      %402 = "llvm.or"(%401, %7) : (i8, i8) -> i8

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x45ecc60) {
  "llvm.store"(%403, %400) : (i8, !llvm.ptr<i8>) -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x45ecd10) {
  %404 = "rmem.affine.paddr"(<<UNKNOWN SSA VALUE>>, %5, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<3, memref<64512x512xf32>>, index) -> memref<1x2048xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.paddr -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x464fa10)
    ** Insert  : 'affine.apply'(0x464faa0)
    ** Insert  : 'arith.index_cast'(0x464fb30)
    ** Insert  : 'llvm.extractvalue'(0x464fbc0)
    ** Insert  : 'arith.addi'(0x464fc50)
    ** Insert  : 'llvm.getelementptr'(0x464fd00)
    ** Insert  : 'rmem.paddr'(0x464fdb0)
    ** Insert  : 'llvm.mlir.constant'(0x4650410)
    ** Insert  : 'llvm.mlir.constant'(0x464fe60)
    ** Insert  : 'llvm.mlir.constant'(0x464fec0)
    ** Insert  : 'llvm.mlir.constant'(0x464ff20)
    ** Insert  : 'llvm.mlir.null'(0x464ff80)
    ** Insert  : 'llvm.getelementptr'(0x464ffe0)
    ** Insert  : 'llvm.ptrtoint'(0x4650090)
    ** Insert  : 'llvm.mlir.constant'(0x4650120)
    ** Insert  : 'llvm.inttoptr'(0x4650180)
    ** Insert  : 'llvm.mlir.undef'(0x465e050)
    ** Insert  : 'llvm.insertvalue'(0x465e0b0)
    ** Insert  : 'llvm.insertvalue'(0x465e160)
    ** Insert  : 'llvm.mlir.constant'(0x465e210)
    ** Insert  : 'llvm.insertvalue'(0x465e270)
    ** Insert  : 'llvm.insertvalue'(0x465e320)
    ** Insert  : 'llvm.insertvalue'(0x465e3d0)
    ** Insert  : 'llvm.insertvalue'(0x465e480)
    ** Insert  : 'llvm.insertvalue'(0x465e530)
    ** Replace : 'rmem.affine.paddr'(0x45ecd10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x464fa10) {
      %404 = "llvm.extractvalue"(%6) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x464faa0) {
      %405 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x465ee80)
        ** Insert  : 'arith.muli'(0x465eee0)
        ** Replace : 'affine.apply'(0x464faa0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x465ee80) {
          %405 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x465ef90)
            ** Replace : 'arith.constant'(0x465ee80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x465ef90) {
              %405 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x465eee0) {
          %407 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %406) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x465e5e0)
            ** Replace : 'arith.muli'(0x465eee0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x465e5e0) {
              %407 = "llvm.mul"(%268, %405) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x464fb30) {
      %410 = "arith.index_cast"(%409) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x464fb30)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x464fbc0) {
      %411 = "llvm.extractvalue"(%6) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x464fc50) {
      %412 = "arith.addi"(%410, %411) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x465e690)
        ** Replace : 'arith.addi'(0x464fc50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x465e690) {
          %412 = "llvm.add"(%407, %411) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x464fd00) {
      %414 = "llvm.getelementptr"(%404, %413) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.paddr'(0x464fdb0) {
      %415 = "rmem.paddr"(%270, %414) {cache_id = 3 : i32} : (i32, !llvm.ptr<f32>) -> !llvm.ptr<f32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.paddr -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x465edf0)
        ** Insert  : 'arith.constant'(0x465eff0)
        ** Insert  : 'arith.extsi'(0x465e740)
        ** Insert  : 'arith.constant'(0x465e7d0)
        ** Insert  : 'arith.muli'(0x465e830)
        ** Insert  : 'arith.constant'(0x465e8e0)
        ** Insert  : 'arith.remsi'(0x465e940)
        ** Insert  : 'arith.addi'(0x465e9f0)
        ** Insert  : 'arith.addi'(0x465eaa0)
        ** Insert  : 'llvm.mlir.addressof'(0x465eb50)
        ** Insert  : 'llvm.load'(0x465ebb0)
        ** Insert  : 'llvm.getelementptr'(0x465ec40)
        ** Insert  : 'llvm.bitcast'(0x465ecf0)
        ** Replace : 'rmem.paddr'(0x464fdb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x465edf0) {
          %415 = "llvm.ptrtoint"(%414) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x465eff0) {
          %416 = "arith.constant"() {value = 134217728 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x465ed80)
            ** Replace : 'arith.constant'(0x465eff0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x465ed80) {
              %416 = "llvm.mlir.constant"() {value = 134217728 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extsi'(0x465e740) {
          %418 = "arith.extsi"(%270) : (i32) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.extsi -> ()' {
            ** Insert  : 'llvm.sext'(0x465f0f0)
            ** Replace : 'arith.extsi'(0x465e740)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.sext'(0x465f0f0) {
              %418 = "llvm.sext"(%270) : (i32) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x465e7d0) {
          %420 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x465f180)
            ** Replace : 'arith.constant'(0x465e7d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x465f180) {
              %420 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x465e830) {
          %422 = "arith.muli"(%419, %421) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x465f1e0)
            ** Replace : 'arith.muli'(0x465e830)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x465f1e0) {
              %422 = "llvm.mul"(%418, %420) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x465e8e0) {
          %424 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x465f290)
            ** Replace : 'arith.constant'(0x465e8e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x465f290) {
              %424 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x465e940) {
          %426 = "arith.remsi"(%415, %425) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x465f2f0)
            ** Replace : 'arith.remsi'(0x465e940)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x465f2f0) {
              %426 = "llvm.srem"(%415, %424) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x465e9f0) {
          %428 = "arith.addi"(%423, %427) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4652490)
            ** Replace : 'arith.addi'(0x465e9f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4652490) {
              %428 = "llvm.add"(%422, %426) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x465eaa0) {
          %430 = "arith.addi"(%417, %429) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4652540)
            ** Replace : 'arith.addi'(0x465eaa0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4652540) {
              %430 = "llvm.add"(%416, %428) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.addressof'(0x465eb50) {
          %432 = "llvm.mlir.addressof"() {global_name = @_rbuf} : () -> !llvm.ptr<ptr<i8>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x465ebb0) {
          %433 = "llvm.load"(%432) : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465ec40) {
          %434 = "llvm.getelementptr"(%433, %431) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.bitcast'(0x465ecf0) {
          %435 = "llvm.bitcast"(%434) : (!llvm.ptr<i8>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4650410) {
      %437 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x464fe60) {
      %438 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x464fec0) {
      %439 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x464ff20) {
      %440 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x464ff80) {
      %441 = "llvm.mlir.null"() : () -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x464ffe0) {
      %442 = "llvm.getelementptr"(%441, %440) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x4650090) {
      %443 = "llvm.ptrtoint"(%442) : (!llvm.ptr<f32>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4650120) {
      %444 = "llvm.mlir.constant"() {value = 3735928559 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.inttoptr'(0x4650180) {
      %445 = "llvm.inttoptr"(%444) : (i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x465e050) {
      %446 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x465e0b0) {
      %447 = "llvm.insertvalue"(%446, %445) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x465e160) {
      %448 = "llvm.insertvalue"(%447, %436) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x465e210) {
      %449 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x465e270) {
      %450 = "llvm.insertvalue"(%448, %449) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x465e320) {
      %451 = "llvm.insertvalue"(%450, %437) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x465e3d0) {
      %452 = "llvm.insertvalue"(%451, %438) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x465e480) {
      %453 = "llvm.insertvalue"(%452, %438) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x465e530) {
      %454 = "llvm.insertvalue"(%453, %439) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x45ece30) {
  "rmem.poll"(<<UNKNOWN SSA VALUE>>) {cache_id = 3 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.poll -> ()' {
    ** Insert  : 'arith.constant'(0x4652e90)
    ** Insert  : 'arith.addi'(0x4652ef0)
    ** Insert  : 'arith.extsi'(0x4652e00)
    ** Insert  : 'llvm.mlir.addressof'(0x4652fa0)
    ** Insert  : 'llvm.getelementptr'(0x4653000)
    ** Insert  : 'llvm.getelementptr'(0x4653090)
    ** Insert  : 'arith.constant'(0x4653140)
    ** Insert  : 'llvm.getelementptr'(0x46531a0)
    ** Insert  : 'llvm.load'(0x4653230)
    ** Insert  : 'llvm.call'(0x4653310)
    ** Erase   : 'rmem.poll'(0x45ece30)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4652e90) {
      %456 = "arith.constant"() {value = 16384 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46533c0)
        ** Replace : 'arith.constant'(0x4652e90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46533c0) {
          %456 = "llvm.mlir.constant"() {value = 16384 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4652ef0) {
      %458 = "arith.addi"(%270, %457) : (i32, i32) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46525f0)
        ** Replace : 'arith.addi'(0x4652ef0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46525f0) {
          %458 = "llvm.add"(%270, %456) : (i32, i32) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.extsi'(0x4652e00) {
      %460 = "arith.extsi"(%459) : (i32) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.extsi -> ()' {
        ** Insert  : 'llvm.sext'(0x46526a0)
        ** Replace : 'arith.extsi'(0x4652e00)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.sext'(0x46526a0) {
          %460 = "llvm.sext"(%458) : (i32) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.addressof'(0x4652fa0) {
      %462 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4653000) {
      %463 = "llvm.getelementptr"(%462) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4653090) {
      %464 = "llvm.getelementptr"(%463, %461) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4653140) {
      %465 = "arith.constant"() {value = 2 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4653420)
        ** Replace : 'arith.constant'(0x4653140)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4653420) {
          %465 = "llvm.mlir.constant"() {value = 2 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46531a0) {
      %467 = "llvm.getelementptr"(%464) {rawConstantIndices = array<i32: 0, 3>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i16>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4653230) {
      %468 = "llvm.load"(%467) : (!llvm.ptr<i16>) -> i16

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x4653310) {
      "llvm.call"(%466, %468) {callee = @poll_qid3, fastmathFlags = #llvm.fastmath<none>} : (i32, i16) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f8580) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4652730)
    ** Insert  : 'arith.constant'(0x4652790)
    ** Insert  : 'arith.constant'(0x46527f0)
    ** Insert  : 'scf.yield'(0x4652840)
    ** Insert  : 'scf.for'(0x46528a0)
    ** Erase   : 'scf.yield'(0x4652840)
    ** Replace : 'affine.for'(0x45f8580)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4652730) {
      %469 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4652980)
        ** Replace : 'arith.constant'(0x4652730)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4652980) {
          %469 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4652790) {
      %471 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4652c20)
        ** Replace : 'arith.constant'(0x4652790)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4652c20) {
          %471 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46527f0) {
      %473 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46529e0)
        ** Replace : 'arith.constant'(0x46527f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46529e0) {
          %473 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4652840) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x46528a0) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4652cd0)
        ** Insert  : 'cf.br'(0x4652a60)
        ** Erase   : 'affine.yield'(0x45f8520)
        ** Insert  : 'cf.br'(0x4652b00)
        ** Insert  : 'arith.cmpi'(0x46613b0)
        ** Insert  : 'cf.cond_br'(0x4661450)
        ** Replace : 'scf.for'(0x46528a0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4652cd0) {
          %477 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %474) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4661520)
            ** Replace : 'arith.addi'(0x4652cd0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4661520) {
              %477 = "llvm.add"(%475, %473) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4652a60) {
          "cf.br"(%478)[^bb12] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x46615c0)
            ** Replace : 'cf.br'(0x4652a60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x46615c0) {
              "llvm.br"(%477)[^bb12] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4652b00) {
          "cf.br"(%470)[^bb12] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4661660)
            ** Replace : 'cf.br'(0x4652b00)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4661660) {
              "llvm.br"(%469)[^bb12] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x46613b0) {
          %476 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %472) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x4661710)
            ** Replace : 'arith.cmpi'(0x46613b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x4661710) {
              %476 = "llvm.icmp"(%475, %471) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4661450) {
          "cf.cond_br"(%477)[^bb13, ^bb14] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x46617b0)
            ** Replace : 'cf.cond_br'(0x4661450)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x46617b0) {
              "llvm.cond_br"(%476)[^bb13, ^bb14] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f84b0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4652d80)
    ** Insert  : 'arith.constant'(0x4661880)
    ** Insert  : 'arith.constant'(0x46618e0)
    ** Insert  : 'scf.yield'(0x4661980)
    ** Insert  : 'scf.for'(0x46619e0)
    ** Erase   : 'scf.yield'(0x4661980)
    ** Replace : 'affine.for'(0x45f84b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4652d80) {
      %478 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4661ac0)
        ** Replace : 'arith.constant'(0x4652d80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4661ac0) {
          %478 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4661880) {
      %480 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46655f0)
        ** Replace : 'arith.constant'(0x4661880)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46655f0) {
          %480 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46618e0) {
      %482 = "arith.constant"() {value = 8 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4665680)
        ** Replace : 'arith.constant'(0x46618e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4665680) {
          %482 = "llvm.mlir.constant"() {value = 8 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4661980) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x46619e0) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4661bc0)
        ** Insert  : 'cf.br'(0x4661c60)
        ** Erase   : 'affine.yield'(0x45f8450)
        ** Insert  : 'cf.br'(0x4661d00)
        ** Insert  : 'arith.cmpi'(0x4661db0)
        ** Insert  : 'cf.cond_br'(0x4661e50)
        ** Replace : 'scf.for'(0x46619e0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4661bc0) {
          %486 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %483) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4665160)
            ** Replace : 'arith.addi'(0x4661bc0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4665160) {
              %486 = "llvm.add"(%484, %482) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4661c60) {
          "cf.br"(%487)[^bb14] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4665200)
            ** Replace : 'cf.br'(0x4661c60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4665200) {
              "llvm.br"(%486)[^bb14] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4661d00) {
          "cf.br"(%479)[^bb14] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x46653c0)
            ** Replace : 'cf.br'(0x4661d00)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x46653c0) {
              "llvm.br"(%478)[^bb14] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4661db0) {
          %485 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %481) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x4665470)
            ** Replace : 'arith.cmpi'(0x4661db0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x4665470) {
              %485 = "llvm.icmp"(%484, %480) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4661e50) {
          "cf.cond_br"(%486)[^bb15, ^bb16] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4665510)
            ** Replace : 'cf.cond_br'(0x4661e50)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4665510) {
              "llvm.cond_br"(%485)[^bb15, ^bb16] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f83e0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4664c40)
    ** Insert  : 'arith.constant'(0x4664ca0)
    ** Insert  : 'arith.constant'(0x46652b0)
    ** Insert  : 'scf.yield'(0x4665300)
    ** Insert  : 'scf.for'(0x46656d0)
    ** Erase   : 'scf.yield'(0x4665300)
    ** Replace : 'affine.for'(0x45f83e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4664c40) {
      %487 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4665370)
        ** Replace : 'arith.constant'(0x4664c40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4665370) {
          %487 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4664ca0) {
      %489 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4664940)
        ** Replace : 'arith.constant'(0x4664ca0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4664940) {
          %489 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46652b0) {
      %491 = "arith.constant"() {value = 8 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4664b50)
        ** Replace : 'arith.constant'(0x46652b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4664b50) {
          %491 = "llvm.mlir.constant"() {value = 8 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4665300) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x46656d0) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x46649a0)
        ** Insert  : 'cf.br'(0x4664a40)
        ** Erase   : 'affine.yield'(0x45f8380)
        ** Insert  : 'cf.br'(0x46620a0)
        ** Insert  : 'arith.cmpi'(0x4662150)
        ** Insert  : 'cf.cond_br'(0x46621f0)
        ** Replace : 'scf.for'(0x46656d0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x46649a0) {
          %507 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %492) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x46646b0)
            ** Replace : 'arith.addi'(0x46649a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x46646b0) {
              %507 = "llvm.add"(%493, %491) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4664a40) {
          "cf.br"(%508)[^bb16] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4664750)
            ** Replace : 'cf.br'(0x4664a40)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4664750) {
              "llvm.br"(%507)[^bb16] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x46620a0) {
          "cf.br"(%488)[^bb16] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4664580)
            ** Replace : 'cf.br'(0x46620a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4664580) {
              "llvm.br"(%487)[^bb16] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4662150) {
          %494 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %490) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x4664800)
            ** Replace : 'arith.cmpi'(0x4662150)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x4664800) {
              %494 = "llvm.icmp"(%493, %489) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x46621f0) {
          "cf.cond_br"(%495)[^bb17, ^bb18] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x46622b0)
            ** Replace : 'cf.cond_br'(0x46621f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x46622b0) {
              "llvm.cond_br"(%494)[^bb17, ^bb18] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.alloca'(0x45eeb50) {
  %496 = "memref.alloca"() {alignment = 64 : i64, operand_segment_sizes = array<i32: 0, 0>} : () -> memref<4xvector<8xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.alloca -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x4664bb0)
    ** Insert  : 'llvm.mlir.constant'(0x4664630)
    ** Insert  : 'llvm.mlir.null'(0x46648b0)
    ** Insert  : 'llvm.getelementptr'(0x4664070)
    ** Insert  : 'llvm.ptrtoint'(0x4664120)
    ** Insert  : 'llvm.alloca'(0x46641b0)
    ** Insert  : 'llvm.mlir.undef'(0x46643e0)
    ** Insert  : 'llvm.insertvalue'(0x4664440)
    ** Insert  : 'llvm.insertvalue'(0x46637a0)
    ** Insert  : 'llvm.mlir.constant'(0x4663850)
    ** Insert  : 'llvm.insertvalue'(0x46638b0)
    ** Insert  : 'llvm.insertvalue'(0x4663960)
    ** Insert  : 'llvm.insertvalue'(0x4663a10)
    ** Replace : 'memref.alloca'(0x45eeb50)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4664bb0) {
      %496 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4664630) {
      %497 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x46648b0) {
      %498 = "llvm.mlir.null"() : () -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4664070) {
      %499 = "llvm.getelementptr"(%498, %496) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x4664120) {
      %500 = "llvm.ptrtoint"(%499) : (!llvm.ptr<vector<8xf32>>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.alloca'(0x46641b0) {
      %501 = "llvm.alloca"(%500) {alignment = 64 : i64} : (i64) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x46643e0) {
      %502 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4664440) {
      %503 = "llvm.insertvalue"(%502, %501) {position = array<i64: 0>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, !llvm.ptr<vector<8xf32>>) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x46637a0) {
      %504 = "llvm.insertvalue"(%503, %501) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, !llvm.ptr<vector<8xf32>>) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4663850) {
      %505 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x46638b0) {
      %506 = "llvm.insertvalue"(%504, %505) {position = array<i64: 2>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, i64) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4663960) {
      %507 = "llvm.insertvalue"(%506, %496) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, i64) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4663a10) {
      %508 = "llvm.insertvalue"(%507, %497) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, i64) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45eec20) {
  %510 = "vector.load"(%392, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4663ac0)
    ** Insert  : 'llvm.mlir.constant'(0x4667a30)
    ** Insert  : 'llvm.mul'(0x4667a90)
    ** Insert  : 'llvm.add'(0x4667b40)
    ** Insert  : 'llvm.getelementptr'(0x4667bf0)
    ** Insert  : 'llvm.bitcast'(0x4667ca0)
    ** Insert  : 'llvm.load'(0x4663b50)
    ** Replace : 'vector.load'(0x45eec20)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4663ac0) {
      %510 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4667a30) {
      %511 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4667a90) {
      %512 = "llvm.mul"(%475, %511) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4667b40) {
      %513 = "llvm.add"(%512, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4667bf0) {
      %514 = "llvm.getelementptr"(%510, %513) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4667ca0) {
      %515 = "llvm.bitcast"(%514) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4663b50) {
      %516 = "llvm.load"(%515) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45eed40) {
  "affine.store"(%517, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4667860)
    ** Insert  : 'memref.store'(0x4663bd0)
    ** Replace : 'affine.store'(0x45eed40)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4667860) {
      %518 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46644f0)
        ** Replace : 'arith.constant'(0x4667860)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46644f0) {
          %518 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4663bd0) {
      "memref.store"(%517, %509, %519) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4667980)
        ** Insert  : 'llvm.getelementptr'(0x4663ca0)
        ** Insert  : 'llvm.store'(0x4663d40)
        ** Replace : 'memref.store'(0x4663bd0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4667980) {
          %520 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4663ca0) {
          %521 = "llvm.getelementptr"(%520, %518) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4663d40) {
          "llvm.store"(%516, %521) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45eedf0) {
  %522 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 512)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x464c3a0)
    ** Insert  : 'arith.addi'(0x4663e80)
    ** Replace : 'affine.apply'(0x45eedf0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x464c3a0) {
      %522 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4663f30)
        ** Replace : 'arith.constant'(0x464c3a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4663f30) {
          %522 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4663e80) {
      %524 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %523) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46667c0)
        ** Replace : 'arith.addi'(0x4663e80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46667c0) {
          %524 = "llvm.add"(%484, %522) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45eeee0) {
  %527 = "vector.load"(%392, <<UNKNOWN SSA VALUE>>, %526) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4663df0)
    ** Insert  : 'llvm.mlir.constant'(0x4666b60)
    ** Insert  : 'llvm.mul'(0x4667220)
    ** Insert  : 'llvm.add'(0x46672d0)
    ** Insert  : 'llvm.getelementptr'(0x4666870)
    ** Insert  : 'llvm.bitcast'(0x4667380)
    ** Insert  : 'llvm.load'(0x4666920)
    ** Replace : 'vector.load'(0x45eeee0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4663df0) {
      %527 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4666b60) {
      %528 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4667220) {
      %529 = "llvm.mul"(%475, %528) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46672d0) {
      %530 = "llvm.add"(%529, %524) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4666870) {
      %531 = "llvm.getelementptr"(%527, %530) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4667380) {
      %532 = "llvm.bitcast"(%531) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4666920) {
      %533 = "llvm.load"(%532) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45ef000) {
  "affine.store"(%534, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4666bc0)
    ** Insert  : 'memref.store'(0x4666c10)
    ** Replace : 'affine.store'(0x45ef000)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4666bc0) {
      %535 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4666ce0)
        ** Replace : 'arith.constant'(0x4666bc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4666ce0) {
          %535 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4666c10) {
      "memref.store"(%534, %509, %536) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46669b0)
        ** Insert  : 'llvm.getelementptr'(0x4666d40)
        ** Insert  : 'llvm.store'(0x4666de0)
        ** Replace : 'memref.store'(0x4666c10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46669b0) {
          %537 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4666d40) {
          %538 = "llvm.getelementptr"(%537, %535) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4666de0) {
          "llvm.store"(%533, %538) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45ef0b0) {
  %539 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 1024)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x4666f20)
    ** Insert  : 'arith.addi'(0x4666f80)
    ** Replace : 'affine.apply'(0x45ef0b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4666f20) {
      %539 = "arith.constant"() {value = 1024 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4667030)
        ** Replace : 'arith.constant'(0x4666f20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4667030) {
          %539 = "llvm.mlir.constant"() {value = 1024 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4666f80) {
      %541 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %540) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4667ea0)
        ** Replace : 'arith.addi'(0x4666f80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4667ea0) {
          %541 = "llvm.add"(%484, %539) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45ef1a0) {
  %544 = "vector.load"(%392, <<UNKNOWN SSA VALUE>>, %543) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4666e90)
    ** Insert  : 'llvm.mlir.constant'(0x4667d60)
    ** Insert  : 'llvm.mul'(0x4669400)
    ** Insert  : 'llvm.add'(0x46694b0)
    ** Insert  : 'llvm.getelementptr'(0x4669560)
    ** Insert  : 'llvm.bitcast'(0x4663f90)
    ** Insert  : 'llvm.load'(0x4669610)
    ** Replace : 'vector.load'(0x45ef1a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4666e90) {
      %544 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4667d60) {
      %545 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4669400) {
      %546 = "llvm.mul"(%475, %545) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46694b0) {
      %547 = "llvm.add"(%546, %541) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4669560) {
      %548 = "llvm.getelementptr"(%544, %547) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4663f90) {
      %549 = "llvm.bitcast"(%548) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4669610) {
      %550 = "llvm.load"(%549) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45ef2c0) {
  "affine.store"(%551, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46678e0)
    ** Insert  : 'memref.store'(0x4667f40)
    ** Replace : 'affine.store'(0x45ef2c0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46678e0) {
      %552 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4668010)
        ** Replace : 'arith.constant'(0x46678e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4668010) {
          %552 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4667f40) {
      "memref.store"(%551, %509, %553) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4669730)
        ** Insert  : 'llvm.getelementptr'(0x4668070)
        ** Insert  : 'llvm.store'(0x4668110)
        ** Replace : 'memref.store'(0x4667f40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4669730) {
          %554 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4668070) {
          %555 = "llvm.getelementptr"(%554, %552) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4668110) {
          "llvm.store"(%550, %555) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45ef370) {
  %556 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 1536)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x46681c0)
    ** Insert  : 'arith.addi'(0x4668220)
    ** Replace : 'affine.apply'(0x45ef370)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46681c0) {
      %556 = "arith.constant"() {value = 1536 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46682d0)
        ** Replace : 'arith.constant'(0x46681c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46682d0) {
          %556 = "llvm.mlir.constant"() {value = 1536 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4668220) {
      %558 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %557) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4668330)
        ** Replace : 'arith.addi'(0x4668220)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4668330) {
          %558 = "llvm.add"(%484, %556) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45ef460) {
  %561 = "vector.load"(%392, <<UNKNOWN SSA VALUE>>, %560) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x466bec0)
    ** Insert  : 'llvm.mlir.constant'(0x46671c0)
    ** Insert  : 'llvm.mul'(0x4668c10)
    ** Insert  : 'llvm.add'(0x4668cc0)
    ** Insert  : 'llvm.getelementptr'(0x4668d70)
    ** Insert  : 'llvm.bitcast'(0x4668e20)
    ** Insert  : 'llvm.load'(0x4668eb0)
    ** Replace : 'vector.load'(0x45ef460)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x466bec0) {
      %561 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46671c0) {
      %562 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4668c10) {
      %563 = "llvm.mul"(%475, %562) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4668cc0) {
      %564 = "llvm.add"(%563, %558) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4668d70) {
      %565 = "llvm.getelementptr"(%561, %564) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4668e20) {
      %566 = "llvm.bitcast"(%565) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4668eb0) {
      %567 = "llvm.load"(%566) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45ef580) {
  "affine.store"(%568, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x466be60)
    ** Insert  : 'memref.store'(0x46683d0)
    ** Replace : 'affine.store'(0x45ef580)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466be60) {
      %569 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46684a0)
        ** Replace : 'arith.constant'(0x466be60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46684a0) {
          %569 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46683d0) {
      "memref.store"(%568, %509, %570) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4668f40)
        ** Insert  : 'llvm.getelementptr'(0x4668500)
        ** Insert  : 'llvm.store'(0x46685a0)
        ** Replace : 'memref.store'(0x46683d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4668f40) {
          %571 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4668500) {
          %572 = "llvm.getelementptr"(%571, %569) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46685a0) {
          "llvm.store"(%567, %572) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45f7f30) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x46686e0)
    ** Insert  : 'arith.constant'(0x4668740)
    ** Insert  : 'arith.constant'(0x46687a0)
    ** Insert  : 'scf.yield'(0x46687f0)
    ** Insert  : 'scf.for'(0x4668850)
    ** Erase   : 'scf.yield'(0x46687f0)
    ** Replace : 'affine.for'(0x45f7f30)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46686e0) {
      %573 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4668960)
        ** Replace : 'arith.constant'(0x46686e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4668960) {
          %573 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4668740) {
      %575 = "arith.constant"() {value = 8 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46689c0)
        ** Replace : 'arith.constant'(0x4668740)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46689c0) {
          %575 = "llvm.mlir.constant"() {value = 8 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46687a0) {
      %577 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4668a20)
        ** Replace : 'arith.constant'(0x46687a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4668a20) {
          %577 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x46687f0) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x4668850) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4668ad0)
        ** Insert  : 'cf.br'(0x4669a40)
        ** Erase   : 'affine.yield'(0x45f7ed0)
        ** Insert  : 'cf.br'(0x4669ae0)
        ** Insert  : 'arith.cmpi'(0x4669b90)
        ** Insert  : 'cf.cond_br'(0x4669c30)
        ** Replace : 'scf.for'(0x4668850)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4668ad0) {
          %684 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %578) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4669d50)
            ** Replace : 'arith.addi'(0x4668ad0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4669d50) {
              %684 = "llvm.add"(%579, %577) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4669a40) {
          "cf.br"(%685)[^bb18] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4669df0)
            ** Replace : 'cf.br'(0x4669a40)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4669df0) {
              "llvm.br"(%684)[^bb18] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4669ae0) {
          "cf.br"(%574)[^bb18] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4669e90)
            ** Replace : 'cf.br'(0x4669ae0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4669e90) {
              "llvm.br"(%573)[^bb18] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4669b90) {
          %580 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %576) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x4669f40)
            ** Replace : 'arith.cmpi'(0x4669b90)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x4669f40) {
              %580 = "llvm.icmp"(%579, %575) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4669c30) {
          "cf.cond_br"(%581)[^bb19, ^bb20] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4669fe0)
            ** Replace : 'cf.cond_br'(0x4669c30)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4669fe0) {
              "llvm.cond_br"(%580)[^bb19, ^bb20] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45ef880) {
  %582 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x466a0b0)
    ** Replace : 'arith.addi'(0x45ef880)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466a0b0) {
      %582 = "llvm.add"(%579, %493) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45ef990) {
  %584 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x466a160)
    ** Replace : 'affine.apply'(0x45ef990)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466a160) {
      %584 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466a210)
        ** Replace : 'arith.addi'(0x466a160)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466a210) {
          %584 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45efaa0) {
  %587 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %586) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4668650)
    ** Insert  : 'llvm.mlir.constant'(0x466a2c0)
    ** Insert  : 'llvm.mul'(0x466a320)
    ** Insert  : 'llvm.add'(0x466a3d0)
    ** Insert  : 'llvm.getelementptr'(0x466a480)
    ** Insert  : 'llvm.load'(0x466a530)
    ** Replace : 'memref.load'(0x45efaa0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4668650) {
      %587 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x466a2c0) {
      %588 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x466a320) {
      %589 = "llvm.mul"(%475, %588) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466a3d0) {
      %590 = "llvm.add"(%589, %584) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x466a480) {
      %591 = "llvm.getelementptr"(%587, %590) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x466a530) {
      %592 = "llvm.load"(%591) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45efbd0) {
  %594 = "vector.broadcast"(%593) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x466cf60)
    ** Replace : 'vector.broadcast'(0x45efbd0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x466cf60) {
      %594 = "vector.splat"(%593) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x466bf50)
        ** Insert  : 'llvm.mlir.constant'(0x466bfb0)
        ** Insert  : 'llvm.insertelement'(0x466c010)
        ** Insert  : 'llvm.shufflevector'(0x466ba30)
        ** Replace : 'vector.splat'(0x466cf60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x466bf50) {
          %594 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466bfb0) {
          %595 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x466c010) {
          %596 = "llvm.insertelement"(%594, %592, %595) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x466ba30) {
          %597 = "llvm.shufflevector"(%596, %594) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45efcc0) {
  %600 = "vector.load"(<<UNKNOWN SSA VALUE>>, %583, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x466d430)
    ** Insert  : 'llvm.mlir.constant'(0x466bae0)
    ** Insert  : 'llvm.mul'(0x466bb40)
    ** Insert  : 'llvm.add'(0x466bbf0)
    ** Insert  : 'llvm.getelementptr'(0x466bca0)
    ** Insert  : 'llvm.bitcast'(0x466cff0)
    ** Insert  : 'llvm.load'(0x466d080)
    ** Replace : 'vector.load'(0x45efcc0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x466d430) {
      %600 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x466bae0) {
      %601 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x466bb40) {
      %602 = "llvm.mul"(%582, %601) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466bbf0) {
      %603 = "llvm.add"(%602, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x466bca0) {
      %604 = "llvm.getelementptr"(%600, %603) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x466cff0) {
      %605 = "llvm.bitcast"(%604) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x466d080) {
      %606 = "llvm.load"(%605) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45efdf0) {
  %608 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46696d0)
    ** Insert  : 'memref.load'(0x466d110)
    ** Replace : 'affine.load'(0x45efdf0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46696d0) {
      %608 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466d4c0)
        ** Replace : 'arith.constant'(0x46696d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466d4c0) {
          %608 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x466d110) {
      %610 = "memref.load"(%509, %609) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4668b80)
        ** Insert  : 'llvm.getelementptr'(0x466d1c0)
        ** Insert  : 'llvm.load'(0x466d270)
        ** Replace : 'memref.load'(0x466d110)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4668b80) {
          %610 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x466d1c0) {
          %611 = "llvm.getelementptr"(%610, %608) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x466d270) {
          %612 = "llvm.load"(%611) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45efee0) {
  %615 = "vector.fma"(%599, %607, %614) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x466c1b0)
    ** Replace : 'vector.fma'(0x45efee0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x466c1b0) {
      %615 = "llvm.intr.fmuladd"(%597, %606, %612) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f0000) {
  "affine.store"(%616, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x466bd50)
    ** Insert  : 'memref.store'(0x466c270)
    ** Replace : 'affine.store'(0x45f0000)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466bd50) {
      %617 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466c340)
        ** Replace : 'arith.constant'(0x466bd50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466c340) {
          %617 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x466c270) {
      "memref.store"(%616, %509, %618) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x466d300)
        ** Insert  : 'llvm.getelementptr'(0x466c3a0)
        ** Insert  : 'llvm.store'(0x466c440)
        ** Replace : 'memref.store'(0x466c270)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x466d300) {
          %619 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x466c3a0) {
          %620 = "llvm.getelementptr"(%619, %617) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x466c440) {
          "llvm.store"(%615, %620) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f00b0) {
  %621 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 1)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x466cd90)
    ** Insert  : 'arith.addi'(0x466cdf0)
    ** Replace : 'affine.apply'(0x45f00b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466cd90) {
      %621 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466c4f0)
        ** Replace : 'arith.constant'(0x466cd90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466c4f0) {
          %621 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466cdf0) {
      %623 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %622) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466c550)
        ** Replace : 'arith.addi'(0x466cdf0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466c550) {
          %623 = "llvm.add"(%579, %621) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45f01a0) {
  %626 = "arith.addi"(%625, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x466c600)
    ** Replace : 'arith.addi'(0x45f01a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466c600) {
      %626 = "llvm.add"(%623, %493) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f08d0) {
  %628 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x466c6b0)
    ** Insert  : 'arith.constant'(0x466c760)
    ** Insert  : 'arith.addi'(0x466c7c0)
    ** Replace : 'affine.apply'(0x45f08d0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466c6b0) {
      %628 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466c870)
        ** Replace : 'arith.addi'(0x466c6b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466c870) {
          %628 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466c760) {
      %630 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466c920)
        ** Replace : 'arith.constant'(0x466c760)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466c920) {
          %630 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466c7c0) {
      %632 = "arith.addi"(%629, %631) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466c980)
        ** Replace : 'arith.addi'(0x466c7c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466c980) {
          %632 = "llvm.add"(%628, %630) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f09e0) {
  %635 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %634) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x466cd00)
    ** Insert  : 'llvm.mlir.constant'(0x466ca30)
    ** Insert  : 'llvm.mul'(0x466ca90)
    ** Insert  : 'llvm.add'(0x466cb40)
    ** Insert  : 'llvm.getelementptr'(0x466cbf0)
    ** Insert  : 'llvm.load'(0x466d560)
    ** Replace : 'memref.load'(0x45f09e0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x466cd00) {
      %635 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x466ca30) {
      %636 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x466ca90) {
      %637 = "llvm.mul"(%475, %636) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466cb40) {
      %638 = "llvm.add"(%637, %632) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x466cbf0) {
      %639 = "llvm.getelementptr"(%635, %638) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x466d560) {
      %640 = "llvm.load"(%639) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f0b10) {
  %642 = "vector.broadcast"(%641) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x466ee10)
    ** Replace : 'vector.broadcast'(0x45f0b10)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x466ee10) {
      %642 = "vector.splat"(%641) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x466cca0)
        ** Insert  : 'llvm.mlir.constant'(0x466d390)
        ** Insert  : 'llvm.insertelement'(0x466eea0)
        ** Insert  : 'llvm.shufflevector'(0x466d5f0)
        ** Replace : 'vector.splat'(0x466ee10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x466cca0) {
          %642 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466d390) {
          %643 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x466eea0) {
          %644 = "llvm.insertelement"(%642, %640, %643) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x466d5f0) {
          %645 = "llvm.shufflevector"(%644, %642) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45ef730) {
  %648 = "vector.load"(<<UNKNOWN SSA VALUE>>, %627, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x466bdd0)
    ** Insert  : 'llvm.mlir.constant'(0x466ef70)
    ** Insert  : 'llvm.mul'(0x466eac0)
    ** Insert  : 'llvm.add'(0x466ec00)
    ** Insert  : 'llvm.getelementptr'(0x466ecb0)
    ** Insert  : 'llvm.bitcast'(0x466ed60)
    ** Insert  : 'llvm.load'(0x466d6a0)
    ** Replace : 'vector.load'(0x45ef730)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x466bdd0) {
      %648 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x466ef70) {
      %649 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x466eac0) {
      %650 = "llvm.mul"(%626, %649) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466ec00) {
      %651 = "llvm.add"(%650, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x466ecb0) {
      %652 = "llvm.getelementptr"(%648, %651) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x466ed60) {
      %653 = "llvm.bitcast"(%652) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x466d6a0) {
      %654 = "llvm.load"(%653) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f0e00) {
  %656 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x466eb70)
    ** Insert  : 'memref.load'(0x466d730)
    ** Replace : 'affine.load'(0x45f0e00)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466eb70) {
      %656 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466d7e0)
        ** Replace : 'arith.constant'(0x466eb70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466d7e0) {
          %656 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x466d730) {
      %658 = "memref.load"(%509, %657) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4670c40)
        ** Insert  : 'llvm.getelementptr'(0x466d840)
        ** Insert  : 'llvm.load'(0x466d8f0)
        ** Replace : 'memref.load'(0x466d730)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4670c40) {
          %658 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x466d840) {
          %659 = "llvm.getelementptr"(%658, %656) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x466d8f0) {
          %660 = "llvm.load"(%659) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f0ef0) {
  %663 = "vector.fma"(%647, %655, %662) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x466d980)
    ** Replace : 'vector.fma'(0x45f0ef0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x466d980) {
      %663 = "llvm.intr.fmuladd"(%645, %654, %660) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f1010) {
  "affine.store"(%664, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x466cef0)
    ** Insert  : 'memref.store'(0x466da40)
    ** Replace : 'affine.store'(0x45f1010)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466cef0) {
      %665 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466e5c0)
        ** Replace : 'arith.constant'(0x466cef0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466e5c0) {
          %665 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x466da40) {
      "memref.store"(%664, %509, %666) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4670cd0)
        ** Insert  : 'llvm.getelementptr'(0x466e620)
        ** Insert  : 'llvm.store'(0x466e6c0)
        ** Replace : 'memref.store'(0x466da40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4670cd0) {
          %667 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x466e620) {
          %668 = "llvm.getelementptr"(%667, %665) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x466e6c0) {
          "llvm.store"(%663, %668) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f10c0) {
  %669 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 2)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x466e800)
    ** Insert  : 'arith.addi'(0x466e860)
    ** Replace : 'affine.apply'(0x45f10c0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466e800) {
      %669 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466e910)
        ** Replace : 'arith.constant'(0x466e800)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466e910) {
          %669 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466e860) {
      %671 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %670) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466e970)
        ** Replace : 'arith.addi'(0x466e860)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466e970) {
          %671 = "llvm.add"(%579, %669) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45f11b0) {
  %674 = "arith.addi"(%673, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x466db10)
    ** Replace : 'arith.addi'(0x45f11b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466db10) {
      %674 = "llvm.add"(%671, %493) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f12c0) {
  %676 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 2)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x466dbc0)
    ** Insert  : 'arith.constant'(0x466dc70)
    ** Insert  : 'arith.addi'(0x466dcd0)
    ** Replace : 'affine.apply'(0x45f12c0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466dbc0) {
      %676 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466dd80)
        ** Replace : 'arith.addi'(0x466dbc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466dd80) {
          %676 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466dc70) {
      %678 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466ea50)
        ** Replace : 'arith.constant'(0x466dc70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466ea50) {
          %678 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466dcd0) {
      %680 = "arith.addi"(%677, %679) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466de30)
        ** Replace : 'arith.addi'(0x466dcd0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466de30) {
          %680 = "llvm.add"(%676, %678) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f13d0) {
  %683 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %682) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x466e770)
    ** Insert  : 'llvm.mlir.constant'(0x466dee0)
    ** Insert  : 'llvm.mul'(0x466df40)
    ** Insert  : 'llvm.add'(0x466dff0)
    ** Insert  : 'llvm.getelementptr'(0x466e0a0)
    ** Insert  : 'llvm.load'(0x466e150)
    ** Replace : 'memref.load'(0x45f13d0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x466e770) {
      %683 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x466dee0) {
      %684 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x466df40) {
      %685 = "llvm.mul"(%475, %684) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466dff0) {
      %686 = "llvm.add"(%685, %680) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x466e0a0) {
      %687 = "llvm.getelementptr"(%683, %686) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x466e150) {
      %688 = "llvm.load"(%687) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f1500) {
  %690 = "vector.broadcast"(%689) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x466e1e0)
    ** Replace : 'vector.broadcast'(0x45f1500)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x466e1e0) {
      %690 = "vector.splat"(%689) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x466e270)
        ** Insert  : 'llvm.mlir.constant'(0x466e2d0)
        ** Insert  : 'llvm.insertelement'(0x466e330)
        ** Insert  : 'llvm.shufflevector'(0x466e400)
        ** Replace : 'vector.splat'(0x466e1e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x466e270) {
          %690 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466e2d0) {
          %691 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x466e330) {
          %692 = "llvm.insertelement"(%690, %688, %691) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x466e400) {
          %693 = "llvm.shufflevector"(%692, %690) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f15f0) {
  %696 = "vector.load"(<<UNKNOWN SSA VALUE>>, %675, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46707c0)
    ** Insert  : 'llvm.mlir.constant'(0x466e4e0)
    ** Insert  : 'llvm.mul'(0x4670920)
    ** Insert  : 'llvm.add'(0x46709d0)
    ** Insert  : 'llvm.getelementptr'(0x4670a80)
    ** Insert  : 'llvm.bitcast'(0x4670b30)
    ** Insert  : 'llvm.load'(0x466f420)
    ** Replace : 'vector.load'(0x45f15f0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46707c0) {
      %696 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x466e4e0) {
      %697 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4670920) {
      %698 = "llvm.mul"(%674, %697) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46709d0) {
      %699 = "llvm.add"(%698, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4670a80) {
      %700 = "llvm.getelementptr"(%696, %699) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4670b30) {
      %701 = "llvm.bitcast"(%700) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x466f420) {
      %702 = "llvm.load"(%701) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f1720) {
  %704 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x466e540)
    ** Insert  : 'memref.load'(0x466f540)
    ** Replace : 'affine.load'(0x45f1720)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466e540) {
      %704 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4670bc0)
        ** Replace : 'arith.constant'(0x466e540)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4670bc0) {
          %704 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x466f540) {
      %706 = "memref.load"(%509, %705) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x466f4b0)
        ** Insert  : 'llvm.getelementptr'(0x466f5f0)
        ** Insert  : 'llvm.load'(0x466f6a0)
        ** Replace : 'memref.load'(0x466f540)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x466f4b0) {
          %706 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x466f5f0) {
          %707 = "llvm.getelementptr"(%706, %704) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x466f6a0) {
          %708 = "llvm.load"(%707) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f1810) {
  %711 = "vector.fma"(%695, %703, %710) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4674d70)
    ** Replace : 'vector.fma'(0x45f1810)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4674d70) {
      %711 = "llvm.intr.fmuladd"(%693, %702, %708) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f1930) {
  "affine.store"(%712, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4670850)
    ** Insert  : 'memref.store'(0x4674e30)
    ** Replace : 'affine.store'(0x45f1930)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4670850) {
      %713 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4674f00)
        ** Replace : 'arith.constant'(0x4670850)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4674f00) {
          %713 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4674e30) {
      "memref.store"(%712, %509, %714) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4675380)
        ** Insert  : 'llvm.getelementptr'(0x4674f60)
        ** Insert  : 'llvm.store'(0x4675000)
        ** Replace : 'memref.store'(0x4674e30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4675380) {
          %715 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4674f60) {
          %716 = "llvm.getelementptr"(%715, %713) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4675000) {
          "llvm.store"(%711, %716) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f19e0) {
  %717 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 3)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x4675140)
    ** Insert  : 'arith.addi'(0x46751a0)
    ** Replace : 'affine.apply'(0x45f19e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4675140) {
      %717 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4675250)
        ** Replace : 'arith.constant'(0x4675140)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4675250) {
          %717 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46751a0) {
      %719 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %718) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46752b0)
        ** Replace : 'arith.addi'(0x46751a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46752b0) {
          %719 = "llvm.add"(%579, %717) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45f1df0) {
  %722 = "arith.addi"(%721, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x466f730)
    ** Replace : 'arith.addi'(0x45f1df0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466f730) {
      %722 = "llvm.add"(%719, %493) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f1f00) {
  %724 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 3)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x466f7e0)
    ** Insert  : 'arith.constant'(0x466f890)
    ** Insert  : 'arith.addi'(0x466f8f0)
    ** Replace : 'affine.apply'(0x45f1f00)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466f7e0) {
      %724 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466f9a0)
        ** Replace : 'arith.addi'(0x466f7e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466f9a0) {
          %724 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x466f890) {
      %726 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x466fa50)
        ** Replace : 'arith.constant'(0x466f890)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466fa50) {
          %726 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x466f8f0) {
      %728 = "arith.addi"(%725, %727) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x466fab0)
        ** Replace : 'arith.addi'(0x466f8f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x466fab0) {
          %728 = "llvm.add"(%724, %726) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f2010) {
  %731 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %730) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46750b0)
    ** Insert  : 'llvm.mlir.constant'(0x466fb60)
    ** Insert  : 'llvm.mul'(0x466fbc0)
    ** Insert  : 'llvm.add'(0x466fc70)
    ** Insert  : 'llvm.getelementptr'(0x466fd20)
    ** Insert  : 'llvm.load'(0x466fdd0)
    ** Replace : 'memref.load'(0x45f2010)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46750b0) {
      %731 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x466fb60) {
      %732 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x466fbc0) {
      %733 = "llvm.mul"(%475, %732) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x466fc70) {
      %734 = "llvm.add"(%733, %728) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x466fd20) {
      %735 = "llvm.getelementptr"(%731, %734) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x466fdd0) {
      %736 = "llvm.load"(%735) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f2140) {
  %738 = "vector.broadcast"(%737) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4670670)
    ** Replace : 'vector.broadcast'(0x45f2140)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4670670) {
      %738 = "vector.splat"(%737) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x466fe60)
        ** Insert  : 'llvm.mlir.constant'(0x466fec0)
        ** Insert  : 'llvm.insertelement'(0x466ff20)
        ** Insert  : 'llvm.shufflevector'(0x466fff0)
        ** Replace : 'vector.splat'(0x4670670)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x466fe60) {
          %738 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x466fec0) {
          %739 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x466ff20) {
          %740 = "llvm.insertelement"(%738, %736, %739) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x466fff0) {
          %741 = "llvm.shufflevector"(%740, %738) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f2230) {
  %744 = "vector.load"(<<UNKNOWN SSA VALUE>>, %723, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46700a0)
    ** Insert  : 'llvm.mlir.constant'(0x4670130)
    ** Insert  : 'llvm.mul'(0x4670190)
    ** Insert  : 'llvm.add'(0x4670240)
    ** Insert  : 'llvm.getelementptr'(0x46702f0)
    ** Insert  : 'llvm.bitcast'(0x46703a0)
    ** Insert  : 'llvm.load'(0x4670430)
    ** Replace : 'vector.load'(0x45f2230)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46700a0) {
      %744 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4670130) {
      %745 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4670190) {
      %746 = "llvm.mul"(%722, %745) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4670240) {
      %747 = "llvm.add"(%746, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46702f0) {
      %748 = "llvm.getelementptr"(%744, %747) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46703a0) {
      %749 = "llvm.bitcast"(%748) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4670430) {
      %750 = "llvm.load"(%749) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f2360) {
  %752 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x4670700)
    ** Insert  : 'memref.load'(0x4670550)
    ** Replace : 'affine.load'(0x45f2360)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4670700) {
      %752 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4670760)
        ** Replace : 'arith.constant'(0x4670700)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4670760) {
          %752 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x4670550) {
      %754 = "memref.load"(%509, %753) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46704c0)
        ** Insert  : 'llvm.getelementptr'(0x4658370)
        ** Insert  : 'llvm.load'(0x4658420)
        ** Replace : 'memref.load'(0x4670550)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46704c0) {
          %754 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4658370) {
          %755 = "llvm.getelementptr"(%754, %752) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4658420) {
          %756 = "llvm.load"(%755) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f2450) {
  %759 = "vector.fma"(%743, %751, %758) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4658540)
    ** Replace : 'vector.fma'(0x45f2450)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4658540) {
      %759 = "llvm.intr.fmuladd"(%741, %750, %756) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f2570) {
  "affine.store"(%760, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4670600)
    ** Insert  : 'memref.store'(0x4658600)
    ** Replace : 'affine.store'(0x45f2570)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4670600) {
      %761 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46586d0)
        ** Replace : 'arith.constant'(0x4670600)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46586d0) {
          %761 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4658600) {
      "memref.store"(%760, %509, %762) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46584b0)
        ** Insert  : 'llvm.getelementptr'(0x4658730)
        ** Insert  : 'llvm.store'(0x46587d0)
        ** Replace : 'memref.store'(0x4658600)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46584b0) {
          %763 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4658730) {
          %764 = "llvm.getelementptr"(%763, %761) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46587d0) {
          "llvm.store"(%759, %764) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f2620) {
  %765 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 512)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4658910)
    ** Insert  : 'arith.constant'(0x46589c0)
    ** Insert  : 'arith.addi'(0x4658a20)
    ** Replace : 'affine.apply'(0x45f2620)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4658910) {
      %765 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4658ad0)
        ** Replace : 'arith.addi'(0x4658910)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4658ad0) {
          %765 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46589c0) {
      %767 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4658b80)
        ** Replace : 'arith.constant'(0x46589c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4658b80) {
          %767 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4658a20) {
      %769 = "arith.addi"(%766, %768) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4658be0)
        ** Replace : 'arith.addi'(0x4658a20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4658be0) {
          %769 = "llvm.add"(%765, %767) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f2730) {
  %772 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %771) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4658880)
    ** Insert  : 'llvm.mlir.constant'(0x4658c90)
    ** Insert  : 'llvm.mul'(0x4658cf0)
    ** Insert  : 'llvm.add'(0x4658da0)
    ** Insert  : 'llvm.getelementptr'(0x4658e50)
    ** Insert  : 'llvm.load'(0x4658f00)
    ** Replace : 'memref.load'(0x45f2730)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4658880) {
      %772 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4658c90) {
      %773 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4658cf0) {
      %774 = "llvm.mul"(%475, %773) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4658da0) {
      %775 = "llvm.add"(%774, %769) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4658e50) {
      %776 = "llvm.getelementptr"(%772, %775) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4658f00) {
      %777 = "llvm.load"(%776) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f2860) {
  %779 = "vector.broadcast"(%778) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4658f90)
    ** Replace : 'vector.broadcast'(0x45f2860)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4658f90) {
      %779 = "vector.splat"(%778) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4659020)
        ** Insert  : 'llvm.mlir.constant'(0x4659080)
        ** Insert  : 'llvm.insertelement'(0x46590e0)
        ** Insert  : 'llvm.shufflevector'(0x46591b0)
        ** Replace : 'vector.splat'(0x4658f90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4659020) {
          %779 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4659080) {
          %780 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46590e0) {
          %781 = "llvm.insertelement"(%779, %777, %780) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46591b0) {
          %782 = "llvm.shufflevector"(%781, %779) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f2950) {
  %785 = "vector.load"(<<UNKNOWN SSA VALUE>>, %583, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4675410)
    ** Insert  : 'llvm.mlir.constant'(0x46754a0)
    ** Insert  : 'llvm.mul'(0x4675500)
    ** Insert  : 'llvm.add'(0x46755b0)
    ** Insert  : 'llvm.getelementptr'(0x4659260)
    ** Insert  : 'llvm.bitcast'(0x4659310)
    ** Insert  : 'llvm.load'(0x46593a0)
    ** Replace : 'vector.load'(0x45f2950)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4675410) {
      %785 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46754a0) {
      %786 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4675500) {
      %787 = "llvm.mul"(%582, %786) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46755b0) {
      %788 = "llvm.add"(%787, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4659260) {
      %789 = "llvm.getelementptr"(%785, %788) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4659310) {
      %790 = "llvm.bitcast"(%789) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46593a0) {
      %791 = "llvm.load"(%790) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f2a80) {
  %793 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46708b0)
    ** Insert  : 'memref.load'(0x4659430)
    ** Replace : 'affine.load'(0x45f2a80)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46708b0) {
      %793 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4675660)
        ** Replace : 'arith.constant'(0x46708b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4675660) {
          %793 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x4659430) {
      %795 = "memref.load"(%509, %794) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4675740)
        ** Insert  : 'llvm.getelementptr'(0x46594e0)
        ** Insert  : 'llvm.load'(0x4659590)
        ** Replace : 'memref.load'(0x4659430)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4675740) {
          %795 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46594e0) {
          %796 = "llvm.getelementptr"(%795, %793) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4659590) {
          %797 = "llvm.load"(%796) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f2b70) {
  %800 = "vector.fma"(%784, %792, %799) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4659ec0)
    ** Replace : 'vector.fma'(0x45f2b70)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4659ec0) {
      %800 = "llvm.intr.fmuladd"(%782, %791, %797) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f2c90) {
  "affine.store"(%801, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4659f90)
    ** Insert  : 'memref.store'(0x4659fe0)
    ** Replace : 'affine.store'(0x45f2c90)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4659f90) {
      %802 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465a0b0)
        ** Replace : 'arith.constant'(0x4659f90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465a0b0) {
          %802 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4659fe0) {
      "memref.store"(%801, %509, %803) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4659e30)
        ** Insert  : 'llvm.getelementptr'(0x465a110)
        ** Insert  : 'llvm.store'(0x465a1b0)
        ** Replace : 'memref.store'(0x4659fe0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4659e30) {
          %804 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465a110) {
          %805 = "llvm.getelementptr"(%804, %802) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x465a1b0) {
          "llvm.store"(%800, %805) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f2d40) {
  %806 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 513)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4659620)
    ** Insert  : 'arith.constant'(0x46596d0)
    ** Insert  : 'arith.addi'(0x4659730)
    ** Replace : 'affine.apply'(0x45f2d40)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4659620) {
      %806 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46597e0)
        ** Replace : 'arith.addi'(0x4659620)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46597e0) {
          %806 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46596d0) {
      %808 = "arith.constant"() {value = 513 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465a2f0)
        ** Replace : 'arith.constant'(0x46596d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465a2f0) {
          %808 = "llvm.mlir.constant"() {value = 513 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4659730) {
      %810 = "arith.addi"(%807, %809) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4659890)
        ** Replace : 'arith.addi'(0x4659730)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4659890) {
          %810 = "llvm.add"(%806, %808) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f2e50) {
  %813 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %812) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x465a260)
    ** Insert  : 'llvm.mlir.constant'(0x4659940)
    ** Insert  : 'llvm.mul'(0x46599a0)
    ** Insert  : 'llvm.add'(0x4659a50)
    ** Insert  : 'llvm.getelementptr'(0x4659b00)
    ** Insert  : 'llvm.load'(0x4659bb0)
    ** Replace : 'memref.load'(0x45f2e50)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x465a260) {
      %813 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4659940) {
      %814 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46599a0) {
      %815 = "llvm.mul"(%475, %814) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4659a50) {
      %816 = "llvm.add"(%815, %810) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4659b00) {
      %817 = "llvm.getelementptr"(%813, %816) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4659bb0) {
      %818 = "llvm.load"(%817) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f2f80) {
  %820 = "vector.broadcast"(%819) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4659c40)
    ** Replace : 'vector.broadcast'(0x45f2f80)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4659c40) {
      %820 = "vector.splat"(%819) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4659cd0)
        ** Insert  : 'llvm.mlir.constant'(0x4659d30)
        ** Insert  : 'llvm.insertelement'(0x465c450)
        ** Insert  : 'llvm.shufflevector'(0x465c520)
        ** Replace : 'vector.splat'(0x4659c40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4659cd0) {
          %820 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4659d30) {
          %821 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x465c450) {
          %822 = "llvm.insertelement"(%820, %818, %821) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x465c520) {
          %823 = "llvm.shufflevector"(%822, %820) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f3070) {
  %826 = "vector.load"(<<UNKNOWN SSA VALUE>>, %627, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4659d90)
    ** Insert  : 'llvm.mlir.constant'(0x465df90)
    ** Insert  : 'llvm.mul'(0x465d9b0)
    ** Insert  : 'llvm.add'(0x465da60)
    ** Insert  : 'llvm.getelementptr'(0x465db10)
    ** Insert  : 'llvm.bitcast'(0x465dbc0)
    ** Insert  : 'llvm.load'(0x465dc50)
    ** Replace : 'vector.load'(0x45f3070)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4659d90) {
      %826 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x465df90) {
      %827 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x465d9b0) {
      %828 = "llvm.mul"(%626, %827) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x465da60) {
      %829 = "llvm.add"(%828, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x465db10) {
      %830 = "llvm.getelementptr"(%826, %829) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x465dbc0) {
      %831 = "llvm.bitcast"(%830) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x465dc50) {
      %832 = "llvm.load"(%831) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f31a0) {
  %834 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x465dff0)
    ** Insert  : 'memref.load'(0x465dce0)
    ** Replace : 'affine.load'(0x45f31a0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465dff0) {
      %834 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46756c0)
        ** Replace : 'arith.constant'(0x465dff0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46756c0) {
          %834 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x465dce0) {
      %836 = "memref.load"(%509, %835) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46757d0)
        ** Insert  : 'llvm.getelementptr'(0x465dd90)
        ** Insert  : 'llvm.load'(0x465de40)
        ** Replace : 'memref.load'(0x465dce0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46757d0) {
          %836 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465dd90) {
          %837 = "llvm.getelementptr"(%836, %834) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x465de40) {
          %838 = "llvm.load"(%837) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f3290) {
  %841 = "vector.fma"(%825, %833, %840) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x465c5d0)
    ** Replace : 'vector.fma'(0x45f3290)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x465c5d0) {
      %841 = "llvm.intr.fmuladd"(%823, %832, %838) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f33b0) {
  "affine.store"(%842, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x465c6a0)
    ** Insert  : 'memref.store'(0x465c6f0)
    ** Replace : 'affine.store'(0x45f33b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465c6a0) {
      %843 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465c7c0)
        ** Replace : 'arith.constant'(0x465c6a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465c7c0) {
          %843 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x465c6f0) {
      "memref.store"(%842, %509, %844) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x465ded0)
        ** Insert  : 'llvm.getelementptr'(0x465c820)
        ** Insert  : 'llvm.store'(0x465c8c0)
        ** Replace : 'memref.store'(0x465c6f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x465ded0) {
          %845 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465c820) {
          %846 = "llvm.getelementptr"(%845, %843) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x465c8c0) {
          "llvm.store"(%841, %846) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f3460) {
  %847 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 514)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x465c970)
    ** Insert  : 'arith.constant'(0x465ca20)
    ** Insert  : 'arith.addi'(0x465ca80)
    ** Replace : 'affine.apply'(0x45f3460)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x465c970) {
      %847 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x465cb30)
        ** Replace : 'arith.addi'(0x465c970)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x465cb30) {
          %847 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465ca20) {
      %849 = "arith.constant"() {value = 514 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465cbe0)
        ** Replace : 'arith.constant'(0x465ca20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465cbe0) {
          %849 = "llvm.mlir.constant"() {value = 514 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x465ca80) {
      %851 = "arith.addi"(%848, %850) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x465cc40)
        ** Replace : 'arith.addi'(0x465ca80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x465cc40) {
          %851 = "llvm.add"(%847, %849) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f3570) {
  %854 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %853) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x467b6d0)
    ** Insert  : 'llvm.mlir.constant'(0x465ccf0)
    ** Insert  : 'llvm.mul'(0x465cd50)
    ** Insert  : 'llvm.add'(0x465ce00)
    ** Insert  : 'llvm.getelementptr'(0x465ceb0)
    ** Insert  : 'llvm.load'(0x465cf60)
    ** Replace : 'memref.load'(0x45f3570)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x467b6d0) {
      %854 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x465ccf0) {
      %855 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x465cd50) {
      %856 = "llvm.mul"(%475, %855) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x465ce00) {
      %857 = "llvm.add"(%856, %851) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x465ceb0) {
      %858 = "llvm.getelementptr"(%854, %857) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x465cf60) {
      %859 = "llvm.load"(%858) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f36a0) {
  %861 = "vector.broadcast"(%860) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x465d800)
    ** Replace : 'vector.broadcast'(0x45f36a0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x465d800) {
      %861 = "vector.splat"(%860) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x465d890)
        ** Insert  : 'llvm.mlir.constant'(0x465d8f0)
        ** Insert  : 'llvm.insertelement'(0x465cff0)
        ** Insert  : 'llvm.shufflevector'(0x465d0c0)
        ** Replace : 'vector.splat'(0x465d800)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x465d890) {
          %861 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465d8f0) {
          %862 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x465cff0) {
          %863 = "llvm.insertelement"(%861, %859, %862) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x465d0c0) {
          %864 = "llvm.shufflevector"(%863, %861) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f3790) {
  %867 = "vector.load"(<<UNKNOWN SSA VALUE>>, %675, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4679f10)
    ** Insert  : 'llvm.mlir.constant'(0x4679fa0)
    ** Insert  : 'llvm.mul'(0x467a000)
    ** Insert  : 'llvm.add'(0x467a0b0)
    ** Insert  : 'llvm.getelementptr'(0x467a160)
    ** Insert  : 'llvm.bitcast'(0x467a210)
    ** Insert  : 'llvm.load'(0x467a2a0)
    ** Replace : 'vector.load'(0x45f3790)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4679f10) {
      %867 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4679fa0) {
      %868 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467a000) {
      %869 = "llvm.mul"(%674, %868) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467a0b0) {
      %870 = "llvm.add"(%869, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467a160) {
      %871 = "llvm.getelementptr"(%867, %870) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x467a210) {
      %872 = "llvm.bitcast"(%871) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467a2a0) {
      %873 = "llvm.load"(%872) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f38c0) {
  %875 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x467a330)
    ** Insert  : 'memref.load'(0x465d170)
    ** Replace : 'affine.load'(0x45f38c0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467a330) {
      %875 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465d220)
        ** Replace : 'arith.constant'(0x467a330)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465d220) {
          %875 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x465d170) {
      %877 = "memref.load"(%509, %876) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4679df0)
        ** Insert  : 'llvm.getelementptr'(0x465d280)
        ** Insert  : 'llvm.load'(0x465d330)
        ** Replace : 'memref.load'(0x465d170)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4679df0) {
          %877 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465d280) {
          %878 = "llvm.getelementptr"(%877, %875) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x465d330) {
          %879 = "llvm.load"(%878) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f3fd0) {
  %882 = "vector.fma"(%866, %874, %881) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x465d450)
    ** Replace : 'vector.fma'(0x45f3fd0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x465d450) {
      %882 = "llvm.intr.fmuladd"(%864, %873, %879) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f40f0) {
  "affine.store"(%883, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x465d520)
    ** Insert  : 'memref.store'(0x465d570)
    ** Replace : 'affine.store'(0x45f40f0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465d520) {
      %884 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465d640)
        ** Replace : 'arith.constant'(0x465d520)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465d640) {
          %884 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x465d570) {
      "memref.store"(%883, %509, %885) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x465d3c0)
        ** Insert  : 'llvm.getelementptr'(0x465d6a0)
        ** Insert  : 'llvm.store'(0x465d740)
        ** Replace : 'memref.store'(0x465d570)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x465d3c0) {
          %886 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465d6a0) {
          %887 = "llvm.getelementptr"(%886, %884) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x465d740) {
          "llvm.store"(%882, %887) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f41a0) {
  %888 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 515)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4679940)
    ** Insert  : 'arith.constant'(0x46799f0)
    ** Insert  : 'arith.addi'(0x4679a50)
    ** Replace : 'affine.apply'(0x45f41a0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4679940) {
      %888 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4679b00)
        ** Replace : 'arith.addi'(0x4679940)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4679b00) {
          %888 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46799f0) {
      %890 = "arith.constant"() {value = 515 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4679bb0)
        ** Replace : 'arith.constant'(0x46799f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4679bb0) {
          %890 = "llvm.mlir.constant"() {value = 515 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4679a50) {
      %892 = "arith.addi"(%889, %891) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4679c10)
        ** Replace : 'arith.addi'(0x4679a50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4679c10) {
          %892 = "llvm.add"(%888, %890) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f42b0) {
  %895 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %894) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46798b0)
    ** Insert  : 'llvm.mlir.constant'(0x4679cc0)
    ** Insert  : 'llvm.mul'(0x4679d20)
    ** Insert  : 'llvm.add'(0x46790a0)
    ** Insert  : 'llvm.getelementptr'(0x4679150)
    ** Insert  : 'llvm.load'(0x4679200)
    ** Replace : 'memref.load'(0x45f42b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46798b0) {
      %895 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4679cc0) {
      %896 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4679d20) {
      %897 = "llvm.mul"(%475, %896) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46790a0) {
      %898 = "llvm.add"(%897, %892) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4679150) {
      %899 = "llvm.getelementptr"(%895, %898) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4679200) {
      %900 = "llvm.load"(%899) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f43e0) {
  %902 = "vector.broadcast"(%901) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x465c270)
    ** Replace : 'vector.broadcast'(0x45f43e0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x465c270) {
      %902 = "vector.splat"(%901) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x465c300)
        ** Insert  : 'llvm.mlir.constant'(0x465c360)
        ** Insert  : 'llvm.insertelement'(0x4679290)
        ** Insert  : 'llvm.shufflevector'(0x4679360)
        ** Replace : 'vector.splat'(0x465c270)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x465c300) {
          %902 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465c360) {
          %903 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4679290) {
          %904 = "llvm.insertelement"(%902, %900, %903) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x4679360) {
          %905 = "llvm.shufflevector"(%904, %902) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f44d0) {
  %908 = "vector.load"(<<UNKNOWN SSA VALUE>>, %723, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x465c3c0)
    ** Insert  : 'llvm.mlir.constant'(0x467b3c0)
    ** Insert  : 'llvm.mul'(0x467b520)
    ** Insert  : 'llvm.add'(0x467b5d0)
    ** Insert  : 'llvm.getelementptr'(0x4679410)
    ** Insert  : 'llvm.bitcast'(0x46794c0)
    ** Insert  : 'llvm.load'(0x4679550)
    ** Replace : 'vector.load'(0x45f44d0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x465c3c0) {
      %908 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x467b3c0) {
      %909 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467b520) {
      %910 = "llvm.mul"(%722, %909) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467b5d0) {
      %911 = "llvm.add"(%910, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4679410) {
      %912 = "llvm.getelementptr"(%908, %911) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46794c0) {
      %913 = "llvm.bitcast"(%912) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4679550) {
      %914 = "llvm.load"(%913) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f4600) {
  %916 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x467b420)
    ** Insert  : 'memref.load'(0x46795e0)
    ** Replace : 'affine.load'(0x45f4600)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467b420) {
      %916 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4679690)
        ** Replace : 'arith.constant'(0x467b420)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4679690) {
          %916 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46795e0) {
      %918 = "memref.load"(%509, %917) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4679e80)
        ** Insert  : 'llvm.getelementptr'(0x46796f0)
        ** Insert  : 'llvm.load'(0x46797a0)
        ** Replace : 'memref.load'(0x46795e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4679e80) {
          %918 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46796f0) {
          %919 = "llvm.getelementptr"(%918, %916) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46797a0) {
          %920 = "llvm.load"(%919) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f46f0) {
  %923 = "vector.fma"(%907, %915, %922) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x465bcf0)
    ** Replace : 'vector.fma'(0x45f46f0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x465bcf0) {
      %923 = "llvm.intr.fmuladd"(%905, %914, %920) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f4810) {
  "affine.store"(%924, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4679830)
    ** Insert  : 'memref.store'(0x465bdb0)
    ** Replace : 'affine.store'(0x45f4810)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4679830) {
      %925 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465be80)
        ** Replace : 'arith.constant'(0x4679830)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465be80) {
          %925 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x465bdb0) {
      "memref.store"(%924, %509, %926) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x465bc60)
        ** Insert  : 'llvm.getelementptr'(0x465bee0)
        ** Insert  : 'llvm.store'(0x465bf80)
        ** Replace : 'memref.store'(0x465bdb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x465bc60) {
          %927 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465bee0) {
          %928 = "llvm.getelementptr"(%927, %925) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x465bf80) {
          "llvm.store"(%923, %928) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f48c0) {
  %929 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1024)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x465c0c0)
    ** Insert  : 'arith.constant'(0x465c170)
    ** Insert  : 'arith.addi'(0x467a3a0)
    ** Replace : 'affine.apply'(0x45f48c0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x465c0c0) {
      %929 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467a450)
        ** Replace : 'arith.addi'(0x465c0c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467a450) {
          %929 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465c170) {
      %931 = "arith.constant"() {value = 1024 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465c1d0)
        ** Replace : 'arith.constant'(0x465c170)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465c1d0) {
          %931 = "llvm.mlir.constant"() {value = 1024 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467a3a0) {
      %933 = "arith.addi"(%930, %932) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467a500)
        ** Replace : 'arith.addi'(0x467a3a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467a500) {
          %933 = "llvm.add"(%929, %931) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f49d0) {
  %936 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %935) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x465c030)
    ** Insert  : 'llvm.mlir.constant'(0x467a5b0)
    ** Insert  : 'llvm.mul'(0x467a610)
    ** Insert  : 'llvm.add'(0x467a6c0)
    ** Insert  : 'llvm.getelementptr'(0x467a770)
    ** Insert  : 'llvm.load'(0x467a820)
    ** Replace : 'memref.load'(0x45f49d0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x465c030) {
      %936 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x467a5b0) {
      %937 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467a610) {
      %938 = "llvm.mul"(%475, %937) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467a6c0) {
      %939 = "llvm.add"(%938, %933) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467a770) {
      %940 = "llvm.getelementptr"(%936, %939) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467a820) {
      %941 = "llvm.load"(%940) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f02b0) {
  %943 = "vector.broadcast"(%942) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x467b330)
    ** Replace : 'vector.broadcast'(0x45f02b0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x467b330) {
      %943 = "vector.splat"(%942) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x467a8b0)
        ** Insert  : 'llvm.mlir.constant'(0x467a910)
        ** Insert  : 'llvm.insertelement'(0x467a970)
        ** Insert  : 'llvm.shufflevector'(0x467aa40)
        ** Replace : 'vector.splat'(0x467b330)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x467a8b0) {
          %943 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467a910) {
          %944 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x467a970) {
          %945 = "llvm.insertelement"(%943, %941, %944) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x467aa40) {
          %946 = "llvm.shufflevector"(%945, %943) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f03a0) {
  %949 = "vector.load"(<<UNKNOWN SSA VALUE>>, %583, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x467b280)
    ** Insert  : 'llvm.mlir.constant'(0x467aaf0)
    ** Insert  : 'llvm.mul'(0x467ab50)
    ** Insert  : 'llvm.add'(0x467ac00)
    ** Insert  : 'llvm.getelementptr'(0x467acb0)
    ** Insert  : 'llvm.bitcast'(0x467ad60)
    ** Insert  : 'llvm.load'(0x467adf0)
    ** Replace : 'vector.load'(0x45f03a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x467b280) {
      %949 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x467aaf0) {
      %950 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467ab50) {
      %951 = "llvm.mul"(%582, %950) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467ac00) {
      %952 = "llvm.add"(%951, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467acb0) {
      %953 = "llvm.getelementptr"(%949, %952) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x467ad60) {
      %954 = "llvm.bitcast"(%953) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467adf0) {
      %955 = "llvm.load"(%954) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f04d0) {
  %957 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x467ae80)
    ** Insert  : 'memref.load'(0x467aee0)
    ** Replace : 'affine.load'(0x45f04d0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467ae80) {
      %957 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467af90)
        ** Replace : 'arith.constant'(0x467ae80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467af90) {
          %957 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x467aee0) {
      %959 = "memref.load"(%509, %958) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467aff0)
        ** Insert  : 'llvm.getelementptr'(0x467b080)
        ** Insert  : 'llvm.load'(0x467b130)
        ** Replace : 'memref.load'(0x467aee0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467aff0) {
          %959 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467b080) {
          %960 = "llvm.getelementptr"(%959, %957) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x467b130) {
          %961 = "llvm.load"(%960) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f05c0) {
  %964 = "vector.fma"(%948, %956, %963) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x467f770)
    ** Replace : 'vector.fma'(0x45f05c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x467f770) {
      %964 = "llvm.intr.fmuladd"(%946, %955, %961) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f06e0) {
  "affine.store"(%965, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x467b1c0)
    ** Insert  : 'memref.store'(0x467f830)
    ** Replace : 'affine.store'(0x45f06e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467b1c0) {
      %966 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467f900)
        ** Replace : 'arith.constant'(0x467b1c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467f900) {
          %966 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x467f830) {
      "memref.store"(%965, %509, %967) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4680780)
        ** Insert  : 'llvm.getelementptr'(0x467f960)
        ** Insert  : 'llvm.store'(0x467b470)
        ** Replace : 'memref.store'(0x467f830)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4680780) {
          %968 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467f960) {
          %969 = "llvm.getelementptr"(%968, %966) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x467b470) {
          "llvm.store"(%964, %969) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f0790) {
  %970 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1025)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4680520)
    ** Insert  : 'arith.constant'(0x46805d0)
    ** Insert  : 'arith.addi'(0x4680630)
    ** Replace : 'affine.apply'(0x45f0790)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4680520) {
      %970 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467fa10)
        ** Replace : 'arith.addi'(0x4680520)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467fa10) {
          %970 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46805d0) {
      %972 = "arith.constant"() {value = 1025 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46806e0)
        ** Replace : 'arith.constant'(0x46805d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46806e0) {
          %972 = "llvm.mlir.constant"() {value = 1025 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4680630) {
      %974 = "arith.addi"(%971, %973) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467fac0)
        ** Replace : 'arith.addi'(0x4680630)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467fac0) {
          %974 = "llvm.add"(%970, %972) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f5700) {
  %977 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %976) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4680490)
    ** Insert  : 'llvm.mlir.constant'(0x467fb70)
    ** Insert  : 'llvm.mul'(0x467fbd0)
    ** Insert  : 'llvm.add'(0x467fc80)
    ** Insert  : 'llvm.getelementptr'(0x467fd30)
    ** Insert  : 'llvm.load'(0x467fde0)
    ** Replace : 'memref.load'(0x45f5700)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4680490) {
      %977 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x467fb70) {
      %978 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467fbd0) {
      %979 = "llvm.mul"(%475, %978) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467fc80) {
      %980 = "llvm.add"(%979, %974) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467fd30) {
      %981 = "llvm.getelementptr"(%977, %980) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467fde0) {
      %982 = "llvm.load"(%981) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f5830) {
  %984 = "vector.broadcast"(%983) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4681e30)
    ** Replace : 'vector.broadcast'(0x45f5830)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4681e30) {
      %984 = "vector.splat"(%983) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x467fe70)
        ** Insert  : 'llvm.mlir.constant'(0x467fed0)
        ** Insert  : 'llvm.insertelement'(0x467ff30)
        ** Insert  : 'llvm.shufflevector'(0x4680000)
        ** Replace : 'vector.splat'(0x4681e30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x467fe70) {
          %984 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467fed0) {
          %985 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x467ff30) {
          %986 = "llvm.insertelement"(%984, %982, %985) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x4680000) {
          %987 = "llvm.shufflevector"(%986, %984) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f5920) {
  %990 = "vector.load"(<<UNKNOWN SSA VALUE>>, %627, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4681990)
    ** Insert  : 'llvm.mlir.constant'(0x4681a20)
    ** Insert  : 'llvm.mul'(0x46800b0)
    ** Insert  : 'llvm.add'(0x4680160)
    ** Insert  : 'llvm.getelementptr'(0x4680210)
    ** Insert  : 'llvm.bitcast'(0x46802c0)
    ** Insert  : 'llvm.load'(0x4680810)
    ** Replace : 'vector.load'(0x45f5920)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4681990) {
      %990 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4681a20) {
      %991 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46800b0) {
      %992 = "llvm.mul"(%626, %991) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4680160) {
      %993 = "llvm.add"(%992, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4680210) {
      %994 = "llvm.getelementptr"(%990, %993) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46802c0) {
      %995 = "llvm.bitcast"(%994) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4680810) {
      %996 = "llvm.load"(%995) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f5a50) {
  %998 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x4681a80)
    ** Insert  : 'memref.load'(0x4680350)
    ** Replace : 'affine.load'(0x45f5a50)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4681a80) {
      %998 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4680400)
        ** Replace : 'arith.constant'(0x4681a80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4680400) {
          %998 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x4680350) {
      %1000 = "memref.load"(%509, %999) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46808a0)
        ** Insert  : 'llvm.getelementptr'(0x4680930)
        ** Insert  : 'llvm.load'(0x46809e0)
        ** Replace : 'memref.load'(0x4680350)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46808a0) {
          %1000 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4680930) {
          %1001 = "llvm.getelementptr"(%1000, %998) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46809e0) {
          %1002 = "llvm.load"(%1001) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f5b40) {
  %1005 = "vector.fma"(%989, %997, %1004) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4680b00)
    ** Replace : 'vector.fma'(0x45f5b40)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4680b00) {
      %1005 = "llvm.intr.fmuladd"(%987, %996, %1002) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f5c60) {
  "affine.store"(%1006, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4680bd0)
    ** Insert  : 'memref.store'(0x4680c20)
    ** Replace : 'affine.store'(0x45f5c60)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4680bd0) {
      %1007 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4680cf0)
        ** Replace : 'arith.constant'(0x4680bd0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4680cf0) {
          %1007 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4680c20) {
      "memref.store"(%1006, %509, %1008) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4680a70)
        ** Insert  : 'llvm.getelementptr'(0x4680d50)
        ** Insert  : 'llvm.store'(0x4680df0)
        ** Replace : 'memref.store'(0x4680c20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4680a70) {
          %1009 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4680d50) {
          %1010 = "llvm.getelementptr"(%1009, %1007) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4680df0) {
          "llvm.store"(%1005, %1010) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f5d10) {
  %1011 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1026)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4680f30)
    ** Insert  : 'arith.constant'(0x4680fe0)
    ** Insert  : 'arith.addi'(0x4681040)
    ** Replace : 'affine.apply'(0x45f5d10)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4680f30) {
      %1011 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46810f0)
        ** Replace : 'arith.addi'(0x4680f30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46810f0) {
          %1011 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4680fe0) {
      %1013 = "arith.constant"() {value = 1026 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46811a0)
        ** Replace : 'arith.constant'(0x4680fe0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46811a0) {
          %1013 = "llvm.mlir.constant"() {value = 1026 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4681040) {
      %1015 = "arith.addi"(%1012, %1014) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4681200)
        ** Replace : 'arith.addi'(0x4681040)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4681200) {
          %1015 = "llvm.add"(%1011, %1013) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f5e20) {
  %1018 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %1017) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4680ea0)
    ** Insert  : 'llvm.mlir.constant'(0x46812b0)
    ** Insert  : 'llvm.mul'(0x4681310)
    ** Insert  : 'llvm.add'(0x46813c0)
    ** Insert  : 'llvm.getelementptr'(0x4681470)
    ** Insert  : 'llvm.load'(0x4681520)
    ** Replace : 'memref.load'(0x45f5e20)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4680ea0) {
      %1018 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46812b0) {
      %1019 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4681310) {
      %1020 = "llvm.mul"(%475, %1019) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46813c0) {
      %1021 = "llvm.add"(%1020, %1015) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4681470) {
      %1022 = "llvm.getelementptr"(%1018, %1021) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4681520) {
      %1023 = "llvm.load"(%1022) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f5f50) {
  %1025 = "vector.broadcast"(%1024) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46815b0)
    ** Replace : 'vector.broadcast'(0x45f5f50)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46815b0) {
      %1025 = "vector.splat"(%1024) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4681640)
        ** Insert  : 'llvm.mlir.constant'(0x46816a0)
        ** Insert  : 'llvm.insertelement'(0x4681700)
        ** Insert  : 'llvm.shufflevector'(0x46817d0)
        ** Replace : 'vector.splat'(0x46815b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4681640) {
          %1025 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46816a0) {
          %1026 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4681700) {
          %1027 = "llvm.insertelement"(%1025, %1023, %1026) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46817d0) {
          %1028 = "llvm.shufflevector"(%1027, %1025) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f6040) {
  %1031 = "vector.load"(<<UNKNOWN SSA VALUE>>, %675, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4681880)
    ** Insert  : 'llvm.mlir.constant'(0x465b800)
    ** Insert  : 'llvm.mul'(0x465b860)
    ** Insert  : 'llvm.add'(0x465b910)
    ** Insert  : 'llvm.getelementptr'(0x465b9c0)
    ** Insert  : 'llvm.bitcast'(0x465ba70)
    ** Insert  : 'llvm.load'(0x465bb00)
    ** Replace : 'vector.load'(0x45f6040)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4681880) {
      %1031 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x465b800) {
      %1032 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x465b860) {
      %1033 = "llvm.mul"(%674, %1032) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x465b910) {
      %1034 = "llvm.add"(%1033, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x465b9c0) {
      %1035 = "llvm.getelementptr"(%1031, %1034) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x465ba70) {
      %1036 = "llvm.bitcast"(%1035) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x465bb00) {
      %1037 = "llvm.load"(%1036) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f6170) {
  %1039 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x4681910)
    ** Insert  : 'memref.load'(0x465a440)
    ** Replace : 'affine.load'(0x45f6170)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4681910) {
      %1039 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465a4f0)
        ** Replace : 'arith.constant'(0x4681910)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465a4f0) {
          %1039 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x465a440) {
      %1041 = "memref.load"(%509, %1040) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x465bb90)
        ** Insert  : 'llvm.getelementptr'(0x465a550)
        ** Insert  : 'llvm.load'(0x465a600)
        ** Replace : 'memref.load'(0x465a440)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x465bb90) {
          %1041 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465a550) {
          %1042 = "llvm.getelementptr"(%1041, %1039) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x465a600) {
          %1043 = "llvm.load"(%1042) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f6260) {
  %1046 = "vector.fma"(%1030, %1038, %1045) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x465a720)
    ** Replace : 'vector.fma'(0x45f6260)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x465a720) {
      %1046 = "llvm.intr.fmuladd"(%1028, %1037, %1043) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f6380) {
  "affine.store"(%1047, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x465a7f0)
    ** Insert  : 'memref.store'(0x465a840)
    ** Replace : 'affine.store'(0x45f6380)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465a7f0) {
      %1048 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465a910)
        ** Replace : 'arith.constant'(0x465a7f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465a910) {
          %1048 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x465a840) {
      "memref.store"(%1047, %509, %1049) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x465a690)
        ** Insert  : 'llvm.getelementptr'(0x465a970)
        ** Insert  : 'llvm.store'(0x465aa10)
        ** Replace : 'memref.store'(0x465a840)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x465a690) {
          %1050 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465a970) {
          %1051 = "llvm.getelementptr"(%1050, %1048) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x465aa10) {
          "llvm.store"(%1046, %1051) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f6430) {
  %1052 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1027)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x465b360)
    ** Insert  : 'arith.constant'(0x465b410)
    ** Insert  : 'arith.addi'(0x465b470)
    ** Replace : 'affine.apply'(0x45f6430)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x465b360) {
      %1052 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x465b520)
        ** Replace : 'arith.addi'(0x465b360)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x465b520) {
          %1052 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465b410) {
      %1054 = "arith.constant"() {value = 1027 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465b5d0)
        ** Replace : 'arith.constant'(0x465b410)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465b5d0) {
          %1054 = "llvm.mlir.constant"() {value = 1027 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x465b470) {
      %1056 = "arith.addi"(%1053, %1055) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x465b630)
        ** Replace : 'arith.addi'(0x465b470)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x465b630) {
          %1056 = "llvm.add"(%1052, %1054) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f6540) {
  %1059 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %1058) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x465b2d0)
    ** Insert  : 'llvm.mlir.constant'(0x465b6e0)
    ** Insert  : 'llvm.mul'(0x465b740)
    ** Insert  : 'llvm.add'(0x465aac0)
    ** Insert  : 'llvm.getelementptr'(0x465ab70)
    ** Insert  : 'llvm.load'(0x465ac20)
    ** Replace : 'memref.load'(0x45f6540)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x465b2d0) {
      %1059 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x465b6e0) {
      %1060 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x465b740) {
      %1061 = "llvm.mul"(%475, %1060) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x465aac0) {
      %1062 = "llvm.add"(%1061, %1056) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x465ab70) {
      %1063 = "llvm.getelementptr"(%1059, %1062) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x465ac20) {
      %1064 = "llvm.load"(%1063) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f6670) {
  %1066 = "vector.broadcast"(%1065) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46611d0)
    ** Replace : 'vector.broadcast'(0x45f6670)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46611d0) {
      %1066 = "vector.splat"(%1065) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4661260)
        ** Insert  : 'llvm.mlir.constant'(0x46612c0)
        ** Insert  : 'llvm.insertelement'(0x465acb0)
        ** Insert  : 'llvm.shufflevector'(0x465ad80)
        ** Replace : 'vector.splat'(0x46611d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4661260) {
          %1066 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46612c0) {
          %1067 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x465acb0) {
          %1068 = "llvm.insertelement"(%1066, %1064, %1067) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x465ad80) {
          %1069 = "llvm.shufflevector"(%1068, %1066) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f6760) {
  %1072 = "vector.load"(<<UNKNOWN SSA VALUE>>, %723, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4661320)
    ** Insert  : 'llvm.mlir.constant'(0x465ae30)
    ** Insert  : 'llvm.mul'(0x465ae90)
    ** Insert  : 'llvm.add'(0x465af40)
    ** Insert  : 'llvm.getelementptr'(0x465aff0)
    ** Insert  : 'llvm.bitcast'(0x465b0a0)
    ** Insert  : 'llvm.load'(0x465b130)
    ** Replace : 'vector.load'(0x45f6760)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4661320) {
      %1072 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x465ae30) {
      %1073 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x465ae90) {
      %1074 = "llvm.mul"(%722, %1073) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x465af40) {
      %1075 = "llvm.add"(%1074, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x465aff0) {
      %1076 = "llvm.getelementptr"(%1072, %1075) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x465b0a0) {
      %1077 = "llvm.bitcast"(%1076) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x465b130) {
      %1078 = "llvm.load"(%1077) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f6890) {
  %1080 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x465b250)
    ** Insert  : 'memref.load'(0x465f3a0)
    ** Replace : 'affine.load'(0x45f6890)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465b250) {
      %1080 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465f450)
        ** Replace : 'arith.constant'(0x465b250)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465f450) {
          %1080 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x465f3a0) {
      %1082 = "memref.load"(%509, %1081) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x465b1c0)
        ** Insert  : 'llvm.getelementptr'(0x465f4b0)
        ** Insert  : 'llvm.load'(0x465f560)
        ** Replace : 'memref.load'(0x465f3a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x465b1c0) {
          %1082 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465f4b0) {
          %1083 = "llvm.getelementptr"(%1082, %1080) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x465f560) {
          %1084 = "llvm.load"(%1083) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f6980) {
  %1087 = "vector.fma"(%1071, %1079, %1086) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x465f680)
    ** Replace : 'vector.fma'(0x45f6980)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x465f680) {
      %1087 = "llvm.intr.fmuladd"(%1069, %1078, %1084) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f6aa0) {
  "affine.store"(%1088, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x465f750)
    ** Insert  : 'memref.store'(0x465f7a0)
    ** Replace : 'affine.store'(0x45f6aa0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465f750) {
      %1089 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465f870)
        ** Replace : 'arith.constant'(0x465f750)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465f870) {
          %1089 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x465f7a0) {
      "memref.store"(%1088, %509, %1090) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x465f5f0)
        ** Insert  : 'llvm.getelementptr'(0x465f8d0)
        ** Insert  : 'llvm.store'(0x465f970)
        ** Replace : 'memref.store'(0x465f7a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x465f5f0) {
          %1091 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x465f8d0) {
          %1092 = "llvm.getelementptr"(%1091, %1089) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x465f970) {
          "llvm.store"(%1087, %1092) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f6b50) {
  %1093 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1536)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x465fab0)
    ** Insert  : 'arith.constant'(0x465fb60)
    ** Insert  : 'arith.addi'(0x465fbc0)
    ** Replace : 'affine.apply'(0x45f6b50)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x465fab0) {
      %1093 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x465fc70)
        ** Replace : 'arith.addi'(0x465fab0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x465fc70) {
          %1093 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x465fb60) {
      %1095 = "arith.constant"() {value = 1536 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x465fd20)
        ** Replace : 'arith.constant'(0x465fb60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x465fd20) {
          %1095 = "llvm.mlir.constant"() {value = 1536 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x465fbc0) {
      %1097 = "arith.addi"(%1094, %1096) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x465fd80)
        ** Replace : 'arith.addi'(0x465fbc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x465fd80) {
          %1097 = "llvm.add"(%1093, %1095) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f6c60) {
  %1100 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %1099) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x465fa20)
    ** Insert  : 'llvm.mlir.constant'(0x465fe30)
    ** Insert  : 'llvm.mul'(0x465fe90)
    ** Insert  : 'llvm.add'(0x465ff40)
    ** Insert  : 'llvm.getelementptr'(0x465fff0)
    ** Insert  : 'llvm.load'(0x46600a0)
    ** Replace : 'memref.load'(0x45f6c60)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x465fa20) {
      %1100 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x465fe30) {
      %1101 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x465fe90) {
      %1102 = "llvm.mul"(%475, %1101) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x465ff40) {
      %1103 = "llvm.add"(%1102, %1097) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x465fff0) {
      %1104 = "llvm.getelementptr"(%1100, %1103) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46600a0) {
      %1105 = "llvm.load"(%1104) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f6d90) {
  %1107 = "vector.broadcast"(%1106) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4660130)
    ** Replace : 'vector.broadcast'(0x45f6d90)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4660130) {
      %1107 = "vector.splat"(%1106) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46601c0)
        ** Insert  : 'llvm.mlir.constant'(0x4660220)
        ** Insert  : 'llvm.insertelement'(0x4660280)
        ** Insert  : 'llvm.shufflevector'(0x4660350)
        ** Replace : 'vector.splat'(0x4660130)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46601c0) {
          %1107 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4660220) {
          %1108 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4660280) {
          %1109 = "llvm.insertelement"(%1107, %1105, %1108) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x4660350) {
          %1110 = "llvm.shufflevector"(%1109, %1107) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f6e80) {
  %1113 = "vector.load"(<<UNKNOWN SSA VALUE>>, %583, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4685ed0)
    ** Insert  : 'llvm.mlir.constant'(0x4685f60)
    ** Insert  : 'llvm.mul'(0x4685fc0)
    ** Insert  : 'llvm.add'(0x4686070)
    ** Insert  : 'llvm.getelementptr'(0x4686120)
    ** Insert  : 'llvm.bitcast'(0x46861d0)
    ** Insert  : 'llvm.load'(0x4686260)
    ** Replace : 'vector.load'(0x45f6e80)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4685ed0) {
      %1113 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4685f60) {
      %1114 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4685fc0) {
      %1115 = "llvm.mul"(%582, %1114) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4686070) {
      %1116 = "llvm.add"(%1115, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4686120) {
      %1117 = "llvm.getelementptr"(%1113, %1116) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46861d0) {
      %1118 = "llvm.bitcast"(%1117) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4686260) {
      %1119 = "llvm.load"(%1118) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f6fb0) {
  %1121 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x4660400)
    ** Insert  : 'memref.load'(0x4660460)
    ** Replace : 'affine.load'(0x45f6fb0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4660400) {
      %1121 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4660510)
        ** Replace : 'arith.constant'(0x4660400)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4660510) {
          %1121 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x4660460) {
      %1123 = "memref.load"(%509, %1122) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46862f0)
        ** Insert  : 'llvm.getelementptr'(0x4660570)
        ** Insert  : 'llvm.load'(0x4660620)
        ** Replace : 'memref.load'(0x4660460)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46862f0) {
          %1123 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4660570) {
          %1124 = "llvm.getelementptr"(%1123, %1121) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4660620) {
          %1125 = "llvm.load"(%1124) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f70a0) {
  %1128 = "vector.fma"(%1112, %1120, %1127) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4660f50)
    ** Replace : 'vector.fma'(0x45f70a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4660f50) {
      %1128 = "llvm.intr.fmuladd"(%1110, %1119, %1125) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f71c0) {
  "affine.store"(%1129, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4661020)
    ** Insert  : 'memref.store'(0x4661070)
    ** Replace : 'affine.store'(0x45f71c0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4661020) {
      %1130 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4661140)
        ** Replace : 'arith.constant'(0x4661020)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4661140) {
          %1130 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4661070) {
      "memref.store"(%1129, %509, %1131) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4660ec0)
        ** Insert  : 'llvm.getelementptr'(0x46606b0)
        ** Insert  : 'llvm.store'(0x4660750)
        ** Replace : 'memref.store'(0x4661070)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4660ec0) {
          %1132 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46606b0) {
          %1133 = "llvm.getelementptr"(%1132, %1130) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4660750) {
          "llvm.store"(%1128, %1133) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f7270) {
  %1134 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1537)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4660800)
    ** Insert  : 'arith.constant'(0x46608b0)
    ** Insert  : 'arith.addi'(0x4660910)
    ** Replace : 'affine.apply'(0x45f7270)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4660800) {
      %1134 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46609c0)
        ** Replace : 'arith.addi'(0x4660800)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46609c0) {
          %1134 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46608b0) {
      %1136 = "arith.constant"() {value = 1537 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4660a70)
        ** Replace : 'arith.constant'(0x46608b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4660a70) {
          %1136 = "llvm.mlir.constant"() {value = 1537 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4660910) {
      %1138 = "arith.addi"(%1135, %1137) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4660ad0)
        ** Replace : 'arith.addi'(0x4660910)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4660ad0) {
          %1138 = "llvm.add"(%1134, %1136) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f7380) {
  %1141 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %1140) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46891c0)
    ** Insert  : 'llvm.mlir.constant'(0x4660b80)
    ** Insert  : 'llvm.mul'(0x4660be0)
    ** Insert  : 'llvm.add'(0x4660c90)
    ** Insert  : 'llvm.getelementptr'(0x4660d40)
    ** Insert  : 'llvm.load'(0x4660df0)
    ** Replace : 'memref.load'(0x45f7380)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46891c0) {
      %1141 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4660b80) {
      %1142 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4660be0) {
      %1143 = "llvm.mul"(%475, %1142) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4660c90) {
      %1144 = "llvm.add"(%1143, %1138) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4660d40) {
      %1145 = "llvm.getelementptr"(%1141, %1144) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4660df0) {
      %1146 = "llvm.load"(%1145) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f74b0) {
  %1148 = "vector.broadcast"(%1147) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4688e20)
    ** Replace : 'vector.broadcast'(0x45f74b0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4688e20) {
      %1148 = "vector.splat"(%1147) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4688eb0)
        ** Insert  : 'llvm.mlir.constant'(0x4688f10)
        ** Insert  : 'llvm.insertelement'(0x4688f70)
        ** Insert  : 'llvm.shufflevector'(0x4689040)
        ** Replace : 'vector.splat'(0x4688e20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4688eb0) {
          %1148 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4688f10) {
          %1149 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4688f70) {
          %1150 = "llvm.insertelement"(%1148, %1146, %1149) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x4689040) {
          %1151 = "llvm.shufflevector"(%1150, %1148) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f75a0) {
  %1154 = "vector.load"(<<UNKNOWN SSA VALUE>>, %627, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4643f30)
    ** Insert  : 'llvm.mlir.constant'(0x46890f0)
    ** Insert  : 'llvm.mul'(0x46437c0)
    ** Insert  : 'llvm.add'(0x4643870)
    ** Insert  : 'llvm.getelementptr'(0x4643920)
    ** Insert  : 'llvm.bitcast'(0x46439d0)
    ** Insert  : 'llvm.load'(0x4643a60)
    ** Replace : 'vector.load'(0x45f75a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4643f30) {
      %1154 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46890f0) {
      %1155 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46437c0) {
      %1156 = "llvm.mul"(%626, %1155) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4643870) {
      %1157 = "llvm.add"(%1156, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4643920) {
      %1158 = "llvm.getelementptr"(%1154, %1157) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46439d0) {
      %1159 = "llvm.bitcast"(%1158) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4643a60) {
      %1160 = "llvm.load"(%1159) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f76d0) {
  %1162 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x4689150)
    ** Insert  : 'memref.load'(0x4643b80)
    ** Replace : 'affine.load'(0x45f76d0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4689150) {
      %1162 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4643c30)
        ** Replace : 'arith.constant'(0x4689150)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4643c30) {
          %1162 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x4643b80) {
      %1164 = "memref.load"(%509, %1163) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4643af0)
        ** Insert  : 'llvm.getelementptr'(0x4643c90)
        ** Insert  : 'llvm.load'(0x4643d40)
        ** Replace : 'memref.load'(0x4643b80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4643af0) {
          %1164 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4643c90) {
          %1165 = "llvm.getelementptr"(%1164, %1162) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4643d40) {
          %1166 = "llvm.load"(%1165) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f77c0) {
  %1169 = "vector.fma"(%1153, %1161, %1168) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4643e60)
    ** Replace : 'vector.fma'(0x45f77c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4643e60) {
      %1169 = "llvm.intr.fmuladd"(%1151, %1160, %1166) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f78e0) {
  "affine.store"(%1170, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4687390)
    ** Insert  : 'memref.store'(0x46873e0)
    ** Replace : 'affine.store'(0x45f78e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4687390) {
      %1171 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46874b0)
        ** Replace : 'arith.constant'(0x4687390)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46874b0) {
          %1171 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46873e0) {
      "memref.store"(%1170, %509, %1172) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4643dd0)
        ** Insert  : 'llvm.getelementptr'(0x4687510)
        ** Insert  : 'llvm.store'(0x46875b0)
        ** Replace : 'memref.store'(0x46873e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4643dd0) {
          %1173 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4687510) {
          %1174 = "llvm.getelementptr"(%1173, %1171) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46875b0) {
          "llvm.store"(%1169, %1174) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f7990) {
  %1175 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1538)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46876f0)
    ** Insert  : 'arith.constant'(0x46877a0)
    ** Insert  : 'arith.addi'(0x4687800)
    ** Replace : 'affine.apply'(0x45f7990)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46876f0) {
      %1175 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46878b0)
        ** Replace : 'arith.addi'(0x46876f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46878b0) {
          %1175 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46877a0) {
      %1177 = "arith.constant"() {value = 1538 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4687e70)
        ** Replace : 'arith.constant'(0x46877a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4687e70) {
          %1177 = "llvm.mlir.constant"() {value = 1538 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4687800) {
      %1179 = "arith.addi"(%1176, %1178) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4687ed0)
        ** Replace : 'arith.addi'(0x4687800)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4687ed0) {
          %1179 = "llvm.add"(%1175, %1177) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f7aa0) {
  %1182 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %1181) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4687660)
    ** Insert  : 'llvm.mlir.constant'(0x4687f80)
    ** Insert  : 'llvm.mul'(0x4687fe0)
    ** Insert  : 'llvm.add'(0x4688090)
    ** Insert  : 'llvm.getelementptr'(0x4688140)
    ** Insert  : 'llvm.load'(0x46881f0)
    ** Replace : 'memref.load'(0x45f7aa0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4687660) {
      %1182 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4687f80) {
      %1183 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4687fe0) {
      %1184 = "llvm.mul"(%475, %1183) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4688090) {
      %1185 = "llvm.add"(%1184, %1179) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4688140) {
      %1186 = "llvm.getelementptr"(%1182, %1185) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46881f0) {
      %1187 = "llvm.load"(%1186) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f7bd0) {
  %1189 = "vector.broadcast"(%1188) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4688a90)
    ** Replace : 'vector.broadcast'(0x45f7bd0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4688a90) {
      %1189 = "vector.splat"(%1188) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4688b20)
        ** Insert  : 'llvm.mlir.constant'(0x4688b80)
        ** Insert  : 'llvm.insertelement'(0x4688be0)
        ** Insert  : 'llvm.shufflevector'(0x4688cb0)
        ** Replace : 'vector.splat'(0x4688a90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4688b20) {
          %1189 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4688b80) {
          %1190 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4688be0) {
          %1191 = "llvm.insertelement"(%1189, %1187, %1190) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x4688cb0) {
          %1192 = "llvm.shufflevector"(%1191, %1189) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f7cc0) {
  %1195 = "vector.load"(<<UNKNOWN SSA VALUE>>, %675, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46889f0)
    ** Insert  : 'llvm.mlir.constant'(0x4688d60)
    ** Insert  : 'llvm.mul'(0x4688280)
    ** Insert  : 'llvm.add'(0x4688330)
    ** Insert  : 'llvm.getelementptr'(0x46883e0)
    ** Insert  : 'llvm.bitcast'(0x4688490)
    ** Insert  : 'llvm.load'(0x4688520)
    ** Replace : 'vector.load'(0x45f7cc0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46889f0) {
      %1195 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4688d60) {
      %1196 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4688280) {
      %1197 = "llvm.mul"(%674, %1196) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4688330) {
      %1198 = "llvm.add"(%1197, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46883e0) {
      %1199 = "llvm.getelementptr"(%1195, %1198) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4688490) {
      %1200 = "llvm.bitcast"(%1199) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4688520) {
      %1201 = "llvm.load"(%1200) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f7df0) {
  %1203 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x4688dc0)
    ** Insert  : 'memref.load'(0x4688640)
    ** Replace : 'affine.load'(0x45f7df0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4688dc0) {
      %1203 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46886f0)
        ** Replace : 'arith.constant'(0x4688dc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46886f0) {
          %1203 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x4688640) {
      %1205 = "memref.load"(%509, %1204) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46885b0)
        ** Insert  : 'llvm.getelementptr'(0x4688750)
        ** Insert  : 'llvm.load'(0x4688800)
        ** Replace : 'memref.load'(0x4688640)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46885b0) {
          %1205 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4688750) {
          %1206 = "llvm.getelementptr"(%1205, %1203) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4688800) {
          %1207 = "llvm.load"(%1206) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f39b0) {
  %1210 = "vector.fma"(%1194, %1202, %1209) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4688920)
    ** Replace : 'vector.fma'(0x45f39b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4688920) {
      %1210 = "llvm.intr.fmuladd"(%1192, %1201, %1207) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f3ad0) {
  "affine.store"(%1211, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4689250)
    ** Insert  : 'memref.store'(0x46892a0)
    ** Replace : 'affine.store'(0x45f3ad0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4689250) {
      %1212 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4689370)
        ** Replace : 'arith.constant'(0x4689250)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4689370) {
          %1212 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46892a0) {
      "memref.store"(%1211, %509, %1213) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4688890)
        ** Insert  : 'llvm.getelementptr'(0x46893d0)
        ** Insert  : 'llvm.store'(0x4689470)
        ** Replace : 'memref.store'(0x46892a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4688890) {
          %1214 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46893d0) {
          %1215 = "llvm.getelementptr"(%1214, %1212) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4689470) {
          "llvm.store"(%1210, %1215) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x45f3b80) {
  %1216 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1539)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4689520)
    ** Insert  : 'arith.constant'(0x46895d0)
    ** Insert  : 'arith.addi'(0x4689630)
    ** Replace : 'affine.apply'(0x45f3b80)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4689520) {
      %1216 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46896e0)
        ** Replace : 'arith.addi'(0x4689520)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46896e0) {
          %1216 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46895d0) {
      %1218 = "arith.constant"() {value = 1539 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4689790)
        ** Replace : 'arith.constant'(0x46895d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4689790) {
          %1218 = "llvm.mlir.constant"() {value = 1539 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4689630) {
      %1220 = "arith.addi"(%1217, %1219) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46897f0)
        ** Replace : 'arith.addi'(0x4689630)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46897f0) {
          %1220 = "llvm.add"(%1216, %1218) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x45f3c90) {
  %1223 = "memref.load"(%455, <<UNKNOWN SSA VALUE>>, %1222) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x468bd50)
    ** Insert  : 'llvm.mlir.constant'(0x46898a0)
    ** Insert  : 'llvm.mul'(0x4689900)
    ** Insert  : 'llvm.add'(0x46899b0)
    ** Insert  : 'llvm.getelementptr'(0x4689a60)
    ** Insert  : 'llvm.load'(0x4689b10)
    ** Replace : 'memref.load'(0x45f3c90)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468bd50) {
      %1223 = "llvm.extractvalue"(%454) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46898a0) {
      %1224 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4689900) {
      %1225 = "llvm.mul"(%475, %1224) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46899b0) {
      %1226 = "llvm.add"(%1225, %1220) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4689a60) {
      %1227 = "llvm.getelementptr"(%1223, %1226) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4689b10) {
      %1228 = "llvm.load"(%1227) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45f3dc0) {
  %1230 = "vector.broadcast"(%1229) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4689ba0)
    ** Replace : 'vector.broadcast'(0x45f3dc0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4689ba0) {
      %1230 = "vector.splat"(%1229) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4689c30)
        ** Insert  : 'llvm.mlir.constant'(0x4689c90)
        ** Insert  : 'llvm.insertelement'(0x4689cf0)
        ** Insert  : 'llvm.shufflevector'(0x4689dc0)
        ** Replace : 'vector.splat'(0x4689ba0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4689c30) {
          %1230 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4689c90) {
          %1231 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4689cf0) {
          %1232 = "llvm.insertelement"(%1230, %1228, %1231) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x4689dc0) {
          %1233 = "llvm.shufflevector"(%1232, %1230) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45f3eb0) {
  %1236 = "vector.load"(<<UNKNOWN SSA VALUE>>, %723, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x468b290)
    ** Insert  : 'llvm.mlir.constant'(0x468b320)
    ** Insert  : 'llvm.mul'(0x468b380)
    ** Insert  : 'llvm.add'(0x468b430)
    ** Insert  : 'llvm.getelementptr'(0x468b4e0)
    ** Insert  : 'llvm.bitcast'(0x468b590)
    ** Insert  : 'llvm.load'(0x468b620)
    ** Replace : 'vector.load'(0x45f3eb0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468b290) {
      %1236 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x468b320) {
      %1237 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x468b380) {
      %1238 = "llvm.mul"(%722, %1237) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x468b430) {
      %1239 = "llvm.add"(%1238, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468b4e0) {
      %1240 = "llvm.getelementptr"(%1236, %1239) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x468b590) {
      %1241 = "llvm.bitcast"(%1240) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x468b620) {
      %1242 = "llvm.load"(%1241) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f8b20) {
  %1244 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x468b6b0)
    ** Insert  : 'memref.load'(0x468b710)
    ** Replace : 'affine.load'(0x45f8b20)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x468b6b0) {
      %1244 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x468b7c0)
        ** Replace : 'arith.constant'(0x468b6b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x468b7c0) {
          %1244 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x468b710) {
      %1246 = "memref.load"(%509, %1245) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x468dc10)
        ** Insert  : 'llvm.getelementptr'(0x468b820)
        ** Insert  : 'llvm.load'(0x468b8d0)
        ** Replace : 'memref.load'(0x468b710)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x468dc10) {
          %1246 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x468b820) {
          %1247 = "llvm.getelementptr"(%1246, %1244) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x468b8d0) {
          %1248 = "llvm.load"(%1247) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45f8c10) {
  %1251 = "vector.fma"(%1235, %1243, %1250) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x468b9f0)
    ** Replace : 'vector.fma'(0x45f8c10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x468b9f0) {
      %1251 = "llvm.intr.fmuladd"(%1233, %1242, %1248) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45f8d30) {
  "affine.store"(%1252, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x468bac0)
    ** Insert  : 'memref.store'(0x468bb10)
    ** Replace : 'affine.store'(0x45f8d30)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x468bac0) {
      %1253 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x468bbe0)
        ** Replace : 'arith.constant'(0x468bac0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x468bbe0) {
          %1253 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x468bb10) {
      "memref.store"(%1252, %509, %1254) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x468b960)
        ** Insert  : 'llvm.getelementptr'(0x468bc40)
        ** Insert  : 'llvm.store'(0x4689e60)
        ** Replace : 'memref.store'(0x468bb10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x468b960) {
          %1255 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x468bc40) {
          %1256 = "llvm.getelementptr"(%1255, %1253) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4689e60) {
          "llvm.store"(%1251, %1256) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f7ed0) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f7fb0) {
  %1259 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x468bcf0)
    ** Insert  : 'memref.load'(0x4689fa0)
    ** Replace : 'affine.load'(0x45f7fb0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x468bcf0) {
      %1259 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x468a050)
        ** Replace : 'arith.constant'(0x468bcf0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x468a050) {
          %1259 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x4689fa0) {
      %1261 = "memref.load"(%509, %1260) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4689f10)
        ** Insert  : 'llvm.getelementptr'(0x468a0b0)
        ** Insert  : 'llvm.load'(0x468a160)
        ** Replace : 'memref.load'(0x4689fa0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4689f10) {
          %1261 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x468a0b0) {
          %1262 = "llvm.getelementptr"(%1261, %1259) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x468a160) {
          %1263 = "llvm.load"(%1262) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x45eab10) {
  "vector.store"(%1265, %392, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.store -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.store -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x468a1f0)
    ** Insert  : 'llvm.mlir.constant'(0x468bde0)
    ** Insert  : 'llvm.mul'(0x468be40)
    ** Insert  : 'llvm.add'(0x468bef0)
    ** Insert  : 'llvm.getelementptr'(0x468bfa0)
    ** Insert  : 'llvm.bitcast'(0x468c050)
    ** Insert  : 'llvm.store'(0x468c0d0)
    ** Replace : 'vector.store'(0x45eab10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468a1f0) {
      %1266 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x468bde0) {
      %1267 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x468be40) {
      %1268 = "llvm.mul"(%475, %1267) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x468bef0) {
      %1269 = "llvm.add"(%1268, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468bfa0) {
      %1270 = "llvm.getelementptr"(%1266, %1269) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x468c050) {
      %1271 = "llvm.bitcast"(%1270) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x468c0d0) {
      "llvm.store"(%1263, %1271) {alignment = 4 : i64} : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f8040) {
  %1272 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x468a280)
    ** Insert  : 'memref.load'(0x468a2e0)
    ** Replace : 'affine.load'(0x45f8040)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x468a280) {
      %1272 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x468a390)
        ** Replace : 'arith.constant'(0x468a280)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x468a390) {
          %1272 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x468a2e0) {
      %1274 = "memref.load"(%509, %1273) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x468c180)
        ** Insert  : 'llvm.getelementptr'(0x468a3f0)
        ** Insert  : 'llvm.load'(0x468a4a0)
        ** Replace : 'memref.load'(0x468a2e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x468c180) {
          %1274 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x468a3f0) {
          %1275 = "llvm.getelementptr"(%1274, %1272) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x468a4a0) {
          %1276 = "llvm.load"(%1275) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x4477fb0) {
  "vector.store"(%1278, %392, <<UNKNOWN SSA VALUE>>, %526) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.store -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.store -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x468da30)
    ** Insert  : 'llvm.mlir.constant'(0x468dac0)
    ** Insert  : 'llvm.mul'(0x468a530)
    ** Insert  : 'llvm.add'(0x468a5e0)
    ** Insert  : 'llvm.getelementptr'(0x468a690)
    ** Insert  : 'llvm.bitcast'(0x468a740)
    ** Insert  : 'llvm.store'(0x468a7c0)
    ** Replace : 'vector.store'(0x4477fb0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468da30) {
      %1279 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x468dac0) {
      %1280 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x468a530) {
      %1281 = "llvm.mul"(%475, %1280) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x468a5e0) {
      %1282 = "llvm.add"(%1281, %524) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468a690) {
      %1283 = "llvm.getelementptr"(%1279, %1282) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x468a740) {
      %1284 = "llvm.bitcast"(%1283) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x468a7c0) {
      "llvm.store"(%1276, %1284) {alignment = 4 : i64} : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f80d0) {
  %1285 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x468dbb0)
    ** Insert  : 'memref.load'(0x468a870)
    ** Replace : 'affine.load'(0x45f80d0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x468dbb0) {
      %1285 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x468a920)
        ** Replace : 'arith.constant'(0x468dbb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x468a920) {
          %1285 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x468a870) {
      %1287 = "memref.load"(%509, %1286) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x468db20)
        ** Insert  : 'llvm.getelementptr'(0x468a980)
        ** Insert  : 'llvm.load'(0x468aa30)
        ** Replace : 'memref.load'(0x468a870)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x468db20) {
          %1287 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x468a980) {
          %1288 = "llvm.getelementptr"(%1287, %1285) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x468aa30) {
          %1289 = "llvm.load"(%1288) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x446ccd0) {
  "vector.store"(%1291, %392, <<UNKNOWN SSA VALUE>>, %543) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.store -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.store -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x468f2c0)
    ** Insert  : 'llvm.mlir.constant'(0x468aac0)
    ** Insert  : 'llvm.mul'(0x468ab20)
    ** Insert  : 'llvm.add'(0x468abd0)
    ** Insert  : 'llvm.getelementptr'(0x468ac80)
    ** Insert  : 'llvm.bitcast'(0x468ad30)
    ** Insert  : 'llvm.store'(0x468adb0)
    ** Replace : 'vector.store'(0x446ccd0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f2c0) {
      %1292 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x468aac0) {
      %1293 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x468ab20) {
      %1294 = "llvm.mul"(%475, %1293) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x468abd0) {
      %1295 = "llvm.add"(%1294, %541) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468ac80) {
      %1296 = "llvm.getelementptr"(%1292, %1295) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x468ad30) {
      %1297 = "llvm.bitcast"(%1296) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x468adb0) {
      "llvm.store"(%1289, %1297) {alignment = 4 : i64} : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45f8160) {
  %1298 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x468aef0)
    ** Insert  : 'memref.load'(0x468af50)
    ** Replace : 'affine.load'(0x45f8160)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x468aef0) {
      %1298 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x468b000)
        ** Replace : 'arith.constant'(0x468aef0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x468b000) {
          %1298 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x468af50) {
      %1300 = "memref.load"(%509, %1299) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x468ae60)
        ** Insert  : 'llvm.getelementptr'(0x468b060)
        ** Insert  : 'llvm.load'(0x468b110)
        ** Replace : 'memref.load'(0x468af50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x468ae60) {
          %1300 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x468b060) {
          %1301 = "llvm.getelementptr"(%1300, %1298) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x468b110) {
          %1302 = "llvm.load"(%1301) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x45ed400) {
  "vector.store"(%1304, %392, <<UNKNOWN SSA VALUE>>, %560) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.store -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.store -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x468b1a0)
    ** Insert  : 'llvm.mlir.constant'(0x468b230)
    ** Insert  : 'llvm.mul'(0x468f200)
    ** Insert  : 'llvm.add'(0x468f0c0)
    ** Insert  : 'llvm.getelementptr'(0x468dca0)
    ** Insert  : 'llvm.bitcast'(0x468dd50)
    ** Insert  : 'llvm.store'(0x468ddd0)
    ** Replace : 'vector.store'(0x45ed400)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468b1a0) {
      %1305 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x468b230) {
      %1306 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x468f200) {
      %1307 = "llvm.mul"(%475, %1306) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x468f0c0) {
      %1308 = "llvm.add"(%1307, %558) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468dca0) {
      %1309 = "llvm.getelementptr"(%1305, %1308) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x468dd50) {
      %1310 = "llvm.bitcast"(%1309) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x468ddd0) {
      "llvm.store"(%1302, %1310) {alignment = 4 : i64} : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f8380) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f8450) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f8520) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f85f0) {
  "affine.yield"(%307, %340) : (i32, i32) -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x45f8900) {
  "func.return"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.return -> ()' {
    ** Insert  : 'llvm.return'(0x468de70)
    ** Replace : 'func.return'(0x45f8900)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x468de70) {
      "llvm.return"() : () -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45e8cf0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'llvm.func'(0x468ded0)
    ** Erase   : 'func.func'(0x45e8cf0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x468ded0) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45d1f20) {
  %0 = "arith.constant"() {value = 0 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x468df40)
    ** Replace : 'arith.constant'(0x45d1f20)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x468df40) {
      %0 = "llvm.mlir.constant"() {value = 0 : i64} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.null'(0x45c00f0) {
  %2 = "llvm.mlir.null"() : () -> !llvm.ptr<i8>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45f8a70) {
  %3 = "rmem.bitcast"(<<UNKNOWN SSA VALUE>>) : (!llvm.ptr<i8>) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.bitcast -> ()' {
    ** Insert  : 'llvm.bitcast'(0x468f170)
    ** Replace : 'rmem.bitcast'(0x45f8a70)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x468f170) {
      %3 = "llvm.bitcast"(%arg0) : (!llvm.ptr<i8>) -> !llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45fa2e0) {
  %5 = "rmem.llvm.getelementptr"(%4, %1) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 0>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x468e150)
    ** Replace : 'rmem.llvm.getelementptr'(0x45fa2e0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468e150) {
      %5 = "llvm.getelementptr"(%3, %0) {rawConstantIndices = array<i32: -2147483648, 0>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45fa390) {
  %7 = "rmem.llvm.load"(%6) : (!llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> !rmem.rmref<2, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.load -> ()' {
    ** Insert  : 'llvm.load'(0x468e060)
    ** Replace : 'rmem.llvm.load'(0x45fa390)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x468e060) {
      %7 = "llvm.load"(%5) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45fa420) {
  %9 = "rmem.bitcast"(%8) : (!rmem.rmref<2, memref<64512x512xf32>>) -> !rmem.rmref<4, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.bitcast -> ()' {
    ** Replace : 'rmem.bitcast'(0x45fa420)
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4616590) {
  %10 = "builtin.unrealized_conversion_cast"(%9) {lower_tgt_mat = true} : (!rmem.rmref<4, memref<64512x512xf32>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45fa4b0) {
  %11 = "rmem.llvm.getelementptr"(%4, %1) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 1>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x468ed10)
    ** Replace : 'rmem.llvm.getelementptr'(0x45fa4b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468ed10) {
      %11 = "llvm.getelementptr"(%3, %0) {rawConstantIndices = array<i32: -2147483648, 1>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45fa560) {
  %13 = "rmem.llvm.load"(%12) : (!llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> !rmem.rmref<1, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.load -> ()' {
    ** Insert  : 'llvm.load'(0x468ec80)
    ** Replace : 'rmem.llvm.load'(0x45fa560)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x468ec80) {
      %13 = "llvm.load"(%11) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x45fa5f0) {
  %15 = "rmem.bitcast"(%14) : (!rmem.rmref<1, memref<64512x512xf32>>) -> !rmem.rmref<3, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.bitcast -> ()' {
    ** Replace : 'rmem.bitcast'(0x45fa5f0)
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4616500) {
  %16 = "builtin.unrealized_conversion_cast"(%15) {lower_tgt_mat = true} : (!rmem.rmref<3, memref<64512x512xf32>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x45fa680) {
  %17 = "rmem.llvm.getelementptr"(%4, %1) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 2>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<memref<512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x468ee50)
    ** Replace : 'rmem.llvm.getelementptr'(0x45fa680)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468ee50) {
      %17 = "llvm.getelementptr"(%3, %0) {rawConstantIndices = array<i32: -2147483648, 2>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x45fa730) {
  %19 = "rmem.llvm.load"(%18) : (!llvm.ptr<memref<512x512xf32>>) -> memref<512x512xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.load -> ()' {
    ** Insert  : 'llvm.load'(0x468edc0)
    ** Replace : 'rmem.llvm.load'(0x45fa730)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x468edc0) {
      %19 = "llvm.load"(%17) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4616470) {
  %21 = "builtin.unrealized_conversion_cast"(%20) {lower_tgt_mat = true} : (memref<512x512xf32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614850) {
  %22 = "builtin.unrealized_conversion_cast"(%10) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<64512x512xf32>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x46148e0) {
  %23 = "builtin.unrealized_conversion_cast"(%16) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<64512x512xf32>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614970) {
  %24 = "builtin.unrealized_conversion_cast"(%20) : (memref<512x512xf32>) -> memref<512x512xf32>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x460d440) {
  "func.call"(%22, %23, %24) {callee = @main_graph__1} : (memref<64512x512xf32>, memref<64512x512xf32>, memref<512x512xf32>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.call -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x468e430)
    ** Insert  : 'llvm.extractvalue'(0x468e4c0)
    ** Insert  : 'llvm.extractvalue'(0x468e550)
    ** Insert  : 'llvm.extractvalue'(0x468e5e0)
    ** Insert  : 'llvm.extractvalue'(0x468e670)
    ** Insert  : 'llvm.extractvalue'(0x468e700)
    ** Insert  : 'llvm.extractvalue'(0x468e790)
    ** Insert  : 'llvm.extractvalue'(0x468e8c0)
    ** Insert  : 'llvm.extractvalue'(0x468e950)
    ** Insert  : 'llvm.extractvalue'(0x468e9e0)
    ** Insert  : 'llvm.extractvalue'(0x468ea70)
    ** Insert  : 'llvm.extractvalue'(0x468eb00)
    ** Insert  : 'llvm.extractvalue'(0x468eb90)
    ** Insert  : 'llvm.extractvalue'(0x468c210)
    ** Insert  : 'llvm.extractvalue'(0x468c3e0)
    ** Insert  : 'llvm.extractvalue'(0x468c470)
    ** Insert  : 'llvm.extractvalue'(0x468c500)
    ** Insert  : 'llvm.extractvalue'(0x468c590)
    ** Insert  : 'llvm.extractvalue'(0x468c620)
    ** Insert  : 'llvm.extractvalue'(0x468c6b0)
    ** Insert  : 'llvm.extractvalue'(0x468c740)
    ** Insert  : 'llvm.call'(0x468c870)
    ** Replace : 'func.call'(0x460d440)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e430) {
      %28 = "llvm.extractvalue"(%23) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e4c0) {
      %29 = "llvm.extractvalue"(%23) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e550) {
      %30 = "llvm.extractvalue"(%23) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e5e0) {
      %31 = "llvm.extractvalue"(%23) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e670) {
      %32 = "llvm.extractvalue"(%23) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e700) {
      %33 = "llvm.extractvalue"(%23) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e790) {
      %34 = "llvm.extractvalue"(%23) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e8c0) {
      %35 = "llvm.extractvalue"(%25) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e950) {
      %36 = "llvm.extractvalue"(%25) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468e9e0) {
      %37 = "llvm.extractvalue"(%25) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468ea70) {
      %38 = "llvm.extractvalue"(%25) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468eb00) {
      %39 = "llvm.extractvalue"(%25) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468eb90) {
      %40 = "llvm.extractvalue"(%25) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468c210) {
      %41 = "llvm.extractvalue"(%25) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468c3e0) {
      %42 = "llvm.extractvalue"(%27) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468c470) {
      %43 = "llvm.extractvalue"(%27) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468c500) {
      %44 = "llvm.extractvalue"(%27) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468c590) {
      %45 = "llvm.extractvalue"(%27) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468c620) {
      %46 = "llvm.extractvalue"(%27) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468c6b0) {
      %47 = "llvm.extractvalue"(%27) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468c740) {
      %48 = "llvm.extractvalue"(%27) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x468c870) {
      "llvm.call"(%28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48) {callee = @main_graph__1, fastmathFlags = #llvm.fastmath<none>} : (!llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x45b9400) {
  "func.return"(%2) : (!llvm.ptr<i8>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.return -> ()' {
    ** Insert  : 'llvm.return'(0x461fb10)
    ** Replace : 'func.return'(0x45b9400)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x461fb10) {
      "llvm.return"(%2) : (!llvm.ptr<i8>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45f7c50) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'llvm.func'(0x468e0e0)
    ** Insert  : 'llvm.func'(0x468ec10)
    ** Insert  : 'llvm.load'(0x4691980)
    ** Insert  : 'llvm.extractvalue'(0x468d4b0)
    ** Insert  : 'llvm.extractvalue'(0x468d540)
    ** Insert  : 'llvm.extractvalue'(0x468d5d0)
    ** Insert  : 'llvm.extractvalue'(0x468d660)
    ** Insert  : 'llvm.extractvalue'(0x468d6f0)
    ** Insert  : 'llvm.extractvalue'(0x468d780)
    ** Insert  : 'llvm.extractvalue'(0x468d810)
    ** Insert  : 'llvm.load'(0x468d8a0)
    ** Insert  : 'llvm.extractvalue'(0x468f350)
    ** Insert  : 'llvm.extractvalue'(0x468f3e0)
    ** Insert  : 'llvm.extractvalue'(0x468f470)
    ** Insert  : 'llvm.extractvalue'(0x468f500)
    ** Insert  : 'llvm.extractvalue'(0x468f590)
    ** Insert  : 'llvm.extractvalue'(0x468f620)
    ** Insert  : 'llvm.extractvalue'(0x468f6b0)
    ** Insert  : 'llvm.load'(0x468f740)
    ** Insert  : 'llvm.extractvalue'(0x468d930)
    ** Insert  : 'llvm.extractvalue'(0x468f8f0)
    ** Insert  : 'llvm.extractvalue'(0x468f980)
    ** Insert  : 'llvm.extractvalue'(0x468fa10)
    ** Insert  : 'llvm.extractvalue'(0x468faa0)
    ** Insert  : 'llvm.extractvalue'(0x468fb30)
    ** Insert  : 'llvm.extractvalue'(0x468fbc0)
    ** Insert  : 'llvm.call'(0x468fc40)
    ** Insert  : 'llvm.return'(0x468ff40)
    ** Erase   : 'func.func'(0x45f7c50)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x468e0e0) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x468ec10) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4691980) {
      %0 = "llvm.load"(%arg0) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468d4b0) {
      %1 = "llvm.extractvalue"(%0) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468d540) {
      %2 = "llvm.extractvalue"(%0) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468d5d0) {
      %3 = "llvm.extractvalue"(%0) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468d660) {
      %4 = "llvm.extractvalue"(%0) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468d6f0) {
      %5 = "llvm.extractvalue"(%0) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468d780) {
      %6 = "llvm.extractvalue"(%0) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468d810) {
      %7 = "llvm.extractvalue"(%0) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x468d8a0) {
      %8 = "llvm.load"(%arg1) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f350) {
      %9 = "llvm.extractvalue"(%8) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f3e0) {
      %10 = "llvm.extractvalue"(%8) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f470) {
      %11 = "llvm.extractvalue"(%8) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f500) {
      %12 = "llvm.extractvalue"(%8) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f590) {
      %13 = "llvm.extractvalue"(%8) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f620) {
      %14 = "llvm.extractvalue"(%8) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f6b0) {
      %15 = "llvm.extractvalue"(%8) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x468f740) {
      %16 = "llvm.load"(%arg2) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468d930) {
      %17 = "llvm.extractvalue"(%16) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f8f0) {
      %18 = "llvm.extractvalue"(%16) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468f980) {
      %19 = "llvm.extractvalue"(%16) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468fa10) {
      %20 = "llvm.extractvalue"(%16) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468faa0) {
      %21 = "llvm.extractvalue"(%16) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468fb30) {
      %22 = "llvm.extractvalue"(%16) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x468fbc0) {
      %23 = "llvm.extractvalue"(%16) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x468fc40) {
      "llvm.call"(%1, %2, %3, %4, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15, %17, %18, %19, %20, %21, %22, %23) {callee = @main_graph__0, fastmathFlags = #llvm.fastmath<none>} : (!llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x468ff40) {
      "llvm.return"() : () -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x46163e0) {
  %3 = "builtin.unrealized_conversion_cast"(<<UNKNOWN SSA VALUE>>) {lower_arg_mat = true} : (memref<64512x512xf32>) -> !rmem.rmref<2, memref<64512x512xf32>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4616350) {
  %4 = "builtin.unrealized_conversion_cast"(<<UNKNOWN SSA VALUE>>) {lower_arg_mat = true} : (memref<64512x512xf32>) -> !rmem.rmref<1, memref<64512x512xf32>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45e8c10) {
  %5 = "arith.constant"() {value = 2 : i8} : () -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x46918f0)
    ** Replace : 'arith.constant'(0x45e8c10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46918f0) {
      %5 = "llvm.mlir.constant"() {value = 2 : i8} : () -> i8

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45ef400) {
  %7 = "arith.constant"() {value = 8192 : i32} : () -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x4691740)
    ** Replace : 'arith.constant'(0x45ef400)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4691740) {
      %7 = "llvm.mlir.constant"() {value = 8192 : i32} : () -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45baa30) {
  %9 = "arith.constant"() {value = 4 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x46912d0)
    ** Replace : 'arith.constant'(0x45baa30)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46912d0) {
      %9 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45e8b20) {
  %11 = "arith.constant"() {value = 0.000000e+00 : f32} : () -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x4691330)
    ** Replace : 'arith.constant'(0x45e8b20)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4691330) {
      %11 = "llvm.mlir.constant"() {value = 0.000000e+00 : f32} : () -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45d78c0) {
  %13 = "arith.constant"() {value = 0 : index} : () -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x4691390)
    ** Replace : 'arith.constant'(0x45d78c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4691390) {
      %13 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45fef80) {
  %15 = "rmem.affine.req"(%3, %14) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t2"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46913f0)
    ** Insert  : 'affine.apply'(0x4691480)
    ** Insert  : 'arith.index_cast'(0x4691510)
    ** Insert  : 'llvm.extractvalue'(0x46915a0)
    ** Insert  : 'arith.addi'(0x468c7d0)
    ** Insert  : 'llvm.getelementptr'(0x468cf60)
    ** Insert  : 'rmem.request'(0x4691630)
    ** Replace : 'rmem.affine.req'(0x45fef80)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46913f0) {
      %16 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4691480) {
      %17 = "affine.apply"(%15) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
        ** Insert  : 'arith.constant'(0x46916c0)
        ** Replace : 'affine.apply'(0x4691480)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46916c0) {
          %17 = "arith.constant"() {value = 0 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x468d9c0)
            ** Replace : 'arith.constant'(0x46916c0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x468d9c0) {
              %17 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS
    } -> SUCCESS : operation was folded
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4691510) {
      %20 = "arith.index_cast"(%19) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4691510)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46915a0) {
      %21 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x468c7d0) {
      %22 = "arith.addi"(%20, %21) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4691080)
        ** Replace : 'arith.addi'(0x468c7d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4691080) {
          %22 = "llvm.add"(%17, %21) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x468cf60) {
      %24 = "llvm.getelementptr"(%16, %23) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x4691630) {
      %25 = "rmem.request"(%24) {cache_id = 2 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x4693ac0)
        ** Insert  : 'arith.constant'(0x4690ff0)
        ** Insert  : 'arith.andi'(0x4691190)
        ** Insert  : 'arith.constant'(0x4691240)
        ** Insert  : 'arith.divui'(0x4692ab0)
        ** Insert  : 'arith.constant'(0x4692b60)
        ** Insert  : 'arith.remsi'(0x4692bc0)
        ** Insert  : 'arith.trunci'(0x4692c70)
        ** Insert  : 'arith.constant'(0x4692d00)
        ** Insert  : 'arith.constant'(0x4692dc0)
        ** Insert  : 'llvm.call'(0x4692e20)
        ** Replace : 'rmem.request'(0x4691630)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x4693ac0) {
          %25 = "llvm.ptrtoint"(%24) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4690ff0) {
          %26 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46917b0)
            ** Replace : 'arith.constant'(0x4690ff0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46917b0) {
              %26 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x4691190) {
          %28 = "arith.andi"(%25, %27) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x46937b0)
            ** Replace : 'arith.andi'(0x4691190)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x46937b0) {
              %28 = "llvm.and"(%25, %26) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4691240) {
          %30 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4691870)
            ** Replace : 'arith.constant'(0x4691240)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4691870) {
              %30 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x4692ab0) {
          %32 = "arith.divui"(%29, %31) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x4693920)
            ** Replace : 'arith.divui'(0x4692ab0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x4693920) {
              %32 = "llvm.udiv"(%28, %30) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4692b60) {
          %34 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4691810)
            ** Replace : 'arith.constant'(0x4692b60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4691810) {
              %34 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x4692bc0) {
          %36 = "arith.remsi"(%33, %35) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x46939d0)
            ** Replace : 'arith.remsi'(0x4692bc0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x46939d0) {
              %36 = "llvm.srem"(%32, %34) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x4692c70) {
          %38 = "arith.trunci"(%37) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x4693860)
            ** Replace : 'arith.trunci'(0x4692c70)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x4693860) {
              %38 = "llvm.trunc"(%36) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4692d00) {
          %40 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4694c40)
            ** Replace : 'arith.constant'(0x4692d00)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4694c40) {
              %40 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4692dc0) {
          %42 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4691130)
            ** Replace : 'arith.constant'(0x4692dc0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4691130) {
              %42 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x4692e20) {
          %44 = "llvm.call"(%41, %29, %39, %43) {callee = @cache_request_impl_2, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x45fffa0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4694f40)
    ** Insert  : 'arith.constant'(0x4694fa0)
    ** Insert  : 'arith.constant'(0x4695000)
    ** Insert  : 'scf.for'(0x4449d60)
    ** Replace : 'affine.for'(0x45fffa0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4694f40) {
      %47 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4695090)
        ** Replace : 'arith.constant'(0x4694f40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4695090) {
          %47 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4694fa0) {
      %49 = "arith.constant"() {value = 64512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46950f0)
        ** Replace : 'arith.constant'(0x4694fa0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46950f0) {
          %49 = "llvm.mlir.constant"() {value = 64512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4695000) {
      %51 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4694ca0)
        ** Replace : 'arith.constant'(0x4695000)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4694ca0) {
          %51 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x4449d60) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4694de0)
        ** Insert  : 'cf.br'(0x468df90)
        ** Erase   : 'affine.yield'(0x4600b70)
        ** Insert  : 'cf.br'(0x4692f00)
        ** Insert  : 'arith.cmpi'(0x4694e90)
        ** Insert  : 'cf.cond_br'(0x4692fc0)
        ** Replace : 'scf.for'(0x4449d60)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4694de0) {
          %67 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %52) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x46545d0)
            ** Replace : 'arith.addi'(0x4694de0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x46545d0) {
              %67 = "llvm.add"(%53, %51) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x468df90) {
          "cf.br"(%68, %57)[^bb1] : (index, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4654670)
            ** Replace : 'cf.br'(0x468df90)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4654670) {
              "llvm.br"(%67, %57)[^bb1] : (i64, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4692f00) {
          "cf.br"(%48, %46)[^bb1] : (index, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4693120)
            ** Replace : 'cf.br'(0x4692f00)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4693120) {
              "llvm.br"(%47, %38)[^bb1] : (i64, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4694e90) {
          %55 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %50) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x46931f0)
            ** Replace : 'arith.cmpi'(0x4694e90)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x46931f0) {
              %55 = "llvm.icmp"(%53, %49) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4692fc0) {
          "cf.cond_br"(%56)[^bb2, ^bb3] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4693290)
            ** Replace : 'cf.cond_br'(0x4692fc0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4693290) {
              "llvm.cond_br"(%55)[^bb2, ^bb3] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45ff110) {
  %57 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %11) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x4693360)
    ** Replace : 'arith.addi'(0x45ff110)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4693360) {
      %57 = "llvm.add"(%53, %10) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x45ff1c0) {
  %59 = "rmem.affine.req"(%3, %58) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t2"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4693460)
    ** Insert  : 'affine.apply'(0x46934f0)
    ** Insert  : 'arith.index_cast'(0x4693580)
    ** Insert  : 'llvm.extractvalue'(0x4693610)
    ** Insert  : 'arith.addi'(0x46936a0)
    ** Insert  : 'llvm.getelementptr'(0x4653d60)
    ** Insert  : 'rmem.request'(0x4653e10)
    ** Replace : 'rmem.affine.req'(0x45ff1c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4693460) {
      %59 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x46934f0) {
      %60 = "affine.apply"(%58) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x4653ea0)
        ** Insert  : 'arith.muli'(0x4653f00)
        ** Replace : 'affine.apply'(0x46934f0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4653ea0) {
          %60 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4653fb0)
            ** Replace : 'arith.constant'(0x4653ea0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4653fb0) {
              %60 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x4653f00) {
          %62 = "arith.muli"(%58, %61) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x4654010)
            ** Replace : 'arith.muli'(0x4653f00)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x4654010) {
              %62 = "llvm.mul"(%57, %60) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4693580) {
      %65 = "arith.index_cast"(%64) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4693580)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4693610) {
      %66 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46936a0) {
      %67 = "arith.addi"(%65, %66) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46540c0)
        ** Replace : 'arith.addi'(0x46936a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46540c0) {
          %67 = "llvm.add"(%62, %66) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4653d60) {
      %69 = "llvm.getelementptr"(%59, %68) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x4653e10) {
      %70 = "rmem.request"(%69) {cache_id = 2 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x4694b60)
        ** Insert  : 'arith.constant'(0x4654170)
        ** Insert  : 'arith.andi'(0x46541d0)
        ** Insert  : 'arith.constant'(0x4654280)
        ** Insert  : 'arith.divui'(0x46542e0)
        ** Insert  : 'arith.constant'(0x4654390)
        ** Insert  : 'arith.remsi'(0x46543f0)
        ** Insert  : 'arith.trunci'(0x46544a0)
        ** Insert  : 'arith.constant'(0x4654530)
        ** Insert  : 'arith.constant'(0x4693b50)
        ** Insert  : 'llvm.call'(0x4693bb0)
        ** Replace : 'rmem.request'(0x4653e10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x4694b60) {
          %70 = "llvm.ptrtoint"(%69) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4654170) {
          %71 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4693ca0)
            ** Replace : 'arith.constant'(0x4654170)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4693ca0) {
              %71 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x46541d0) {
          %73 = "arith.andi"(%70, %72) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x4693d00)
            ** Replace : 'arith.andi'(0x46541d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x4693d00) {
              %73 = "llvm.and"(%70, %71) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4654280) {
          %75 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4693db0)
            ** Replace : 'arith.constant'(0x4654280)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4693db0) {
              %75 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x46542e0) {
          %77 = "arith.divui"(%74, %76) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x4693e10)
            ** Replace : 'arith.divui'(0x46542e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x4693e10) {
              %77 = "llvm.udiv"(%73, %75) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4654390) {
          %79 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4695150)
            ** Replace : 'arith.constant'(0x4654390)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4695150) {
              %79 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x46543f0) {
          %81 = "arith.remsi"(%78, %80) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x46965d0)
            ** Replace : 'arith.remsi'(0x46543f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x46965d0) {
              %81 = "llvm.srem"(%77, %79) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x46544a0) {
          %83 = "arith.trunci"(%82) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x46949d0)
            ** Replace : 'arith.trunci'(0x46544a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x46949d0) {
              %83 = "llvm.trunc"(%81) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4654530) {
          %85 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4694af0)
            ** Replace : 'arith.constant'(0x4654530)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4694af0) {
              %85 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4693b50) {
          %87 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4694a90)
            ** Replace : 'arith.constant'(0x4693b50)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4694a90) {
              %87 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x4693bb0) {
          %89 = "llvm.call"(%86, %74, %84, %88) {callee = @cache_request_impl_2, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x45ff270) {
  %92 = "rmem.affine.paddr"(<<UNKNOWN SSA VALUE>>, %3, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<2, memref<64512x512xf32>>, index) -> memref<4x512xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.paddr -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4694700)
    ** Insert  : 'affine.apply'(0x4694790)
    ** Insert  : 'arith.index_cast'(0x4694820)
    ** Insert  : 'llvm.extractvalue'(0x46948b0)
    ** Insert  : 'arith.addi'(0x4693ec0)
    ** Insert  : 'llvm.getelementptr'(0x4693f70)
    ** Insert  : 'rmem.paddr'(0x4694020)
    ** Insert  : 'llvm.mlir.constant'(0x4694d00)
    ** Insert  : 'llvm.mlir.constant'(0x46940d0)
    ** Insert  : 'llvm.mlir.constant'(0x4694130)
    ** Insert  : 'llvm.mlir.constant'(0x4694190)
    ** Insert  : 'llvm.mlir.null'(0x46941f0)
    ** Insert  : 'llvm.getelementptr'(0x4694250)
    ** Insert  : 'llvm.ptrtoint'(0x4694940)
    ** Insert  : 'llvm.mlir.constant'(0x4694300)
    ** Insert  : 'llvm.inttoptr'(0x4694360)
    ** Insert  : 'llvm.mlir.undef'(0x46943f0)
    ** Insert  : 'llvm.insertvalue'(0x4694450)
    ** Insert  : 'llvm.insertvalue'(0x4694500)
    ** Insert  : 'llvm.mlir.constant'(0x46945b0)
    ** Insert  : 'llvm.insertvalue'(0x4694610)
    ** Insert  : 'llvm.insertvalue'(0x468ffb0)
    ** Insert  : 'llvm.insertvalue'(0x4690060)
    ** Insert  : 'llvm.insertvalue'(0x4690110)
    ** Insert  : 'llvm.insertvalue'(0x46901c0)
    ** Replace : 'rmem.affine.paddr'(0x45ff270)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4694700) {
      %92 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4694790) {
      %93 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x4690270)
        ** Insert  : 'arith.muli'(0x46902d0)
        ** Replace : 'affine.apply'(0x4694790)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4690270) {
          %93 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4698140)
            ** Replace : 'arith.constant'(0x4690270)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4698140) {
              %93 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x46902d0) {
          %95 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %94) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x4690bf0)
            ** Replace : 'arith.muli'(0x46902d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x4690bf0) {
              %95 = "llvm.mul"(%53, %93) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4694820) {
      %98 = "arith.index_cast"(%97) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4694820)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46948b0) {
      %99 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4693ec0) {
      %100 = "arith.addi"(%98, %99) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4690d30)
        ** Replace : 'arith.addi'(0x4693ec0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4690d30) {
          %100 = "llvm.add"(%95, %99) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4693f70) {
      %102 = "llvm.getelementptr"(%92, %101) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.paddr'(0x4694020) {
      %103 = "rmem.paddr"(%54, %102) {cache_id = 2 : i32} : (i32, !llvm.ptr<f32>) -> !llvm.ptr<f32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.paddr -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x4690ca0)
        ** Insert  : 'arith.constant'(0x4690de0)
        ** Insert  : 'arith.extsi'(0x4690e40)
        ** Insert  : 'arith.constant'(0x4690380)
        ** Insert  : 'arith.muli'(0x46903e0)
        ** Insert  : 'arith.constant'(0x4690490)
        ** Insert  : 'arith.remsi'(0x46904f0)
        ** Insert  : 'arith.addi'(0x46905a0)
        ** Insert  : 'arith.addi'(0x4690650)
        ** Insert  : 'llvm.mlir.addressof'(0x4690700)
        ** Insert  : 'llvm.load'(0x4690760)
        ** Insert  : 'llvm.getelementptr'(0x46907f0)
        ** Insert  : 'llvm.bitcast'(0x46908a0)
        ** Replace : 'rmem.paddr'(0x4694020)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x4690ca0) {
          %103 = "llvm.ptrtoint"(%102) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4690de0) {
          %104 = "arith.constant"() {value = 67108864 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4697f00)
            ** Replace : 'arith.constant'(0x4690de0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4697f00) {
              %104 = "llvm.mlir.constant"() {value = 67108864 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extsi'(0x4690e40) {
          %106 = "arith.extsi"(%54) : (i32) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.extsi -> ()' {
            ** Insert  : 'llvm.sext'(0x4697f60)
            ** Replace : 'arith.extsi'(0x4690e40)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.sext'(0x4697f60) {
              %106 = "llvm.sext"(%54) : (i32) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4690380) {
          %108 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4697ff0)
            ** Replace : 'arith.constant'(0x4690380)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4697ff0) {
              %108 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x46903e0) {
          %110 = "arith.muli"(%107, %109) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x4698050)
            ** Replace : 'arith.muli'(0x46903e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x4698050) {
              %110 = "llvm.mul"(%106, %108) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4690490) {
          %112 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4690930)
            ** Replace : 'arith.constant'(0x4690490)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4690930) {
              %112 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x46904f0) {
          %114 = "arith.remsi"(%103, %113) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x4690990)
            ** Replace : 'arith.remsi'(0x46904f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x4690990) {
              %114 = "llvm.srem"(%103, %112) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x46905a0) {
          %116 = "arith.addi"(%111, %115) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4690a40)
            ** Replace : 'arith.addi'(0x46905a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4690a40) {
              %116 = "llvm.add"(%110, %114) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4690650) {
          %118 = "arith.addi"(%105, %117) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4690af0)
            ** Replace : 'arith.addi'(0x4690650)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4690af0) {
              %118 = "llvm.add"(%104, %116) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.addressof'(0x4690700) {
          %120 = "llvm.mlir.addressof"() {global_name = @_rbuf} : () -> !llvm.ptr<ptr<i8>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4690760) {
          %121 = "llvm.load"(%120) : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46907f0) {
          %122 = "llvm.getelementptr"(%121, %119) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.bitcast'(0x46908a0) {
          %123 = "llvm.bitcast"(%122) : (!llvm.ptr<i8>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4694d00) {
      %125 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46940d0) {
      %126 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4694130) {
      %127 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4694190) {
      %128 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x46941f0) {
      %129 = "llvm.mlir.null"() : () -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4694250) {
      %130 = "llvm.getelementptr"(%129, %128) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x4694940) {
      %131 = "llvm.ptrtoint"(%130) : (!llvm.ptr<f32>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4694300) {
      %132 = "llvm.mlir.constant"() {value = 3735928559 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.inttoptr'(0x4694360) {
      %133 = "llvm.inttoptr"(%132) : (i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x46943f0) {
      %134 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4694450) {
      %135 = "llvm.insertvalue"(%134, %133) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4694500) {
      %136 = "llvm.insertvalue"(%135, %124) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46945b0) {
      %137 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4694610) {
      %138 = "llvm.insertvalue"(%136, %137) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x468ffb0) {
      %139 = "llvm.insertvalue"(%138, %125) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4690060) {
      %140 = "llvm.insertvalue"(%139, %126) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4690110) {
      %141 = "llvm.insertvalue"(%140, %126) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x46901c0) {
      %142 = "llvm.insertvalue"(%141, %127) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x45ff340) {
  %144 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %9) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x4691a10)
    ** Replace : 'arith.addi'(0x45ff340)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4691a10) {
      %144 = "llvm.add"(%54, %8) : (i32, i32) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x45ff3f0) {
  %146 = "arith.extsi"(%145) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extsi -> ()' {
    ** Insert  : 'llvm.sext'(0x46981a0)
    ** Replace : 'arith.extsi'(0x45ff3f0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.sext'(0x46981a0) {
      %146 = "llvm.sext"(%144) : (i32) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x45b7bb0) {
  %148 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ffc90) {
  %149 = "llvm.getelementptr"(%148) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ffd20) {
  %150 = "llvm.getelementptr"(%149, %147) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x45ffdd0) {
  %151 = "llvm.getelementptr"(%150) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x45ffe60) {
  %152 = "llvm.load"(%151) : (!llvm.ptr<i8>) -> i8

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x45ffef0) {
  %153 = "arith.ori"(%152, %7) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.ori -> ()' {
    ** Insert  : 'llvm.or'(0x4691ac0)
    ** Replace : 'arith.ori'(0x45ffef0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.or'(0x4691ac0) {
      %153 = "llvm.or"(%152, %6) : (i8, i8) -> i8

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x45f8960) {
  "llvm.store"(%154, %151) : (i8, !llvm.ptr<i8>) -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x45ff020) {
  "rmem.poll"(<<UNKNOWN SSA VALUE>>) {cache_id = 2 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.poll -> ()' {
    ** Insert  : 'arith.constant'(0x4691b70)
    ** Insert  : 'arith.addi'(0x4691bd0)
    ** Insert  : 'arith.extsi'(0x4691c80)
    ** Insert  : 'llvm.mlir.addressof'(0x4691d10)
    ** Insert  : 'llvm.getelementptr'(0x4691d70)
    ** Insert  : 'llvm.getelementptr'(0x4691e00)
    ** Insert  : 'arith.constant'(0x4691eb0)
    ** Insert  : 'llvm.getelementptr'(0x4691f10)
    ** Insert  : 'llvm.load'(0x4691fa0)
    ** Insert  : 'llvm.call'(0x4690f10)
    ** Erase   : 'rmem.poll'(0x45ff020)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4691b70) {
      %155 = "arith.constant"() {value = 8192 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4692160)
        ** Replace : 'arith.constant'(0x4691b70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4692160) {
          %155 = "llvm.mlir.constant"() {value = 8192 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4691bd0) {
      %157 = "arith.addi"(%54, %156) : (i32, i32) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46921c0)
        ** Replace : 'arith.addi'(0x4691bd0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46921c0) {
          %157 = "llvm.add"(%54, %155) : (i32, i32) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.extsi'(0x4691c80) {
      %159 = "arith.extsi"(%158) : (i32) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.extsi -> ()' {
        ** Insert  : 'llvm.sext'(0x4692270)
        ** Replace : 'arith.extsi'(0x4691c80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.sext'(0x4692270) {
          %159 = "llvm.sext"(%157) : (i32) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.addressof'(0x4691d10) {
      %161 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4691d70) {
      %162 = "llvm.getelementptr"(%161) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4691e00) {
      %163 = "llvm.getelementptr"(%162, %160) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4691eb0) {
      %164 = "arith.constant"() {value = 1 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4692300)
        ** Replace : 'arith.constant'(0x4691eb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4692300) {
          %164 = "llvm.mlir.constant"() {value = 1 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4691f10) {
      %166 = "llvm.getelementptr"(%163) {rawConstantIndices = array<i32: 0, 3>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i16>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4691fa0) {
      %167 = "llvm.load"(%166) : (!llvm.ptr<i16>) -> i16

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x4690f10) {
      "llvm.call"(%165, %167) {callee = @poll_qid2, fastmathFlags = #llvm.fastmath<none>} : (i32, i16) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x4600940) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4692360)
    ** Insert  : 'arith.constant'(0x46923c0)
    ** Insert  : 'arith.constant'(0x4692420)
    ** Insert  : 'scf.yield'(0x4692470)
    ** Insert  : 'scf.for'(0x46924d0)
    ** Erase   : 'scf.yield'(0x4692470)
    ** Replace : 'affine.for'(0x4600940)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4692360) {
      %168 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4697690)
        ** Replace : 'arith.constant'(0x4692360)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4697690) {
          %168 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46923c0) {
      %170 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46976f0)
        ** Replace : 'arith.constant'(0x46923c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46976f0) {
          %170 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4692420) {
      %172 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4697750)
        ** Replace : 'arith.constant'(0x4692420)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4697750) {
          %172 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4692470) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x46924d0) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x46977b0)
        ** Insert  : 'cf.br'(0x4644050)
        ** Erase   : 'affine.yield'(0x45f7a30)
        ** Insert  : 'cf.br'(0x468e810)
        ** Insert  : 'arith.cmpi'(0x4697860)
        ** Insert  : 'cf.cond_br'(0x4697900)
        ** Replace : 'scf.for'(0x46924d0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x46977b0) {
          %176 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %173) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4697a20)
            ** Replace : 'arith.addi'(0x46977b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4697a20) {
              %176 = "llvm.add"(%174, %172) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4644050) {
          "cf.br"(%177)[^bb3] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x468ccb0)
            ** Replace : 'cf.br'(0x4644050)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x468ccb0) {
              "llvm.br"(%176)[^bb3] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x468e810) {
          "cf.br"(%169)[^bb3] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4697bb0)
            ** Replace : 'cf.br'(0x468e810)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4697bb0) {
              "llvm.br"(%168)[^bb3] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4697860) {
          %175 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %171) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x4697c60)
            ** Replace : 'arith.cmpi'(0x4697860)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x4697c60) {
              %175 = "llvm.icmp"(%174, %170) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4697900) {
          "cf.cond_br"(%176)[^bb4, ^bb5] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4697d00)
            ** Replace : 'cf.cond_br'(0x4697900)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4697d00) {
              "llvm.cond_br"(%175)[^bb4, ^bb5] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x4600b00) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4697dd0)
    ** Insert  : 'arith.constant'(0x4697e30)
    ** Insert  : 'arith.constant'(0x4697e90)
    ** Insert  : 'scf.yield'(0x4698220)
    ** Insert  : 'scf.for'(0x4698280)
    ** Erase   : 'scf.yield'(0x4698220)
    ** Replace : 'affine.for'(0x4600b00)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4697dd0) {
      %177 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4698360)
        ** Replace : 'arith.constant'(0x4697dd0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4698360) {
          %177 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4697e30) {
      %179 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x469b6a0)
        ** Replace : 'arith.constant'(0x4697e30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x469b6a0) {
          %179 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4697e90) {
      %181 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x469b700)
        ** Replace : 'arith.constant'(0x4697e90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x469b700) {
          %181 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4698220) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x4698280) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x469b800)
        ** Insert  : 'cf.br'(0x469b8a0)
        ** Erase   : 'affine.yield'(0x45b7e10)
        ** Insert  : 'cf.br'(0x469b940)
        ** Insert  : 'arith.cmpi'(0x469b9f0)
        ** Insert  : 'cf.cond_br'(0x469ba90)
        ** Replace : 'scf.for'(0x4698280)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x469b800) {
          %185 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %182) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x46983c0)
            ** Replace : 'arith.addi'(0x469b800)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x46983c0) {
              %185 = "llvm.add"(%183, %181) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x469b8a0) {
          "cf.br"(%186)[^bb5] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4698460)
            ** Replace : 'cf.br'(0x469b8a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4698460) {
              "llvm.br"(%185)[^bb5] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x469b940) {
          "cf.br"(%178)[^bb5] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4698500)
            ** Replace : 'cf.br'(0x469b940)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4698500) {
              "llvm.br"(%177)[^bb5] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x469b9f0) {
          %184 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %180) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x46985b0)
            ** Replace : 'arith.cmpi'(0x469b9f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x46985b0) {
              %184 = "llvm.icmp"(%183, %179) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x469ba90) {
          "cf.cond_br"(%185)[^bb6, ^bb7] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4698650)
            ** Replace : 'cf.cond_br'(0x469ba90)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4698650) {
              "llvm.cond_br"(%184)[^bb6, ^bb7] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x45e4370) {
  "affine.store"(%13, %143, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0, d1)>} : (f32, memref<4x512xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'memref.store'(0x46670d0)
    ** Replace : 'affine.store'(0x45e4370)

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46670d0) {
      "memref.store"(%13, %143, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (f32, memref<4x512xf32>, index, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4698720)
        ** Insert  : 'llvm.mlir.constant'(0x46987b0)
        ** Insert  : 'llvm.mul'(0x4698810)
        ** Insert  : 'llvm.add'(0x46988c0)
        ** Insert  : 'llvm.getelementptr'(0x4698970)
        ** Insert  : 'llvm.store'(0x4698a10)
        ** Replace : 'memref.store'(0x46670d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4698720) {
          %186 = "llvm.extractvalue"(%142) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46987b0) {
          %187 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mul'(0x4698810) {
          %188 = "llvm.mul"(%174, %187) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46988c0) {
          %189 = "llvm.add"(%188, %183) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4698970) {
          %190 = "llvm.getelementptr"(%186, %189) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4698a10) {
          "llvm.store"(%12, %190) : (f32, !llvm.ptr<f32>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45b7e10) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f7a30) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x4600b70) {
  "affine.yield"(%91) : (i32) -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x4600040) {
  %199 = "rmem.affine.req"(%5, %15) {cache_id = 1 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t3"} : (!rmem.rmref<1, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4698ba0)
    ** Insert  : 'affine.apply'(0x4698c30)
    ** Insert  : 'arith.index_cast'(0x4698cc0)
    ** Insert  : 'llvm.extractvalue'(0x4698d50)
    ** Insert  : 'arith.addi'(0x4698de0)
    ** Insert  : 'llvm.getelementptr'(0x4698e90)
    ** Insert  : 'rmem.request'(0x4698f40)
    ** Replace : 'rmem.affine.req'(0x4600040)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4698ba0) {
      %200 = "llvm.extractvalue"(%6) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4698c30) {
      %201 = "affine.apply"(%16) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
        ** Insert  : 'arith.constant'(0x4699060)
        ** Replace : 'affine.apply'(0x4698c30)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4699060) {
          %201 = "arith.constant"() {value = 0 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46990c0)
            ** Replace : 'arith.constant'(0x4699060)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46990c0) {
              %201 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS
    } -> SUCCESS : operation was folded
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4698cc0) {
      %204 = "arith.index_cast"(%203) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4698cc0)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4698d50) {
      %205 = "llvm.extractvalue"(%6) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4698de0) {
      %206 = "arith.addi"(%204, %205) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4699120)
        ** Replace : 'arith.addi'(0x4698de0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4699120) {
          %206 = "llvm.add"(%201, %205) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4698e90) {
      %208 = "llvm.getelementptr"(%200, %207) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x4698f40) {
      %209 = "rmem.request"(%208) {cache_id = 1 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x4698fd0)
        ** Insert  : 'arith.constant'(0x46991d0)
        ** Insert  : 'arith.andi'(0x4699230)
        ** Insert  : 'arith.constant'(0x46992e0)
        ** Insert  : 'arith.divui'(0x4699340)
        ** Insert  : 'arith.constant'(0x46993f0)
        ** Insert  : 'arith.remsi'(0x4699450)
        ** Insert  : 'arith.trunci'(0x4699500)
        ** Insert  : 'arith.constant'(0x4699590)
        ** Insert  : 'arith.constant'(0x4699650)
        ** Insert  : 'llvm.call'(0x46996b0)
        ** Replace : 'rmem.request'(0x4698f40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x4698fd0) {
          %209 = "llvm.ptrtoint"(%208) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46991d0) {
          %210 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46997a0)
            ** Replace : 'arith.constant'(0x46991d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46997a0) {
              %210 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x4699230) {
          %212 = "arith.andi"(%209, %211) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x4699800)
            ** Replace : 'arith.andi'(0x4699230)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x4699800) {
              %212 = "llvm.and"(%209, %210) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46992e0) {
          %214 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46998b0)
            ** Replace : 'arith.constant'(0x46992e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46998b0) {
              %214 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x4699340) {
          %216 = "arith.divui"(%213, %215) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x4699910)
            ** Replace : 'arith.divui'(0x4699340)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x4699910) {
              %216 = "llvm.udiv"(%212, %214) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46993f0) {
          %218 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46999c0)
            ** Replace : 'arith.constant'(0x46993f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46999c0) {
              %218 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x4699450) {
          %220 = "arith.remsi"(%217, %219) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x4699a20)
            ** Replace : 'arith.remsi'(0x4699450)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x4699a20) {
              %220 = "llvm.srem"(%216, %218) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x4699500) {
          %222 = "arith.trunci"(%221) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x4699ad0)
            ** Replace : 'arith.trunci'(0x4699500)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x4699ad0) {
              %222 = "llvm.trunc"(%220) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4699590) {
          %224 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4699b60)
            ** Replace : 'arith.constant'(0x4699590)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4699b60) {
              %224 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4699650) {
          %226 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4699bc0)
            ** Replace : 'arith.constant'(0x4699650)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4699bc0) {
              %226 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x46996b0) {
          %228 = "llvm.call"(%225, %213, %223, %227) {callee = @cache_request_impl_1, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x4600c00) {
  %231 = "rmem.affine.req"(%3, %16) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t2"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4699c20)
    ** Insert  : 'affine.apply'(0x4699cb0)
    ** Insert  : 'arith.index_cast'(0x4699d40)
    ** Insert  : 'llvm.extractvalue'(0x4699dd0)
    ** Insert  : 'arith.addi'(0x4699e60)
    ** Insert  : 'llvm.getelementptr'(0x4699f10)
    ** Insert  : 'rmem.request'(0x4699fc0)
    ** Replace : 'rmem.affine.req'(0x4600c00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4699c20) {
      %231 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x4699cb0) {
      %232 = "affine.apply"(%16) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
        ** Insert  : 'arith.constant'(0x469a0e0)
        ** Replace : 'affine.apply'(0x4699cb0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469a0e0) {
          %232 = "arith.constant"() {value = 0 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469a140)
            ** Replace : 'arith.constant'(0x469a0e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469a140) {
              %232 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS
    } -> SUCCESS : operation was folded
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x4699d40) {
      %235 = "arith.index_cast"(%234) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x4699d40)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4699dd0) {
      %236 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4699e60) {
      %237 = "arith.addi"(%235, %236) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x469a1a0)
        ** Replace : 'arith.addi'(0x4699e60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x469a1a0) {
          %237 = "llvm.add"(%232, %236) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4699f10) {
      %239 = "llvm.getelementptr"(%231, %238) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x4699fc0) {
      %240 = "rmem.request"(%239) {cache_id = 2 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x469a050)
        ** Insert  : 'arith.constant'(0x469a250)
        ** Insert  : 'arith.andi'(0x469a2b0)
        ** Insert  : 'arith.constant'(0x469a360)
        ** Insert  : 'arith.divui'(0x469a3c0)
        ** Insert  : 'arith.constant'(0x469a470)
        ** Insert  : 'arith.remsi'(0x469a4d0)
        ** Insert  : 'arith.trunci'(0x469a580)
        ** Insert  : 'arith.constant'(0x469a610)
        ** Insert  : 'arith.constant'(0x469a670)
        ** Insert  : 'llvm.call'(0x469a6d0)
        ** Replace : 'rmem.request'(0x4699fc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x469a050) {
          %240 = "llvm.ptrtoint"(%239) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469a250) {
          %241 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469a7c0)
            ** Replace : 'arith.constant'(0x469a250)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469a7c0) {
              %241 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x469a2b0) {
          %243 = "arith.andi"(%240, %242) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x469a820)
            ** Replace : 'arith.andi'(0x469a2b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x469a820) {
              %243 = "llvm.and"(%240, %241) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469a360) {
          %245 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469a8d0)
            ** Replace : 'arith.constant'(0x469a360)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469a8d0) {
              %245 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x469a3c0) {
          %247 = "arith.divui"(%244, %246) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x469a930)
            ** Replace : 'arith.divui'(0x469a3c0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x469a930) {
              %247 = "llvm.udiv"(%243, %245) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469a470) {
          %249 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469a9e0)
            ** Replace : 'arith.constant'(0x469a470)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469a9e0) {
              %249 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x469a4d0) {
          %251 = "arith.remsi"(%248, %250) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x469aa40)
            ** Replace : 'arith.remsi'(0x469a4d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x469aa40) {
              %251 = "llvm.srem"(%247, %249) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x469a580) {
          %253 = "arith.trunci"(%252) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x469aaf0)
            ** Replace : 'arith.trunci'(0x469a580)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x469aaf0) {
              %253 = "llvm.trunc"(%251) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469a610) {
          %255 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469ab80)
            ** Replace : 'arith.constant'(0x469a610)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469ab80) {
              %255 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469a670) {
          %257 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469abe0)
            ** Replace : 'arith.constant'(0x469a670)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469abe0) {
              %257 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x469a6d0) {
          %259 = "llvm.call"(%256, %244, %254, %258) {callee = @cache_request_impl_2, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x4601be0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x469ac40)
    ** Insert  : 'arith.constant'(0x469aca0)
    ** Insert  : 'arith.constant'(0x469ad00)
    ** Insert  : 'scf.for'(0x469adc0)
    ** Replace : 'affine.for'(0x4601be0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x469ac40) {
      %262 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x469b470)
        ** Replace : 'arith.constant'(0x469ac40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x469b470) {
          %262 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x469aca0) {
      %264 = "arith.constant"() {value = 64512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x469b3e0)
        ** Replace : 'arith.constant'(0x469aca0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x469b3e0) {
          %264 = "llvm.mlir.constant"() {value = 64512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x469ad00) {
      %266 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x469b4d0)
        ** Replace : 'arith.constant'(0x469ad00)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x469b4d0) {
          %266 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x469adc0) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x469b580)
        ** Insert  : 'cf.br'(0x4666a70)
        ** Erase   : 'affine.yield'(0x460a850)
        ** Insert  : 'cf.br'(0x4667730)
        ** Insert  : 'arith.cmpi'(0x469aee0)
        ** Insert  : 'cf.cond_br'(0x469af80)
        ** Replace : 'scf.for'(0x469adc0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x469b580) {
          %285 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %267) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x469b2d0)
            ** Replace : 'arith.addi'(0x469b580)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x469b2d0) {
              %285 = "llvm.add"(%268, %266) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4666a70) {
          "cf.br"(%286, %273, %274)[^bb10] : (index, i32, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4667db0)
            ** Replace : 'cf.br'(0x4666a70)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4667db0) {
              "llvm.br"(%285, %273, %274)[^bb10] : (i64, i32, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4667730) {
          "cf.br"(%263, %230, %261)[^bb10] : (index, i32, i32) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4667610)
            ** Replace : 'cf.br'(0x4667730)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4667610) {
              "llvm.br"(%262, %222, %253)[^bb10] : (i64, i32, i32) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x469aee0) {
          %271 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %265) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x46a01e0)
            ** Replace : 'arith.cmpi'(0x469aee0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x46a01e0) {
              %271 = "llvm.icmp"(%268, %264) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x469af80) {
          "cf.cond_br"(%272)[^bb11, ^bb12] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x46a0530)
            ** Replace : 'cf.cond_br'(0x469af80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x46a0530) {
              "llvm.cond_br"(%271)[^bb11, ^bb12] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x46015a0) {
  %273 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %12) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x46a07b0)
    ** Replace : 'arith.addi'(0x46015a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46a07b0) {
      %273 = "llvm.add"(%268, %11) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x4601650) {
  %275 = "rmem.affine.req"(%5, %274) {cache_id = 1 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t3"} : (!rmem.rmref<1, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46a08d0)
    ** Insert  : 'affine.apply'(0x46a09c0)
    ** Insert  : 'arith.index_cast'(0x46a0600)
    ** Insert  : 'llvm.extractvalue'(0x46a0690)
    ** Insert  : 'arith.addi'(0x46a02a0)
    ** Insert  : 'llvm.getelementptr'(0x46a0350)
    ** Insert  : 'rmem.request'(0x46a0720)
    ** Replace : 'rmem.affine.req'(0x4601650)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46a08d0) {
      %275 = "llvm.extractvalue"(%6) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x46a09c0) {
      %276 = "affine.apply"(%274) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x46a0490)
        ** Insert  : 'arith.muli'(0x469c410)
        ** Replace : 'affine.apply'(0x46a09c0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46a0490) {
          %276 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469c4c0)
            ** Replace : 'arith.constant'(0x46a0490)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469c4c0) {
              %276 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x469c410) {
          %278 = "arith.muli"(%274, %277) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x469c520)
            ** Replace : 'arith.muli'(0x469c410)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x469c520) {
              %278 = "llvm.mul"(%273, %276) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x46a0600) {
      %281 = "arith.index_cast"(%280) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x46a0600)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46a0690) {
      %282 = "llvm.extractvalue"(%6) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46a02a0) {
      %283 = "arith.addi"(%281, %282) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x469c5d0)
        ** Replace : 'arith.addi'(0x46a02a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x469c5d0) {
          %283 = "llvm.add"(%278, %282) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46a0350) {
      %285 = "llvm.getelementptr"(%275, %284) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x46a0720) {
      %286 = "rmem.request"(%285) {cache_id = 1 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x46a0400)
        ** Insert  : 'arith.constant'(0x469c680)
        ** Insert  : 'arith.andi'(0x469c6e0)
        ** Insert  : 'arith.constant'(0x469c790)
        ** Insert  : 'arith.divui'(0x469c7f0)
        ** Insert  : 'arith.constant'(0x469c8a0)
        ** Insert  : 'arith.remsi'(0x469c900)
        ** Insert  : 'arith.trunci'(0x469c9b0)
        ** Insert  : 'arith.constant'(0x469ca40)
        ** Insert  : 'arith.constant'(0x469caa0)
        ** Insert  : 'llvm.call'(0x469cb00)
        ** Replace : 'rmem.request'(0x46a0720)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x46a0400) {
          %286 = "llvm.ptrtoint"(%285) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469c680) {
          %287 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469cbf0)
            ** Replace : 'arith.constant'(0x469c680)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469cbf0) {
              %287 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x469c6e0) {
          %289 = "arith.andi"(%286, %288) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x469cc50)
            ** Replace : 'arith.andi'(0x469c6e0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x469cc50) {
              %289 = "llvm.and"(%286, %287) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469c790) {
          %291 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469cd00)
            ** Replace : 'arith.constant'(0x469c790)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469cd00) {
              %291 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x469c7f0) {
          %293 = "arith.divui"(%290, %292) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x469cd60)
            ** Replace : 'arith.divui'(0x469c7f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x469cd60) {
              %293 = "llvm.udiv"(%289, %291) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469c8a0) {
          %295 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469ce10)
            ** Replace : 'arith.constant'(0x469c8a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469ce10) {
              %295 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x469c900) {
          %297 = "arith.remsi"(%294, %296) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x469ce70)
            ** Replace : 'arith.remsi'(0x469c900)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x469ce70) {
              %297 = "llvm.srem"(%293, %295) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x469c9b0) {
          %299 = "arith.trunci"(%298) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x469cf20)
            ** Replace : 'arith.trunci'(0x469c9b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x469cf20) {
              %299 = "llvm.trunc"(%297) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469ca40) {
          %301 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469cfb0)
            ** Replace : 'arith.constant'(0x469ca40)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469cfb0) {
              %301 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469caa0) {
          %303 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469d010)
            ** Replace : 'arith.constant'(0x469caa0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469d010) {
              %303 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x469cb00) {
          %305 = "llvm.call"(%302, %290, %300, %304) {callee = @cache_request_impl_1, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.req'(0x4601700) {
  %308 = "rmem.affine.req"(%3, %274) {cache_id = 2 : i32, map = affine_map<(d0) -> (d0 * 512)>, mem = "t2"} : (!rmem.rmref<2, memref<64512x512xf32>>, index) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.req -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x469d070)
    ** Insert  : 'affine.apply'(0x469d100)
    ** Insert  : 'arith.index_cast'(0x469d190)
    ** Insert  : 'llvm.extractvalue'(0x469d220)
    ** Insert  : 'arith.addi'(0x469d2b0)
    ** Insert  : 'llvm.getelementptr'(0x469d360)
    ** Insert  : 'rmem.request'(0x469d410)
    ** Replace : 'rmem.affine.req'(0x4601700)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x469d070) {
      %308 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x469d100) {
      %309 = "affine.apply"(%274) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x469d530)
        ** Insert  : 'arith.muli'(0x469d590)
        ** Replace : 'affine.apply'(0x469d100)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469d530) {
          %309 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469d640)
            ** Replace : 'arith.constant'(0x469d530)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469d640) {
              %309 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x469d590) {
          %311 = "arith.muli"(%274, %310) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x469d6a0)
            ** Replace : 'arith.muli'(0x469d590)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x469d6a0) {
              %311 = "llvm.mul"(%273, %309) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x469d190) {
      %314 = "arith.index_cast"(%313) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x469d190)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x469d220) {
      %315 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x469d2b0) {
      %316 = "arith.addi"(%314, %315) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x469d750)
        ** Replace : 'arith.addi'(0x469d2b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x469d750) {
          %316 = "llvm.add"(%311, %315) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x469d360) {
      %318 = "llvm.getelementptr"(%308, %317) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.request'(0x469d410) {
      %319 = "rmem.request"(%318) {cache_id = 2 : i32} : (!llvm.ptr<f32>) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.request -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x469d4a0)
        ** Insert  : 'arith.constant'(0x469d800)
        ** Insert  : 'arith.andi'(0x469d860)
        ** Insert  : 'arith.constant'(0x469d910)
        ** Insert  : 'arith.divui'(0x469d970)
        ** Insert  : 'arith.constant'(0x469da20)
        ** Insert  : 'arith.remsi'(0x469da80)
        ** Insert  : 'arith.trunci'(0x469db30)
        ** Insert  : 'arith.constant'(0x469dbc0)
        ** Insert  : 'arith.constant'(0x469dc20)
        ** Insert  : 'llvm.call'(0x469dc80)
        ** Replace : 'rmem.request'(0x469d410)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x469d4a0) {
          %319 = "llvm.ptrtoint"(%318) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469d800) {
          %320 = "arith.constant"() {value = -8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469dd70)
            ** Replace : 'arith.constant'(0x469d800)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469dd70) {
              %320 = "llvm.mlir.constant"() {value = -8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.andi'(0x469d860) {
          %322 = "arith.andi"(%319, %321) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.andi -> ()' {
            ** Insert  : 'llvm.and'(0x469ddd0)
            ** Replace : 'arith.andi'(0x469d860)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.and'(0x469ddd0) {
              %322 = "llvm.and"(%319, %320) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469d910) {
          %324 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469de80)
            ** Replace : 'arith.constant'(0x469d910)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469de80) {
              %324 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.divui'(0x469d970) {
          %326 = "arith.divui"(%323, %325) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.divui -> ()' {
            ** Insert  : 'llvm.udiv'(0x469dee0)
            ** Replace : 'arith.divui'(0x469d970)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.udiv'(0x469dee0) {
              %326 = "llvm.udiv"(%322, %324) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469da20) {
          %328 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469df90)
            ** Replace : 'arith.constant'(0x469da20)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469df90) {
              %328 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x469da80) {
          %330 = "arith.remsi"(%327, %329) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x469dff0)
            ** Replace : 'arith.remsi'(0x469da80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x469dff0) {
              %330 = "llvm.srem"(%326, %328) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.trunci'(0x469db30) {
          %332 = "arith.trunci"(%331) : (i64) -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.trunci -> ()' {
            ** Insert  : 'llvm.trunc'(0x469e0a0)
            ** Replace : 'arith.trunci'(0x469db30)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.trunc'(0x469e0a0) {
              %332 = "llvm.trunc"(%330) : (i64) -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469dbc0) {
          %334 = "arith.constant"() {value = 0 : i32} : () -> i32

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469e130)
            ** Replace : 'arith.constant'(0x469dbc0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469e130) {
              %334 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469dc20) {
          %336 = "arith.constant"() {value = 1 : i8} : () -> i8

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469e190)
            ** Replace : 'arith.constant'(0x469dc20)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469e190) {
              %336 = "llvm.mlir.constant"() {value = 1 : i8} : () -> i8

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.call'(0x469dc80) {
          %338 = "llvm.call"(%335, %323, %333, %337) {callee = @cache_request_impl_2, fastmathFlags = #llvm.fastmath<none>} : (i32, i64, i32, i8) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x46017b0) {
  %341 = "rmem.affine.paddr"(<<UNKNOWN SSA VALUE>>, %5, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<1, memref<64512x512xf32>>, index) -> memref<1x2048xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.paddr -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x469e1f0)
    ** Insert  : 'affine.apply'(0x469e280)
    ** Insert  : 'arith.index_cast'(0x469e310)
    ** Insert  : 'llvm.extractvalue'(0x469e3a0)
    ** Insert  : 'arith.addi'(0x469e430)
    ** Insert  : 'llvm.getelementptr'(0x469e4e0)
    ** Insert  : 'rmem.paddr'(0x469e590)
    ** Insert  : 'llvm.mlir.constant'(0x469e640)
    ** Insert  : 'llvm.mlir.constant'(0x469e6a0)
    ** Insert  : 'llvm.mlir.constant'(0x469e700)
    ** Insert  : 'llvm.mlir.constant'(0x469e760)
    ** Insert  : 'llvm.mlir.null'(0x469e7c0)
    ** Insert  : 'llvm.getelementptr'(0x469e820)
    ** Insert  : 'llvm.ptrtoint'(0x469e8d0)
    ** Insert  : 'llvm.mlir.constant'(0x469e960)
    ** Insert  : 'llvm.inttoptr'(0x469e9c0)
    ** Insert  : 'llvm.mlir.undef'(0x469ea50)
    ** Insert  : 'llvm.insertvalue'(0x469eab0)
    ** Insert  : 'llvm.insertvalue'(0x469eb60)
    ** Insert  : 'llvm.mlir.constant'(0x469ec10)
    ** Insert  : 'llvm.insertvalue'(0x469ec70)
    ** Insert  : 'llvm.insertvalue'(0x469ed20)
    ** Insert  : 'llvm.insertvalue'(0x469edd0)
    ** Insert  : 'llvm.insertvalue'(0x469ee80)
    ** Insert  : 'llvm.insertvalue'(0x469ef30)
    ** Replace : 'rmem.affine.paddr'(0x46017b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x469e1f0) {
      %341 = "llvm.extractvalue"(%6) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x469e280) {
      %342 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x469f070)
        ** Insert  : 'arith.muli'(0x469f0d0)
        ** Replace : 'affine.apply'(0x469e280)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469f070) {
          %342 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469f180)
            ** Replace : 'arith.constant'(0x469f070)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469f180) {
              %342 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x469f0d0) {
          %344 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %343) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x469f1e0)
            ** Replace : 'arith.muli'(0x469f0d0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x469f1e0) {
              %344 = "llvm.mul"(%268, %342) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x469e310) {
      %347 = "arith.index_cast"(%346) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x469e310)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x469e3a0) {
      %348 = "llvm.extractvalue"(%6) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x469e430) {
      %349 = "arith.addi"(%347, %348) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x469f290)
        ** Replace : 'arith.addi'(0x469e430)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x469f290) {
          %349 = "llvm.add"(%344, %348) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x469e4e0) {
      %351 = "llvm.getelementptr"(%341, %350) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.paddr'(0x469e590) {
      %352 = "rmem.paddr"(%269, %351) {cache_id = 1 : i32} : (i32, !llvm.ptr<f32>) -> !llvm.ptr<f32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.paddr -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x469efe0)
        ** Insert  : 'arith.constant'(0x469f340)
        ** Insert  : 'arith.extsi'(0x469f3a0)
        ** Insert  : 'arith.constant'(0x469f430)
        ** Insert  : 'arith.muli'(0x469f490)
        ** Insert  : 'arith.constant'(0x469f540)
        ** Insert  : 'arith.remsi'(0x469f5a0)
        ** Insert  : 'arith.addi'(0x469f650)
        ** Insert  : 'arith.addi'(0x469f700)
        ** Insert  : 'llvm.mlir.addressof'(0x469f7b0)
        ** Insert  : 'llvm.load'(0x469f810)
        ** Insert  : 'llvm.getelementptr'(0x469f8a0)
        ** Insert  : 'llvm.bitcast'(0x469f950)
        ** Replace : 'rmem.paddr'(0x469e590)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x469efe0) {
          %352 = "llvm.ptrtoint"(%351) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469f340) {
          %353 = "arith.constant"() {value = 0 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469f9e0)
            ** Replace : 'arith.constant'(0x469f340)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469f9e0) {
              %353 = "llvm.mlir.constant"() {value = 0 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extsi'(0x469f3a0) {
          %355 = "arith.extsi"(%269) : (i32) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.extsi -> ()' {
            ** Insert  : 'llvm.sext'(0x469fa40)
            ** Replace : 'arith.extsi'(0x469f3a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.sext'(0x469fa40) {
              %355 = "llvm.sext"(%269) : (i32) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469f430) {
          %357 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469fad0)
            ** Replace : 'arith.constant'(0x469f430)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469fad0) {
              %357 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x469f490) {
          %359 = "arith.muli"(%356, %358) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x469fb30)
            ** Replace : 'arith.muli'(0x469f490)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x469fb30) {
              %359 = "llvm.mul"(%355, %357) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x469f540) {
          %361 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x469fbe0)
            ** Replace : 'arith.constant'(0x469f540)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x469fbe0) {
              %361 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x469f5a0) {
          %363 = "arith.remsi"(%352, %362) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x469fc40)
            ** Replace : 'arith.remsi'(0x469f5a0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x469fc40) {
              %363 = "llvm.srem"(%352, %361) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x469f650) {
          %365 = "arith.addi"(%360, %364) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x469fcf0)
            ** Replace : 'arith.addi'(0x469f650)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x469fcf0) {
              %365 = "llvm.add"(%359, %363) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x469f700) {
          %367 = "arith.addi"(%354, %366) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x469fda0)
            ** Replace : 'arith.addi'(0x469f700)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x469fda0) {
              %367 = "llvm.add"(%353, %365) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.addressof'(0x469f7b0) {
          %369 = "llvm.mlir.addressof"() {global_name = @_rbuf} : () -> !llvm.ptr<ptr<i8>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x469f810) {
          %370 = "llvm.load"(%369) : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x469f8a0) {
          %371 = "llvm.getelementptr"(%370, %368) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.bitcast'(0x469f950) {
          %372 = "llvm.bitcast"(%371) : (!llvm.ptr<i8>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x469e640) {
      %374 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x469e6a0) {
      %375 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x469e700) {
      %376 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x469e760) {
      %377 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x469e7c0) {
      %378 = "llvm.mlir.null"() : () -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x469e820) {
      %379 = "llvm.getelementptr"(%378, %377) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x469e8d0) {
      %380 = "llvm.ptrtoint"(%379) : (!llvm.ptr<f32>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x469e960) {
      %381 = "llvm.mlir.constant"() {value = 3735928559 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.inttoptr'(0x469e9c0) {
      %382 = "llvm.inttoptr"(%381) : (i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x469ea50) {
      %383 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x469eab0) {
      %384 = "llvm.insertvalue"(%383, %382) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x469eb60) {
      %385 = "llvm.insertvalue"(%384, %373) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x469ec10) {
      %386 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x469ec70) {
      %387 = "llvm.insertvalue"(%385, %386) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x469ed20) {
      %388 = "llvm.insertvalue"(%387, %374) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x469edd0) {
      %389 = "llvm.insertvalue"(%388, %375) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x469ee80) {
      %390 = "llvm.insertvalue"(%389, %375) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x469ef30) {
      %391 = "llvm.insertvalue"(%390, %376) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.affine.paddr'(0x4601880) {
  %393 = "rmem.affine.paddr"(<<UNKNOWN SSA VALUE>>, %3, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (i32, !rmem.rmref<2, memref<64512x512xf32>>, index) -> memref<1x2048xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.affine.paddr -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x469fe50)
    ** Insert  : 'affine.apply'(0x469fee0)
    ** Insert  : 'arith.index_cast'(0x469ff70)
    ** Insert  : 'llvm.extractvalue'(0x46a0000)
    ** Insert  : 'arith.addi'(0x46a0090)
    ** Insert  : 'llvm.getelementptr'(0x4675860)
    ** Insert  : 'rmem.paddr'(0x4675910)
    ** Insert  : 'llvm.mlir.constant'(0x46759c0)
    ** Insert  : 'llvm.mlir.constant'(0x4675a20)
    ** Insert  : 'llvm.mlir.constant'(0x4675a80)
    ** Insert  : 'llvm.mlir.constant'(0x4675ae0)
    ** Insert  : 'llvm.mlir.null'(0x4675b40)
    ** Insert  : 'llvm.getelementptr'(0x4675ba0)
    ** Insert  : 'llvm.ptrtoint'(0x4675c50)
    ** Insert  : 'llvm.mlir.constant'(0x4675ce0)
    ** Insert  : 'llvm.inttoptr'(0x4675d40)
    ** Insert  : 'llvm.mlir.undef'(0x4675dd0)
    ** Insert  : 'llvm.insertvalue'(0x4675e30)
    ** Insert  : 'llvm.insertvalue'(0x4675ee0)
    ** Insert  : 'llvm.mlir.constant'(0x4675f90)
    ** Insert  : 'llvm.insertvalue'(0x4675ff0)
    ** Insert  : 'llvm.insertvalue'(0x46760a0)
    ** Insert  : 'llvm.insertvalue'(0x4676150)
    ** Insert  : 'llvm.insertvalue'(0x4676200)
    ** Insert  : 'llvm.insertvalue'(0x46762b0)
    ** Replace : 'rmem.affine.paddr'(0x4601880)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x469fe50) {
      %393 = "llvm.extractvalue"(%4) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'affine.apply'(0x469fee0) {
      %394 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 * 512)>} : (index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'affine.apply -> ()' {
        ** Insert  : 'arith.constant'(0x46a0140)
        ** Insert  : 'arith.muli'(0x46763f0)
        ** Replace : 'affine.apply'(0x469fee0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x46a0140) {
          %394 = "arith.constant"() {value = 512 : index} : () -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x46764a0)
            ** Replace : 'arith.constant'(0x46a0140)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x46764a0) {
              %394 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x46763f0) {
          %396 = "arith.muli"(<<UNKNOWN SSA VALUE>>, %395) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x4676500)
            ** Replace : 'arith.muli'(0x46763f0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x4676500) {
              %396 = "llvm.mul"(%268, %394) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.index_cast'(0x469ff70) {
      %399 = "arith.index_cast"(%398) : (index) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.index_cast -> ()' {
        ** Replace : 'arith.index_cast'(0x469ff70)
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46a0000) {
      %400 = "llvm.extractvalue"(%4) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46a0090) {
      %401 = "arith.addi"(%399, %400) : (i64, i64) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46765b0)
        ** Replace : 'arith.addi'(0x46a0090)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46765b0) {
          %401 = "llvm.add"(%396, %400) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4675860) {
      %403 = "llvm.getelementptr"(%393, %402) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'rmem.paddr'(0x4675910) {
      %404 = "rmem.paddr"(%270, %403) {cache_id = 2 : i32} : (i32, !llvm.ptr<f32>) -> !llvm.ptr<f32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'rmem.paddr -> ()' {
        ** Insert  : 'llvm.ptrtoint'(0x4676360)
        ** Insert  : 'arith.constant'(0x4676660)
        ** Insert  : 'arith.extsi'(0x46766c0)
        ** Insert  : 'arith.constant'(0x4676750)
        ** Insert  : 'arith.muli'(0x46767b0)
        ** Insert  : 'arith.constant'(0x4676860)
        ** Insert  : 'arith.remsi'(0x46768c0)
        ** Insert  : 'arith.addi'(0x4676970)
        ** Insert  : 'arith.addi'(0x4676a20)
        ** Insert  : 'llvm.mlir.addressof'(0x4676ad0)
        ** Insert  : 'llvm.load'(0x4676b30)
        ** Insert  : 'llvm.getelementptr'(0x4676bc0)
        ** Insert  : 'llvm.bitcast'(0x4676c70)
        ** Replace : 'rmem.paddr'(0x4675910)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.ptrtoint'(0x4676360) {
          %404 = "llvm.ptrtoint"(%403) : (!llvm.ptr<f32>) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4676660) {
          %405 = "arith.constant"() {value = 67108864 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4676d00)
            ** Replace : 'arith.constant'(0x4676660)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4676d00) {
              %405 = "llvm.mlir.constant"() {value = 67108864 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.extsi'(0x46766c0) {
          %407 = "arith.extsi"(%270) : (i32) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.extsi -> ()' {
            ** Insert  : 'llvm.sext'(0x4676d60)
            ** Replace : 'arith.extsi'(0x46766c0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.sext'(0x4676d60) {
              %407 = "llvm.sext"(%270) : (i32) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4676750) {
          %409 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4676df0)
            ** Replace : 'arith.constant'(0x4676750)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4676df0) {
              %409 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.muli'(0x46767b0) {
          %411 = "arith.muli"(%408, %410) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.muli -> ()' {
            ** Insert  : 'llvm.mul'(0x4676e50)
            ** Replace : 'arith.muli'(0x46767b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mul'(0x4676e50) {
              %411 = "llvm.mul"(%407, %409) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.constant'(0x4676860) {
          %413 = "arith.constant"() {value = 8192 : i64} : () -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.constant -> ()' {
            ** Insert  : 'llvm.mlir.constant'(0x4676f00)
            ** Replace : 'arith.constant'(0x4676860)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.mlir.constant'(0x4676f00) {
              %413 = "llvm.mlir.constant"() {value = 8192 : i64} : () -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.remsi'(0x46768c0) {
          %415 = "arith.remsi"(%404, %414) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.remsi -> ()' {
            ** Insert  : 'llvm.srem'(0x4676f60)
            ** Replace : 'arith.remsi'(0x46768c0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.srem'(0x4676f60) {
              %415 = "llvm.srem"(%404, %413) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4676970) {
          %417 = "arith.addi"(%412, %416) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4677010)
            ** Replace : 'arith.addi'(0x4676970)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4677010) {
              %417 = "llvm.add"(%411, %415) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4676a20) {
          %419 = "arith.addi"(%406, %418) : (i64, i64) -> i64

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x46770c0)
            ** Replace : 'arith.addi'(0x4676a20)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x46770c0) {
              %419 = "llvm.add"(%405, %417) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.addressof'(0x4676ad0) {
          %421 = "llvm.mlir.addressof"() {global_name = @_rbuf} : () -> !llvm.ptr<ptr<i8>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4676b30) {
          %422 = "llvm.load"(%421) : (!llvm.ptr<ptr<i8>>) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4676bc0) {
          %423 = "llvm.getelementptr"(%422, %420) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.bitcast'(0x4676c70) {
          %424 = "llvm.bitcast"(%423) : (!llvm.ptr<i8>) -> !llvm.ptr<f32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46759c0) {
      %426 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4675a20) {
      %427 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4675a80) {
      %428 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4675ae0) {
      %429 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x4675b40) {
      %430 = "llvm.mlir.null"() : () -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4675ba0) {
      %431 = "llvm.getelementptr"(%430, %429) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x4675c50) {
      %432 = "llvm.ptrtoint"(%431) : (!llvm.ptr<f32>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4675ce0) {
      %433 = "llvm.mlir.constant"() {value = 3735928559 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.inttoptr'(0x4675d40) {
      %434 = "llvm.inttoptr"(%433) : (i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x4675dd0) {
      %435 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4675e30) {
      %436 = "llvm.insertvalue"(%435, %434) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4675ee0) {
      %437 = "llvm.insertvalue"(%436, %425) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr<f32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4675f90) {
      %438 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4675ff0) {
      %439 = "llvm.insertvalue"(%437, %438) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x46760a0) {
      %440 = "llvm.insertvalue"(%439, %426) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4676150) {
      %441 = "llvm.insertvalue"(%440, %427) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4676200) {
      %442 = "llvm.insertvalue"(%441, %427) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x46762b0) {
      %443 = "llvm.insertvalue"(%442, %428) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, i64) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4601950) {
  %445 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %10) : (i32, i32) -> i32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x4677200)
    ** Replace : 'arith.addi'(0x4601950)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4677200) {
      %445 = "llvm.add"(%270, %9) : (i32, i32) -> i32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.extsi'(0x4601a00) {
  %447 = "arith.extsi"(%446) : (i32) -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.extsi -> ()' {
    ** Insert  : 'llvm.sext'(0x4677170)
    ** Replace : 'arith.extsi'(0x4601a00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.sext'(0x4677170) {
      %447 = "llvm.sext"(%445) : (i32) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.addressof'(0x45ecc10) {
  %449 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x4601a90) {
  %450 = "llvm.getelementptr"(%449) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x4601b20) {
  %451 = "llvm.getelementptr"(%450, %448) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.getelementptr'(0x46014c0) {
  %452 = "llvm.getelementptr"(%451) {rawConstantIndices = array<i32: 0, 1>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i8>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.load'(0x4601d70) {
  %453 = "llvm.load"(%452) : (!llvm.ptr<i8>) -> i8

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.ori'(0x4601e00) {
  %454 = "arith.ori"(%453, %8) : (i8, i8) -> i8

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.ori -> ()' {
    ** Insert  : 'llvm.or'(0x46772b0)
    ** Replace : 'arith.ori'(0x4601e00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.or'(0x46772b0) {
      %454 = "llvm.or"(%453, %7) : (i8, i8) -> i8

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.store'(0x4601ea0) {
  "llvm.store"(%455, %452) : (i8, !llvm.ptr<i8>) -> ()

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.poll'(0x4601f40) {
  "rmem.poll"(<<UNKNOWN SSA VALUE>>) {cache_id = 2 : i32} : (i32) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.poll -> ()' {
    ** Insert  : 'arith.constant'(0x4677360)
    ** Insert  : 'arith.addi'(0x46773c0)
    ** Insert  : 'arith.extsi'(0x4677470)
    ** Insert  : 'llvm.mlir.addressof'(0x4677500)
    ** Insert  : 'llvm.getelementptr'(0x4677560)
    ** Insert  : 'llvm.getelementptr'(0x46775f0)
    ** Insert  : 'arith.constant'(0x46776a0)
    ** Insert  : 'llvm.getelementptr'(0x4677700)
    ** Insert  : 'llvm.load'(0x4677790)
    ** Insert  : 'llvm.call'(0x4677810)
    ** Erase   : 'rmem.poll'(0x4601f40)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4677360) {
      %456 = "arith.constant"() {value = 8192 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46778c0)
        ** Replace : 'arith.constant'(0x4677360)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46778c0) {
          %456 = "llvm.mlir.constant"() {value = 8192 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46773c0) {
      %458 = "arith.addi"(%270, %457) : (i32, i32) -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4677920)
        ** Replace : 'arith.addi'(0x46773c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4677920) {
          %458 = "llvm.add"(%270, %456) : (i32, i32) -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.extsi'(0x4677470) {
      %460 = "arith.extsi"(%459) : (i32) -> i64

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.extsi -> ()' {
        ** Insert  : 'llvm.sext'(0x46779d0)
        ** Replace : 'arith.extsi'(0x4677470)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.sext'(0x46779d0) {
          %460 = "llvm.sext"(%458) : (i32) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.addressof'(0x4677500) {
      %462 = "llvm.mlir.addressof"() {global_name = @tokens} : () -> !llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4677560) {
      %463 = "llvm.getelementptr"(%462) {rawConstantIndices = array<i32: 0, 0>} : (!llvm.ptr<array<33554432 x struct<(i64, i8, i8, i16, i32)>>>) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46775f0) {
      %464 = "llvm.getelementptr"(%463, %461) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>, i64) -> !llvm.ptr<struct<(i64, i8, i8, i16, i32)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46776a0) {
      %465 = "arith.constant"() {value = 1 : i32} : () -> i32

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4677a60)
        ** Replace : 'arith.constant'(0x46776a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4677a60) {
          %465 = "llvm.mlir.constant"() {value = 1 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4677700) {
      %467 = "llvm.getelementptr"(%464) {rawConstantIndices = array<i32: 0, 3>} : (!llvm.ptr<struct<(i64, i8, i8, i16, i32)>>) -> !llvm.ptr<i16>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4677790) {
      %468 = "llvm.load"(%467) : (!llvm.ptr<i16>) -> i16

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x4677810) {
      "llvm.call"(%466, %468) {callee = @poll_qid2, fastmathFlags = #llvm.fastmath<none>} : (i32, i16) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x460a7e0) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4677ac0)
    ** Insert  : 'arith.constant'(0x4677b20)
    ** Insert  : 'arith.constant'(0x4677b80)
    ** Insert  : 'scf.yield'(0x4677bd0)
    ** Insert  : 'scf.for'(0x4677c30)
    ** Erase   : 'scf.yield'(0x4677bd0)
    ** Replace : 'affine.for'(0x460a7e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4677ac0) {
      %469 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4677d10)
        ** Replace : 'arith.constant'(0x4677ac0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4677d10) {
          %469 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4677b20) {
      %471 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4677d70)
        ** Replace : 'arith.constant'(0x4677b20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4677d70) {
          %471 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4677b80) {
      %473 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4677dd0)
        ** Replace : 'arith.constant'(0x4677b80)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4677dd0) {
          %473 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4677bd0) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x4677c30) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4677e30)
        ** Insert  : 'cf.br'(0x4677ed0)
        ** Erase   : 'affine.yield'(0x45f5fd0)
        ** Insert  : 'cf.br'(0x4677f70)
        ** Insert  : 'arith.cmpi'(0x4678020)
        ** Insert  : 'cf.cond_br'(0x46780c0)
        ** Replace : 'scf.for'(0x4677c30)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4677e30) {
          %477 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %474) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4678190)
            ** Replace : 'arith.addi'(0x4677e30)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4678190) {
              %477 = "llvm.add"(%475, %473) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4677ed0) {
          "cf.br"(%478)[^bb12] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4678230)
            ** Replace : 'cf.br'(0x4677ed0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4678230) {
              "llvm.br"(%477)[^bb12] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4677f70) {
          "cf.br"(%470)[^bb12] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4678fb0)
            ** Replace : 'cf.br'(0x4677f70)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4678fb0) {
              "llvm.br"(%469)[^bb12] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4678020) {
          %476 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %472) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x46782e0)
            ** Replace : 'arith.cmpi'(0x4678020)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x46782e0) {
              %476 = "llvm.icmp"(%475, %471) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x46780c0) {
          "cf.cond_br"(%477)[^bb13, ^bb14] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4678380)
            ** Replace : 'cf.cond_br'(0x46780c0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4678380) {
              "llvm.cond_br"(%476)[^bb13, ^bb14] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x460a770) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x469b630)
    ** Insert  : 'arith.constant'(0x4678450)
    ** Insert  : 'arith.constant'(0x46784b0)
    ** Insert  : 'scf.yield'(0x4678500)
    ** Insert  : 'scf.for'(0x4678560)
    ** Erase   : 'scf.yield'(0x4678500)
    ** Replace : 'affine.for'(0x460a770)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x469b630) {
      %478 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4678ee0)
        ** Replace : 'arith.constant'(0x469b630)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4678ee0) {
          %478 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4678450) {
      %480 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4678640)
        ** Replace : 'arith.constant'(0x4678450)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4678640) {
          %480 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46784b0) {
      %482 = "arith.constant"() {value = 8 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4678f40)
        ** Replace : 'arith.constant'(0x46784b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4678f40) {
          %482 = "llvm.mlir.constant"() {value = 8 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4678500) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x4678560) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4678b90)
        ** Insert  : 'cf.br'(0x4678c30)
        ** Erase   : 'affine.yield'(0x45f5c00)
        ** Insert  : 'cf.br'(0x4678cd0)
        ** Insert  : 'arith.cmpi'(0x4678d80)
        ** Insert  : 'cf.cond_br'(0x4678690)
        ** Replace : 'scf.for'(0x4678560)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4678b90) {
          %486 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %483) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x46787b0)
            ** Replace : 'arith.addi'(0x4678b90)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x46787b0) {
              %486 = "llvm.add"(%484, %482) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4678c30) {
          "cf.br"(%487)[^bb14] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4678850)
            ** Replace : 'cf.br'(0x4678c30)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4678850) {
              "llvm.br"(%486)[^bb14] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4678cd0) {
          "cf.br"(%479)[^bb14] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x46788f0)
            ** Replace : 'cf.br'(0x4678cd0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x46788f0) {
              "llvm.br"(%478)[^bb14] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4678d80) {
          %485 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %481) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x46789a0)
            ** Replace : 'arith.cmpi'(0x4678d80)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x46789a0) {
              %485 = "llvm.icmp"(%484, %480) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4678690) {
          "cf.cond_br"(%486)[^bb15, ^bb16] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x4678a40)
            ** Replace : 'cf.cond_br'(0x4678690)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x4678a40) {
              "llvm.cond_br"(%485)[^bb15, ^bb16] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x460a700) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4670d60)
    ** Insert  : 'arith.constant'(0x4670dc0)
    ** Insert  : 'arith.constant'(0x4670e20)
    ** Insert  : 'scf.yield'(0x4670ec0)
    ** Insert  : 'scf.for'(0x4670f20)
    ** Erase   : 'scf.yield'(0x4670ec0)
    ** Replace : 'affine.for'(0x460a700)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4670d60) {
      %487 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4671000)
        ** Replace : 'arith.constant'(0x4670d60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4671000) {
          %487 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4670dc0) {
      %489 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4671060)
        ** Replace : 'arith.constant'(0x4670dc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4671060) {
          %489 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4670e20) {
      %491 = "arith.constant"() {value = 8 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46710c0)
        ** Replace : 'arith.constant'(0x4670e20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46710c0) {
          %491 = "llvm.mlir.constant"() {value = 8 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4670ec0) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x4670f20) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x4671170)
        ** Insert  : 'cf.br'(0x4671210)
        ** Erase   : 'affine.yield'(0x45f4370)
        ** Insert  : 'cf.br'(0x46712b0)
        ** Insert  : 'arith.cmpi'(0x4671360)
        ** Insert  : 'cf.cond_br'(0x4671400)
        ** Replace : 'scf.for'(0x4670f20)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x4671170) {
          %507 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %492) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x4671520)
            ** Replace : 'arith.addi'(0x4671170)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x4671520) {
              %507 = "llvm.add"(%493, %491) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x4671210) {
          "cf.br"(%508)[^bb16] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x46715c0)
            ** Replace : 'cf.br'(0x4671210)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x46715c0) {
              "llvm.br"(%507)[^bb16] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x46712b0) {
          "cf.br"(%488)[^bb16] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x4671660)
            ** Replace : 'cf.br'(0x46712b0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x4671660) {
              "llvm.br"(%487)[^bb16] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x4671360) {
          %494 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %490) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x4671710)
            ** Replace : 'arith.cmpi'(0x4671360)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x4671710) {
              %494 = "llvm.icmp"(%493, %489) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x4671400) {
          "cf.cond_br"(%495)[^bb17, ^bb18] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x46717b0)
            ** Replace : 'cf.cond_br'(0x4671400)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x46717b0) {
              "llvm.cond_br"(%494)[^bb17, ^bb18] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.alloca'(0x46009c0) {
  %496 = "memref.alloca"() {alignment = 64 : i64, operand_segment_sizes = array<i32: 0, 0>} : () -> memref<4xvector<8xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.alloca -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x4671880)
    ** Insert  : 'llvm.mlir.constant'(0x46718e0)
    ** Insert  : 'llvm.mlir.null'(0x4671940)
    ** Insert  : 'llvm.getelementptr'(0x46719a0)
    ** Insert  : 'llvm.ptrtoint'(0x4671a50)
    ** Insert  : 'llvm.alloca'(0x4671ae0)
    ** Insert  : 'llvm.mlir.undef'(0x4671b70)
    ** Insert  : 'llvm.insertvalue'(0x4671bd0)
    ** Insert  : 'llvm.insertvalue'(0x4671c80)
    ** Insert  : 'llvm.mlir.constant'(0x4671d30)
    ** Insert  : 'llvm.insertvalue'(0x4671d90)
    ** Insert  : 'llvm.insertvalue'(0x4671e40)
    ** Insert  : 'llvm.insertvalue'(0x4671ef0)
    ** Replace : 'memref.alloca'(0x46009c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4671880) {
      %496 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46718e0) {
      %497 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.null'(0x4671940) {
      %498 = "llvm.mlir.null"() : () -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46719a0) {
      %499 = "llvm.getelementptr"(%498, %496) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.ptrtoint'(0x4671a50) {
      %500 = "llvm.ptrtoint"(%499) : (!llvm.ptr<vector<8xf32>>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.alloca'(0x4671ae0) {
      %501 = "llvm.alloca"(%500) {alignment = 64 : i64} : (i64) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.undef'(0x4671b70) {
      %502 = "llvm.mlir.undef"() : () -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4671bd0) {
      %503 = "llvm.insertvalue"(%502, %501) {position = array<i64: 0>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, !llvm.ptr<vector<8xf32>>) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4671c80) {
      %504 = "llvm.insertvalue"(%503, %501) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, !llvm.ptr<vector<8xf32>>) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4671d30) {
      %505 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4671d90) {
      %506 = "llvm.insertvalue"(%504, %505) {position = array<i64: 2>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, i64) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4671e40) {
      %507 = "llvm.insertvalue"(%506, %496) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, i64) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.insertvalue'(0x4671ef0) {
      %508 = "llvm.insertvalue"(%507, %497) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>, i64) -> !llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603290) {
  %510 = "vector.load"(%444, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4671fa0)
    ** Insert  : 'llvm.mlir.constant'(0x46736c0)
    ** Insert  : 'llvm.mul'(0x4673720)
    ** Insert  : 'llvm.add'(0x46737d0)
    ** Insert  : 'llvm.getelementptr'(0x4673880)
    ** Insert  : 'llvm.bitcast'(0x4673930)
    ** Insert  : 'llvm.load'(0x4673b20)
    ** Replace : 'vector.load'(0x4603290)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4671fa0) {
      %510 = "llvm.extractvalue"(%443) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46736c0) {
      %511 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4673720) {
      %512 = "llvm.mul"(%475, %511) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46737d0) {
      %513 = "llvm.add"(%512, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4673880) {
      %514 = "llvm.getelementptr"(%510, %513) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4673930) {
      %515 = "llvm.bitcast"(%514) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4673b20) {
      %516 = "llvm.load"(%515) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603350) {
  "affine.store"(%517, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4678e30)
    ** Insert  : 'memref.store'(0x4673480)
    ** Replace : 'affine.store'(0x4603350)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4678e30) {
      %518 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4673550)
        ** Replace : 'arith.constant'(0x4678e30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4673550) {
          %518 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4673480) {
      "memref.store"(%517, %509, %519) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4673bb0)
        ** Insert  : 'llvm.getelementptr'(0x46735e0)
        ** Insert  : 'llvm.store'(0x4673c30)
        ** Replace : 'memref.store'(0x4673480)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4673bb0) {
          %520 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46735e0) {
          %521 = "llvm.getelementptr"(%520, %518) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4673c30) {
          "llvm.store"(%516, %521) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4603400) {
  %522 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 512)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x4673d70)
    ** Insert  : 'arith.addi'(0x4673dd0)
    ** Replace : 'affine.apply'(0x4603400)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4673d70) {
      %522 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4673e80)
        ** Replace : 'arith.constant'(0x4673d70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4673e80) {
          %522 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4673dd0) {
      %524 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %523) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4673ee0)
        ** Replace : 'arith.addi'(0x4673dd0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4673ee0) {
          %524 = "llvm.add"(%484, %522) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603490) {
  %527 = "vector.load"(%444, <<UNKNOWN SSA VALUE>>, %526) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4673ce0)
    ** Insert  : 'llvm.mlir.constant'(0x4672880)
    ** Insert  : 'llvm.mul'(0x4672030)
    ** Insert  : 'llvm.add'(0x46720e0)
    ** Insert  : 'llvm.getelementptr'(0x4672190)
    ** Insert  : 'llvm.bitcast'(0x4672240)
    ** Insert  : 'llvm.load'(0x46722d0)
    ** Replace : 'vector.load'(0x4603490)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4673ce0) {
      %527 = "llvm.extractvalue"(%443) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4672880) {
      %528 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4672030) {
      %529 = "llvm.mul"(%475, %528) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46720e0) {
      %530 = "llvm.add"(%529, %524) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4672190) {
      %531 = "llvm.getelementptr"(%527, %530) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4672240) {
      %532 = "llvm.bitcast"(%531) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46722d0) {
      %533 = "llvm.load"(%532) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603550) {
  "affine.store"(%534, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4673ac0)
    ** Insert  : 'memref.store'(0x4672350)
    ** Replace : 'affine.store'(0x4603550)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4673ac0) {
      %535 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4672820)
        ** Replace : 'arith.constant'(0x4673ac0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4672820) {
          %535 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4672350) {
      "memref.store"(%534, %509, %536) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46728e0)
        ** Insert  : 'llvm.getelementptr'(0x4672420)
        ** Insert  : 'llvm.store'(0x46724c0)
        ** Replace : 'memref.store'(0x4672350)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46728e0) {
          %537 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4672420) {
          %538 = "llvm.getelementptr"(%537, %535) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46724c0) {
          "llvm.store"(%533, %538) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4603600) {
  %539 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 1024)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x4672600)
    ** Insert  : 'arith.addi'(0x46729a0)
    ** Replace : 'affine.apply'(0x4603600)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4672600) {
      %539 = "arith.constant"() {value = 1024 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4672a50)
        ** Replace : 'arith.constant'(0x4672600)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4672a50) {
          %539 = "llvm.mlir.constant"() {value = 1024 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46729a0) {
      %541 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %540) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4672ab0)
        ** Replace : 'arith.addi'(0x46729a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4672ab0) {
          %541 = "llvm.add"(%484, %539) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603690) {
  %544 = "vector.load"(%444, <<UNKNOWN SSA VALUE>>, %543) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4672570)
    ** Insert  : 'llvm.mlir.constant'(0x4674c00)
    ** Insert  : 'llvm.mul'(0x4672b60)
    ** Insert  : 'llvm.add'(0x4672c10)
    ** Insert  : 'llvm.getelementptr'(0x4672cc0)
    ** Insert  : 'llvm.bitcast'(0x4672d70)
    ** Insert  : 'llvm.load'(0x4672e00)
    ** Replace : 'vector.load'(0x4603690)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4672570) {
      %544 = "llvm.extractvalue"(%443) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4674c00) {
      %545 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4672b60) {
      %546 = "llvm.mul"(%475, %545) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4672c10) {
      %547 = "llvm.add"(%546, %541) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4672cc0) {
      %548 = "llvm.getelementptr"(%544, %547) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4672d70) {
      %549 = "llvm.bitcast"(%548) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4672e00) {
      %550 = "llvm.load"(%549) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603750) {
  "affine.store"(%551, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4674c60)
    ** Insert  : 'memref.store'(0x4672f10)
    ** Replace : 'affine.store'(0x4603750)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4674c60) {
      %552 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4672fe0)
        ** Replace : 'arith.constant'(0x4674c60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4672fe0) {
          %552 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4672f10) {
      "memref.store"(%551, %509, %553) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4672e90)
        ** Insert  : 'llvm.getelementptr'(0x4673040)
        ** Insert  : 'llvm.store'(0x46730e0)
        ** Replace : 'memref.store'(0x4672f10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4672e90) {
          %554 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4673040) {
          %555 = "llvm.getelementptr"(%554, %552) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46730e0) {
          "llvm.store"(%550, %555) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4603800) {
  %556 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 1536)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x4673220)
    ** Insert  : 'arith.addi'(0x4673f90)
    ** Replace : 'affine.apply'(0x4603800)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4673220) {
      %556 = "arith.constant"() {value = 1536 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4674040)
        ** Replace : 'arith.constant'(0x4673220)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4674040) {
          %556 = "llvm.mlir.constant"() {value = 1536 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4673f90) {
      %558 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %557) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46740a0)
        ** Replace : 'arith.addi'(0x4673f90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46740a0) {
          %558 = "llvm.add"(%484, %556) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603890) {
  %561 = "vector.load"(%444, <<UNKNOWN SSA VALUE>>, %560) : (memref<1x2048xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4673190)
    ** Insert  : 'llvm.mlir.constant'(0x4674cc0)
    ** Insert  : 'llvm.mul'(0x4674940)
    ** Insert  : 'llvm.add'(0x4674aa0)
    ** Insert  : 'llvm.getelementptr'(0x4674b50)
    ** Insert  : 'llvm.bitcast'(0x4674150)
    ** Insert  : 'llvm.load'(0x46741e0)
    ** Replace : 'vector.load'(0x4603890)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4673190) {
      %561 = "llvm.extractvalue"(%443) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4674cc0) {
      %562 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4674940) {
      %563 = "llvm.mul"(%475, %562) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4674aa0) {
      %564 = "llvm.add"(%563, %558) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4674b50) {
      %565 = "llvm.getelementptr"(%561, %564) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4674150) {
      %566 = "llvm.bitcast"(%565) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46741e0) {
      %567 = "llvm.load"(%566) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603950) {
  "affine.store"(%568, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46749f0)
    ** Insert  : 'memref.store'(0x4674320)
    ** Replace : 'affine.store'(0x4603950)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46749f0) {
      %569 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4674420)
        ** Replace : 'arith.constant'(0x46749f0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4674420) {
          %569 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4674320) {
      "memref.store"(%568, %509, %570) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46742a0)
        ** Insert  : 'llvm.getelementptr'(0x4674480)
        ** Insert  : 'llvm.store'(0x4674520)
        ** Replace : 'memref.store'(0x4674320)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46742a0) {
          %571 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4674480) {
          %572 = "llvm.getelementptr"(%571, %569) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4674520) {
          "llvm.store"(%567, %572) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.for'(0x460a450) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.for -> ()' {
    ** Insert  : 'arith.constant'(0x4674660)
    ** Insert  : 'arith.constant'(0x46746c0)
    ** Insert  : 'arith.constant'(0x4674720)
    ** Insert  : 'scf.yield'(0x4674770)
    ** Insert  : 'scf.for'(0x46747d0)
    ** Erase   : 'scf.yield'(0x4674770)
    ** Replace : 'affine.for'(0x460a450)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4674660) {
      %573 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46748b0)
        ** Replace : 'arith.constant'(0x4674660)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46748b0) {
          %573 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46746c0) {
      %575 = "arith.constant"() {value = 8 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46afa60)
        ** Replace : 'arith.constant'(0x46746c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46afa60) {
          %575 = "llvm.mlir.constant"() {value = 8 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4674720) {
      %577 = "arith.constant"() {value = 4 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46afac0)
        ** Replace : 'arith.constant'(0x4674720)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46afac0) {
          %577 = "llvm.mlir.constant"() {value = 4 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.yield'(0x4674770) {
      "scf.yield"() : () -> ()

    } -> SUCCESS : operation marked 'ignored' during conversion
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'scf.for'(0x46747d0) {
      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'scf.for -> ()' {
        ** Insert  : 'arith.addi'(0x46afb70)
        ** Insert  : 'cf.br'(0x46afc10)
        ** Erase   : 'affine.yield'(0x45f66f0)
        ** Insert  : 'cf.br'(0x46afcb0)
        ** Insert  : 'arith.cmpi'(0x46afd60)
        ** Insert  : 'cf.cond_br'(0x46afe00)
        ** Replace : 'scf.for'(0x46747d0)

        //===-------------------------------------------===//
        Legalizing operation : 'arith.addi'(0x46afb70) {
          %684 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %578) : (index, index) -> index

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.addi -> ()' {
            ** Insert  : 'llvm.add'(0x46aff20)
            ** Replace : 'arith.addi'(0x46afb70)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.add'(0x46aff20) {
              %684 = "llvm.add"(%579, %577) : (i64, i64) -> i64

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x46afc10) {
          "cf.br"(%685)[^bb18] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x46affc0)
            ** Replace : 'cf.br'(0x46afc10)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x46affc0) {
              "llvm.br"(%684)[^bb18] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.br'(0x46afcb0) {
          "cf.br"(%574)[^bb18] : (index) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.br -> ()' {
            ** Insert  : 'llvm.br'(0x46b0060)
            ** Replace : 'cf.br'(0x46afcb0)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.br'(0x46b0060) {
              "llvm.br"(%573)[^bb18] : (i64) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'arith.cmpi'(0x46afd60) {
          %580 = "arith.cmpi"(<<UNKNOWN SSA VALUE>>, %576) {predicate = 2 : i64} : (index, index) -> i1

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'arith.cmpi -> ()' {
            ** Insert  : 'llvm.icmp'(0x46b0110)
            ** Replace : 'arith.cmpi'(0x46afd60)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.icmp'(0x46b0110) {
              %580 = "llvm.icmp"(%579, %575) {predicate = 2 : i64} : (i64, i64) -> i1

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'cf.cond_br'(0x46afe00) {
          "cf.cond_br"(%581)[^bb19, ^bb20] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

          * Fold {
          } -> FAILURE : unable to fold

          * Pattern : 'cf.cond_br -> ()' {
            ** Insert  : 'llvm.cond_br'(0x46b01b0)
            ** Replace : 'cf.cond_br'(0x46afe00)

            //===-------------------------------------------===//
            Legalizing operation : 'llvm.cond_br'(0x46b01b0) {
              "llvm.cond_br"(%580)[^bb19, ^bb20] {operand_segment_sizes = array<i32: 1, 0, 0>} : (i1) -> ()

            } -> SUCCESS : operation marked legal by the target
            //===-------------------------------------------===//
          } -> SUCCESS : pattern applied successfully
        } -> SUCCESS
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4603ae0) {
  %582 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x46b0280)
    ** Replace : 'arith.addi'(0x4603ae0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46b0280) {
      %582 = "llvm.add"(%579, %493) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4603b90) {
  %584 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46b0330)
    ** Replace : 'affine.apply'(0x4603b90)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46b0330) {
      %584 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46b03e0)
        ** Replace : 'arith.addi'(0x46b0330)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46b03e0) {
          %584 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4603c40) {
  %587 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %586) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46745d0)
    ** Insert  : 'llvm.mlir.constant'(0x46b0490)
    ** Insert  : 'llvm.mul'(0x46b04f0)
    ** Insert  : 'llvm.add'(0x46b05a0)
    ** Insert  : 'llvm.getelementptr'(0x46b0650)
    ** Insert  : 'llvm.load'(0x46b0700)
    ** Replace : 'memref.load'(0x4603c40)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46745d0) {
      %587 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46b0490) {
      %588 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46b04f0) {
      %589 = "llvm.mul"(%475, %588) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46b05a0) {
      %590 = "llvm.add"(%589, %584) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46b0650) {
      %591 = "llvm.getelementptr"(%587, %590) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46b0700) {
      %592 = "llvm.load"(%591) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4603d10) {
  %594 = "vector.broadcast"(%593) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46b3070)
    ** Replace : 'vector.broadcast'(0x4603d10)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46b3070) {
      %594 = "vector.splat"(%593) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46b0790)
        ** Insert  : 'llvm.mlir.constant'(0x46b07f0)
        ** Insert  : 'llvm.insertelement'(0x46b0850)
        ** Insert  : 'llvm.shufflevector'(0x46b0920)
        ** Replace : 'vector.splat'(0x46b3070)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46b0790) {
          %594 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46b07f0) {
          %595 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46b0850) {
          %596 = "llvm.insertelement"(%594, %592, %595) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46b0920) {
          %597 = "llvm.shufflevector"(%596, %594) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603da0) {
  %600 = "vector.load"(<<UNKNOWN SSA VALUE>>, %583, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46b1e90)
    ** Insert  : 'llvm.mlir.constant'(0x46b1f20)
    ** Insert  : 'llvm.mul'(0x46b1f80)
    ** Insert  : 'llvm.add'(0x46b2030)
    ** Insert  : 'llvm.getelementptr'(0x46b20e0)
    ** Insert  : 'llvm.bitcast'(0x46b2190)
    ** Insert  : 'llvm.load'(0x46b2220)
    ** Replace : 'vector.load'(0x4603da0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46b1e90) {
      %600 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46b1f20) {
      %601 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46b1f80) {
      %602 = "llvm.mul"(%582, %601) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46b2030) {
      %603 = "llvm.add"(%602, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46b20e0) {
      %604 = "llvm.getelementptr"(%600, %603) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46b2190) {
      %605 = "llvm.bitcast"(%604) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46b2220) {
      %606 = "llvm.load"(%605) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4603e70) {
  %608 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46b1da0)
    ** Insert  : 'memref.load'(0x46b23e0)
    ** Replace : 'affine.load'(0x4603e70)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46b1da0) {
      %608 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46b2490)
        ** Replace : 'arith.constant'(0x46b1da0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46b2490) {
          %608 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46b23e0) {
      %610 = "memref.load"(%509, %609) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46b2350)
        ** Insert  : 'llvm.getelementptr'(0x46b24f0)
        ** Insert  : 'llvm.load'(0x46b25a0)
        ** Replace : 'memref.load'(0x46b23e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46b2350) {
          %610 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46b24f0) {
          %611 = "llvm.getelementptr"(%610, %608) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46b25a0) {
          %612 = "llvm.load"(%611) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4603f00) {
  %615 = "vector.fma"(%599, %607, %614) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46b2630)
    ** Replace : 'vector.fma'(0x4603f00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46b2630) {
      %615 = "llvm.intr.fmuladd"(%597, %606, %612) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4603fc0) {
  "affine.store"(%616, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46b2700)
    ** Insert  : 'memref.store'(0x46b2750)
    ** Replace : 'affine.store'(0x4603fc0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46b2700) {
      %617 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46b2820)
        ** Replace : 'arith.constant'(0x46b2700)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46b2820) {
          %617 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46b2750) {
      "memref.store"(%616, %509, %618) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467c770)
        ** Insert  : 'llvm.getelementptr'(0x46b2880)
        ** Insert  : 'llvm.store'(0x46b2920)
        ** Replace : 'memref.store'(0x46b2750)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467c770) {
          %619 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46b2880) {
          %620 = "llvm.getelementptr"(%619, %617) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46b2920) {
          "llvm.store"(%615, %620) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4604070) {
  %621 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 1)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x467f3b0)
    ** Insert  : 'arith.addi'(0x467f410)
    ** Replace : 'affine.apply'(0x4604070)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467f3b0) {
      %621 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467f4c0)
        ** Replace : 'arith.constant'(0x467f3b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467f4c0) {
          %621 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467f410) {
      %623 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %622) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467f520)
        ** Replace : 'arith.addi'(0x467f410)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467f520) {
          %623 = "llvm.add"(%579, %621) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4604100) {
  %626 = "arith.addi"(%625, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x467f5d0)
    ** Replace : 'arith.addi'(0x4604100)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467f5d0) {
      %626 = "llvm.add"(%623, %493) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46049c0) {
  %628 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x467f680)
    ** Insert  : 'arith.constant'(0x46b29d0)
    ** Insert  : 'arith.addi'(0x46b2a30)
    ** Replace : 'affine.apply'(0x46049c0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467f680) {
      %628 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46b2ae0)
        ** Replace : 'arith.addi'(0x467f680)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46b2ae0) {
          %628 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46b29d0) {
      %630 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46b2b90)
        ** Replace : 'arith.constant'(0x46b29d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46b2b90) {
          %630 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46b2a30) {
      %632 = "arith.addi"(%629, %631) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46b2bf0)
        ** Replace : 'arith.addi'(0x46b2a30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46b2bf0) {
          %632 = "llvm.add"(%628, %630) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4604a70) {
  %635 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %634) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x467f320)
    ** Insert  : 'llvm.mlir.constant'(0x46b2ca0)
    ** Insert  : 'llvm.mul'(0x46b2d00)
    ** Insert  : 'llvm.add'(0x46b2db0)
    ** Insert  : 'llvm.getelementptr'(0x46b2e60)
    ** Insert  : 'llvm.load'(0x46b2f10)
    ** Replace : 'memref.load'(0x4604a70)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x467f320) {
      %635 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46b2ca0) {
      %636 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46b2d00) {
      %637 = "llvm.mul"(%475, %636) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46b2db0) {
      %638 = "llvm.add"(%637, %632) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46b2e60) {
      %639 = "llvm.getelementptr"(%635, %638) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46b2f10) {
      %640 = "llvm.load"(%639) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4604b40) {
  %642 = "vector.broadcast"(%641) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46b1c60)
    ** Replace : 'vector.broadcast'(0x4604b40)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46b1c60) {
      %642 = "vector.splat"(%641) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46b2fa0)
        ** Insert  : 'llvm.mlir.constant'(0x467b760)
        ** Insert  : 'llvm.insertelement'(0x467b7c0)
        ** Insert  : 'llvm.shufflevector'(0x467b890)
        ** Replace : 'vector.splat'(0x46b1c60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46b2fa0) {
          %642 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467b760) {
          %643 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x467b7c0) {
          %644 = "llvm.insertelement"(%642, %640, %643) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x467b890) {
          %645 = "llvm.shufflevector"(%644, %642) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4603a00) {
  %648 = "vector.load"(<<UNKNOWN SSA VALUE>>, %627, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46b09d0)
    ** Insert  : 'llvm.mlir.constant'(0x46b0a60)
    ** Insert  : 'llvm.mul'(0x46b0ac0)
    ** Insert  : 'llvm.add'(0x46b0b70)
    ** Insert  : 'llvm.getelementptr'(0x46b0c20)
    ** Insert  : 'llvm.bitcast'(0x46b0cd0)
    ** Insert  : 'llvm.load'(0x46b0d60)
    ** Replace : 'vector.load'(0x4603a00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46b09d0) {
      %648 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46b0a60) {
      %649 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46b0ac0) {
      %650 = "llvm.mul"(%626, %649) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46b0b70) {
      %651 = "llvm.add"(%650, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46b0c20) {
      %652 = "llvm.getelementptr"(%648, %651) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46b0cd0) {
      %653 = "llvm.bitcast"(%652) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46b0d60) {
      %654 = "llvm.load"(%653) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4604d70) {
  %656 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46b1e00)
    ** Insert  : 'memref.load'(0x467b940)
    ** Replace : 'affine.load'(0x4604d70)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46b1e00) {
      %656 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467b9f0)
        ** Replace : 'arith.constant'(0x46b1e00)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467b9f0) {
          %656 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x467b940) {
      %658 = "memref.load"(%509, %657) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467ba50)
        ** Insert  : 'llvm.getelementptr'(0x467bae0)
        ** Insert  : 'llvm.load'(0x467bb90)
        ** Replace : 'memref.load'(0x467b940)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467ba50) {
          %658 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467bae0) {
          %659 = "llvm.getelementptr"(%658, %656) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x467bb90) {
          %660 = "llvm.load"(%659) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4604e00) {
  %663 = "vector.fma"(%647, %655, %662) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x467e8b0)
    ** Replace : 'vector.fma'(0x4604e00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x467e8b0) {
      %663 = "llvm.intr.fmuladd"(%645, %654, %660) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4604ec0) {
  "affine.store"(%664, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x467e980)
    ** Insert  : 'memref.store'(0x467e9d0)
    ** Replace : 'affine.store'(0x4604ec0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467e980) {
      %665 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467eaa0)
        ** Replace : 'arith.constant'(0x467e980)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467eaa0) {
          %665 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x467e9d0) {
      "memref.store"(%664, %509, %666) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467e820)
        ** Insert  : 'llvm.getelementptr'(0x467eb00)
        ** Insert  : 'llvm.store'(0x46b22a0)
        ** Replace : 'memref.store'(0x467e9d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467e820) {
          %667 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467eb00) {
          %668 = "llvm.getelementptr"(%667, %665) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46b22a0) {
          "llvm.store"(%663, %668) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4604f70) {
  %669 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 2)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x46b1d30)
    ** Insert  : 'arith.addi'(0x467ebb0)
    ** Replace : 'affine.apply'(0x4604f70)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46b1d30) {
      %669 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467ec60)
        ** Replace : 'arith.constant'(0x46b1d30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467ec60) {
          %669 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467ebb0) {
      %671 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %670) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467edf0)
        ** Replace : 'arith.addi'(0x467ebb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467edf0) {
          %671 = "llvm.add"(%579, %669) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4605000) {
  %674 = "arith.addi"(%673, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x467eea0)
    ** Replace : 'arith.addi'(0x4605000)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467eea0) {
      %674 = "llvm.add"(%671, %493) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46050b0) {
  %676 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 2)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x467ef50)
    ** Insert  : 'arith.constant'(0x467f000)
    ** Insert  : 'arith.addi'(0x467f060)
    ** Replace : 'affine.apply'(0x46050b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467ef50) {
      %676 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467f110)
        ** Replace : 'arith.addi'(0x467ef50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467f110) {
          %676 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467f000) {
      %678 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467ecc0)
        ** Replace : 'arith.constant'(0x467f000)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467ecc0) {
          %678 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467f060) {
      %680 = "arith.addi"(%677, %679) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467f1c0)
        ** Replace : 'arith.addi'(0x467f060)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467f1c0) {
          %680 = "llvm.add"(%676, %678) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4605160) {
  %683 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %682) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x467ed60)
    ** Insert  : 'llvm.mlir.constant'(0x467f270)
    ** Insert  : 'llvm.mul'(0x467bc20)
    ** Insert  : 'llvm.add'(0x467bcd0)
    ** Insert  : 'llvm.getelementptr'(0x467bd80)
    ** Insert  : 'llvm.load'(0x467be30)
    ** Replace : 'memref.load'(0x4605160)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x467ed60) {
      %683 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x467f270) {
      %684 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467bc20) {
      %685 = "llvm.mul"(%475, %684) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467bcd0) {
      %686 = "llvm.add"(%685, %680) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467bd80) {
      %687 = "llvm.getelementptr"(%683, %686) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467be30) {
      %688 = "llvm.load"(%687) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4605230) {
  %690 = "vector.broadcast"(%689) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46b1870)
    ** Replace : 'vector.broadcast'(0x4605230)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46b1870) {
      %690 = "vector.splat"(%689) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46b1900)
        ** Insert  : 'llvm.mlir.constant'(0x46b1960)
        ** Insert  : 'llvm.insertelement'(0x46b19c0)
        ** Insert  : 'llvm.shufflevector'(0x46b1a90)
        ** Replace : 'vector.splat'(0x46b1870)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46b1900) {
          %690 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46b1960) {
          %691 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46b19c0) {
          %692 = "llvm.insertelement"(%690, %688, %691) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46b1a90) {
          %693 = "llvm.shufflevector"(%692, %690) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46052c0) {
  %696 = "vector.load"(<<UNKNOWN SSA VALUE>>, %675, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46b1b40)
    ** Insert  : 'llvm.mlir.constant'(0x46b1bd0)
    ** Insert  : 'llvm.mul'(0x467c630)
    ** Insert  : 'llvm.add'(0x467bec0)
    ** Insert  : 'llvm.getelementptr'(0x467bf70)
    ** Insert  : 'llvm.bitcast'(0x467c6e0)
    ** Insert  : 'llvm.load'(0x467c020)
    ** Replace : 'vector.load'(0x46052c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46b1b40) {
      %696 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46b1bd0) {
      %697 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467c630) {
      %698 = "llvm.mul"(%674, %697) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467bec0) {
      %699 = "llvm.add"(%698, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467bf70) {
      %700 = "llvm.getelementptr"(%696, %699) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x467c6e0) {
      %701 = "llvm.bitcast"(%700) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467c020) {
      %702 = "llvm.load"(%701) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4605390) {
  %704 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x467c0b0)
    ** Insert  : 'memref.load'(0x467c110)
    ** Replace : 'affine.load'(0x4605390)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467c0b0) {
      %704 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467c1c0)
        ** Replace : 'arith.constant'(0x467c0b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467c1c0) {
          %704 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x467c110) {
      %706 = "memref.load"(%509, %705) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467c230)
        ** Insert  : 'llvm.getelementptr'(0x467c2c0)
        ** Insert  : 'llvm.load'(0x467c370)
        ** Replace : 'memref.load'(0x467c110)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467c230) {
          %706 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467c2c0) {
          %707 = "llvm.getelementptr"(%706, %704) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x467c370) {
          %708 = "llvm.load"(%707) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4605420) {
  %711 = "vector.fma"(%695, %703, %710) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x467c490)
    ** Replace : 'vector.fma'(0x4605420)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x467c490) {
      %711 = "llvm.intr.fmuladd"(%693, %702, %708) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x46054e0) {
  "affine.store"(%712, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x467c560)
    ** Insert  : 'memref.store'(0x46b0de0)
    ** Replace : 'affine.store'(0x46054e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467c560) {
      %713 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46b0eb0)
        ** Replace : 'arith.constant'(0x467c560)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46b0eb0) {
          %713 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46b0de0) {
      "memref.store"(%712, %509, %714) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467c400)
        ** Insert  : 'llvm.getelementptr'(0x46b0f10)
        ** Insert  : 'llvm.store'(0x46b0fb0)
        ** Replace : 'memref.store'(0x46b0de0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467c400) {
          %715 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46b0f10) {
          %716 = "llvm.getelementptr"(%715, %713) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46b0fb0) {
          "llvm.store"(%711, %716) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4605590) {
  %717 = "affine.apply"(<<UNKNOWN SSA VALUE>>) {map = affine_map<(d0) -> (d0 + 3)>} : (index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.constant'(0x46b1060)
    ** Insert  : 'arith.addi'(0x46b10c0)
    ** Replace : 'affine.apply'(0x4605590)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46b1060) {
      %717 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46b1170)
        ** Replace : 'arith.constant'(0x46b1060)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46b1170) {
          %717 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46b10c0) {
      %719 = "arith.addi"(<<UNKNOWN SSA VALUE>>, %718) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46b11d0)
        ** Replace : 'arith.addi'(0x46b10c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46b11d0) {
          %719 = "llvm.add"(%579, %717) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.addi'(0x4604bd0) {
  %722 = "arith.addi"(%721, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.addi -> ()' {
    ** Insert  : 'llvm.add'(0x46b1280)
    ** Replace : 'arith.addi'(0x4604bd0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46b1280) {
      %722 = "llvm.add"(%719, %493) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4605940) {
  %724 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 3)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46b1330)
    ** Insert  : 'arith.constant'(0x46b13e0)
    ** Insert  : 'arith.addi'(0x46b1440)
    ** Replace : 'affine.apply'(0x4605940)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46b1330) {
      %724 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46b14f0)
        ** Replace : 'arith.addi'(0x46b1330)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46b14f0) {
          %724 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46b13e0) {
      %726 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46b15a0)
        ** Replace : 'arith.constant'(0x46b13e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46b15a0) {
          %726 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46b1440) {
      %728 = "arith.addi"(%725, %727) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46b1600)
        ** Replace : 'arith.addi'(0x46b1440)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46b1600) {
          %728 = "llvm.add"(%724, %726) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x46059f0) {
  %731 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %730) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46bb110)
    ** Insert  : 'llvm.mlir.constant'(0x46b16b0)
    ** Insert  : 'llvm.mul'(0x46b1710)
    ** Insert  : 'llvm.add'(0x46b17c0)
    ** Insert  : 'llvm.getelementptr'(0x467c800)
    ** Insert  : 'llvm.load'(0x467c8b0)
    ** Replace : 'memref.load'(0x46059f0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46bb110) {
      %731 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46b16b0) {
      %732 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46b1710) {
      %733 = "llvm.mul"(%475, %732) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46b17c0) {
      %734 = "llvm.add"(%733, %728) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467c800) {
      %735 = "llvm.getelementptr"(%731, %734) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467c8b0) {
      %736 = "llvm.load"(%735) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4605ac0) {
  %738 = "vector.broadcast"(%737) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x467c940)
    ** Replace : 'vector.broadcast'(0x4605ac0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x467c940) {
      %738 = "vector.splat"(%737) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x467c9d0)
        ** Insert  : 'llvm.mlir.constant'(0x467ca30)
        ** Insert  : 'llvm.insertelement'(0x467ca90)
        ** Insert  : 'llvm.shufflevector'(0x467cb60)
        ** Replace : 'vector.splat'(0x467c940)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x467c9d0) {
          %738 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467ca30) {
          %739 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x467ca90) {
          %740 = "llvm.insertelement"(%738, %736, %739) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x467cb60) {
          %741 = "llvm.shufflevector"(%740, %738) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4605b50) {
  %744 = "vector.load"(<<UNKNOWN SSA VALUE>>, %723, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x467e590)
    ** Insert  : 'llvm.mlir.constant'(0x467e620)
    ** Insert  : 'llvm.mul'(0x467e680)
    ** Insert  : 'llvm.add'(0x467e730)
    ** Insert  : 'llvm.getelementptr'(0x467e050)
    ** Insert  : 'llvm.bitcast'(0x467e100)
    ** Insert  : 'llvm.load'(0x467e190)
    ** Replace : 'vector.load'(0x4605b50)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x467e590) {
      %744 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x467e620) {
      %745 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467e680) {
      %746 = "llvm.mul"(%722, %745) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467e730) {
      %747 = "llvm.add"(%746, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467e050) {
      %748 = "llvm.getelementptr"(%744, %747) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x467e100) {
      %749 = "llvm.bitcast"(%748) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467e190) {
      %750 = "llvm.load"(%749) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4605c20) {
  %752 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x467e2b0)
    ** Insert  : 'memref.load'(0x467e310)
    ** Replace : 'affine.load'(0x4605c20)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467e2b0) {
      %752 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467e3c0)
        ** Replace : 'arith.constant'(0x467e2b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467e3c0) {
          %752 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x467e310) {
      %754 = "memref.load"(%509, %753) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467e220)
        ** Insert  : 'llvm.getelementptr'(0x467e420)
        ** Insert  : 'llvm.load'(0x467cc10)
        ** Replace : 'memref.load'(0x467e310)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467e220) {
          %754 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467e420) {
          %755 = "llvm.getelementptr"(%754, %752) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x467cc10) {
          %756 = "llvm.load"(%755) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4605cb0) {
  %759 = "vector.fma"(%743, %751, %758) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x467cd30)
    ** Replace : 'vector.fma'(0x4605cb0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x467cd30) {
      %759 = "llvm.intr.fmuladd"(%741, %750, %756) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4605d70) {
  "affine.store"(%760, %509) {map = affine_map<() -> (0)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x467e4d0)
    ** Insert  : 'memref.store'(0x467cdf0)
    ** Replace : 'affine.store'(0x4605d70)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467e4d0) {
      %761 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467cec0)
        ** Replace : 'arith.constant'(0x467e4d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467cec0) {
          %761 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x467cdf0) {
      "memref.store"(%760, %509, %762) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467cca0)
        ** Insert  : 'llvm.getelementptr'(0x467cf20)
        ** Insert  : 'llvm.store'(0x467cfc0)
        ** Replace : 'memref.store'(0x467cdf0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467cca0) {
          %763 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467cf20) {
          %764 = "llvm.getelementptr"(%763, %761) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x467cfc0) {
          "llvm.store"(%759, %764) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4605e20) {
  %765 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 512)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x467d070)
    ** Insert  : 'arith.constant'(0x467d120)
    ** Insert  : 'arith.addi'(0x467d180)
    ** Replace : 'affine.apply'(0x4605e20)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467d070) {
      %765 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467d230)
        ** Replace : 'arith.addi'(0x467d070)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467d230) {
          %765 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467d120) {
      %767 = "arith.constant"() {value = 512 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467d2e0)
        ** Replace : 'arith.constant'(0x467d120)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467d2e0) {
          %767 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467d180) {
      %769 = "arith.addi"(%766, %768) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x467d340)
        ** Replace : 'arith.addi'(0x467d180)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x467d340) {
          %769 = "llvm.add"(%765, %767) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4605ed0) {
  %772 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %771) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46bd7d0)
    ** Insert  : 'llvm.mlir.constant'(0x467d3f0)
    ** Insert  : 'llvm.mul'(0x467d450)
    ** Insert  : 'llvm.add'(0x467d500)
    ** Insert  : 'llvm.getelementptr'(0x467d5b0)
    ** Insert  : 'llvm.load'(0x467d660)
    ** Replace : 'memref.load'(0x4605ed0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46bd7d0) {
      %772 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x467d3f0) {
      %773 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x467d450) {
      %774 = "llvm.mul"(%475, %773) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x467d500) {
      %775 = "llvm.add"(%774, %769) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467d5b0) {
      %776 = "llvm.getelementptr"(%772, %775) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467d660) {
      %777 = "llvm.load"(%776) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4605fa0) {
  %779 = "vector.broadcast"(%778) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46bd1c0)
    ** Replace : 'vector.broadcast'(0x4605fa0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46bd1c0) {
      %779 = "vector.splat"(%778) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46bd250)
        ** Insert  : 'llvm.mlir.constant'(0x46bd2b0)
        ** Insert  : 'llvm.insertelement'(0x46bd310)
        ** Insert  : 'llvm.shufflevector'(0x46bd3e0)
        ** Replace : 'vector.splat'(0x46bd1c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46bd250) {
          %779 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bd2b0) {
          %780 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46bd310) {
          %781 = "llvm.insertelement"(%779, %777, %780) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46bd3e0) {
          %782 = "llvm.shufflevector"(%781, %779) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4606030) {
  %785 = "vector.load"(<<UNKNOWN SSA VALUE>>, %583, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46bd490)
    ** Insert  : 'llvm.mlir.constant'(0x46bd520)
    ** Insert  : 'llvm.mul'(0x46bd580)
    ** Insert  : 'llvm.add'(0x46bd630)
    ** Insert  : 'llvm.getelementptr'(0x467dc50)
    ** Insert  : 'llvm.bitcast'(0x467dd00)
    ** Insert  : 'llvm.load'(0x467dd90)
    ** Replace : 'vector.load'(0x4606030)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46bd490) {
      %785 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46bd520) {
      %786 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46bd580) {
      %787 = "llvm.mul"(%582, %786) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46bd630) {
      %788 = "llvm.add"(%787, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x467dc50) {
      %789 = "llvm.getelementptr"(%785, %788) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x467dd00) {
      %790 = "llvm.bitcast"(%789) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x467dd90) {
      %791 = "llvm.load"(%790) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4606100) {
  %793 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x467c5c0)
    ** Insert  : 'memref.load'(0x467de20)
    ** Replace : 'affine.load'(0x4606100)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467c5c0) {
      %793 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467ded0)
        ** Replace : 'arith.constant'(0x467c5c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467ded0) {
          %793 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x467de20) {
      %795 = "memref.load"(%509, %794) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x467df30)
        ** Insert  : 'llvm.getelementptr'(0x467d6f0)
        ** Insert  : 'llvm.load'(0x467dfc0)
        ** Replace : 'memref.load'(0x467de20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x467df30) {
          %795 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467d6f0) {
          %796 = "llvm.getelementptr"(%795, %793) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x467dfc0) {
          %797 = "llvm.load"(%796) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4606190) {
  %800 = "vector.fma"(%784, %792, %799) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46bd060)
    ** Replace : 'vector.fma'(0x4606190)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46bd060) {
      %800 = "llvm.intr.fmuladd"(%782, %791, %797) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4606250) {
  "affine.store"(%801, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46bd130)
    ** Insert  : 'memref.store'(0x467d790)
    ** Replace : 'affine.store'(0x4606250)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46bd130) {
      %802 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467d860)
        ** Replace : 'arith.constant'(0x46bd130)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467d860) {
          %802 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x467d790) {
      "memref.store"(%801, %509, %803) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46bcfd0)
        ** Insert  : 'llvm.getelementptr'(0x467d8c0)
        ** Insert  : 'llvm.store'(0x46bd6d0)
        ** Replace : 'memref.store'(0x467d790)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46bcfd0) {
          %804 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x467d8c0) {
          %805 = "llvm.getelementptr"(%804, %802) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46bd6d0) {
          "llvm.store"(%800, %805) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4606300) {
  %806 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 513)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x467da00)
    ** Insert  : 'arith.constant'(0x467dab0)
    ** Insert  : 'arith.addi'(0x467db10)
    ** Replace : 'affine.apply'(0x4606300)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467da00) {
      %806 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46bb1a0)
        ** Replace : 'arith.addi'(0x467da00)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46bb1a0) {
          %806 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x467dab0) {
      %808 = "arith.constant"() {value = 513 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x467dbc0)
        ** Replace : 'arith.constant'(0x467dab0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x467dbc0) {
          %808 = "llvm.mlir.constant"() {value = 513 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x467db10) {
      %810 = "arith.addi"(%807, %809) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46bb250)
        ** Replace : 'arith.addi'(0x467db10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46bb250) {
          %810 = "llvm.add"(%806, %808) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x46063b0) {
  %813 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %812) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x467d970)
    ** Insert  : 'llvm.mlir.constant'(0x46bb300)
    ** Insert  : 'llvm.mul'(0x46bb360)
    ** Insert  : 'llvm.add'(0x46bb410)
    ** Insert  : 'llvm.getelementptr'(0x46bb4c0)
    ** Insert  : 'llvm.load'(0x46bb570)
    ** Replace : 'memref.load'(0x46063b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x467d970) {
      %813 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46bb300) {
      %814 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46bb360) {
      %815 = "llvm.mul"(%475, %814) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46bb410) {
      %816 = "llvm.add"(%815, %810) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46bb4c0) {
      %817 = "llvm.getelementptr"(%813, %816) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46bb570) {
      %818 = "llvm.load"(%817) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4606480) {
  %820 = "vector.broadcast"(%819) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46bb600)
    ** Replace : 'vector.broadcast'(0x4606480)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46bb600) {
      %820 = "vector.splat"(%819) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46bb690)
        ** Insert  : 'llvm.mlir.constant'(0x46bb6f0)
        ** Insert  : 'llvm.insertelement'(0x46bb750)
        ** Insert  : 'llvm.shufflevector'(0x46bb820)
        ** Replace : 'vector.splat'(0x46bb600)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46bb690) {
          %820 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bb6f0) {
          %821 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46bb750) {
          %822 = "llvm.insertelement"(%820, %818, %821) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46bb820) {
          %823 = "llvm.shufflevector"(%822, %820) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4606510) {
  %826 = "vector.load"(<<UNKNOWN SSA VALUE>>, %627, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46bcd30)
    ** Insert  : 'llvm.mlir.constant'(0x46bce90)
    ** Insert  : 'llvm.mul'(0x46bcef0)
    ** Insert  : 'llvm.add'(0x46bb8d0)
    ** Insert  : 'llvm.getelementptr'(0x46bb980)
    ** Insert  : 'llvm.bitcast'(0x46bba30)
    ** Insert  : 'llvm.load'(0x46bbac0)
    ** Replace : 'vector.load'(0x4606510)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46bcd30) {
      %826 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46bce90) {
      %827 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46bcef0) {
      %828 = "llvm.mul"(%626, %827) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46bb8d0) {
      %829 = "llvm.add"(%828, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46bb980) {
      %830 = "llvm.getelementptr"(%826, %829) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46bba30) {
      %831 = "llvm.bitcast"(%830) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46bbac0) {
      %832 = "llvm.load"(%831) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x46065e0) {
  %834 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46bcdc0)
    ** Insert  : 'memref.load'(0x46bbbe0)
    ** Replace : 'affine.load'(0x46065e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46bcdc0) {
      %834 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46bbc90)
        ** Replace : 'arith.constant'(0x46bcdc0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bbc90) {
          %834 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46bbbe0) {
      %836 = "memref.load"(%509, %835) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46bbb50)
        ** Insert  : 'llvm.getelementptr'(0x46bbcf0)
        ** Insert  : 'llvm.load'(0x46bbda0)
        ** Replace : 'memref.load'(0x46bbbe0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46bbb50) {
          %836 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46bbcf0) {
          %837 = "llvm.getelementptr"(%836, %834) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46bbda0) {
          %838 = "llvm.load"(%837) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4606670) {
  %841 = "vector.fma"(%825, %833, %840) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46bbec0)
    ** Replace : 'vector.fma'(0x4606670)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46bbec0) {
      %841 = "llvm.intr.fmuladd"(%823, %832, %838) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4606730) {
  "affine.store"(%842, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46bbf90)
    ** Insert  : 'memref.store'(0x46bbfe0)
    ** Replace : 'affine.store'(0x4606730)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46bbf90) {
      %843 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46bc0b0)
        ** Replace : 'arith.constant'(0x46bbf90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bc0b0) {
          %843 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46bbfe0) {
      "memref.store"(%842, %509, %844) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46bbe30)
        ** Insert  : 'llvm.getelementptr'(0x46bc110)
        ** Insert  : 'llvm.store'(0x46bc1b0)
        ** Replace : 'memref.store'(0x46bbfe0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46bbe30) {
          %845 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46bc110) {
          %846 = "llvm.getelementptr"(%845, %843) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46bc1b0) {
          "llvm.store"(%841, %846) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46067e0) {
  %847 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 514)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46bc260)
    ** Insert  : 'arith.constant'(0x46bc310)
    ** Insert  : 'arith.addi'(0x46bc370)
    ** Replace : 'affine.apply'(0x46067e0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46bc260) {
      %847 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46bc420)
        ** Replace : 'arith.addi'(0x46bc260)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46bc420) {
          %847 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46bc310) {
      %849 = "arith.constant"() {value = 514 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46bc4d0)
        ** Replace : 'arith.constant'(0x46bc310)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bc4d0) {
          %849 = "llvm.mlir.constant"() {value = 514 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46bc370) {
      %851 = "arith.addi"(%848, %850) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46bc530)
        ** Replace : 'arith.addi'(0x46bc370)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46bc530) {
          %851 = "llvm.add"(%847, %849) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4606890) {
  %854 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %853) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46bf880)
    ** Insert  : 'llvm.mlir.constant'(0x46bc5e0)
    ** Insert  : 'llvm.mul'(0x46bc640)
    ** Insert  : 'llvm.add'(0x46bc6f0)
    ** Insert  : 'llvm.getelementptr'(0x46bc7a0)
    ** Insert  : 'llvm.load'(0x46bc850)
    ** Replace : 'memref.load'(0x4606890)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46bf880) {
      %854 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46bc5e0) {
      %855 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46bc640) {
      %856 = "llvm.mul"(%475, %855) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46bc6f0) {
      %857 = "llvm.add"(%856, %851) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46bc7a0) {
      %858 = "llvm.getelementptr"(%854, %857) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46bc850) {
      %859 = "llvm.load"(%858) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4606960) {
  %861 = "vector.broadcast"(%860) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46bc8e0)
    ** Replace : 'vector.broadcast'(0x4606960)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46bc8e0) {
      %861 = "vector.splat"(%860) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46bc970)
        ** Insert  : 'llvm.mlir.constant'(0x46bc9d0)
        ** Insert  : 'llvm.insertelement'(0x46bca30)
        ** Insert  : 'llvm.shufflevector'(0x46bcb00)
        ** Replace : 'vector.splat'(0x46bc8e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46bc970) {
          %861 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bc9d0) {
          %862 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46bca30) {
          %863 = "llvm.insertelement"(%861, %859, %862) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46bcb00) {
          %864 = "llvm.shufflevector"(%863, %861) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46069f0) {
  %867 = "vector.load"(<<UNKNOWN SSA VALUE>>, %675, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46bcbb0)
    ** Insert  : 'llvm.mlir.constant'(0x46bec20)
    ** Insert  : 'llvm.mul'(0x46bec80)
    ** Insert  : 'llvm.add'(0x46bed30)
    ** Insert  : 'llvm.getelementptr'(0x46bede0)
    ** Insert  : 'llvm.bitcast'(0x46bee90)
    ** Insert  : 'llvm.load'(0x46bef20)
    ** Replace : 'vector.load'(0x46069f0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46bcbb0) {
      %867 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46bec20) {
      %868 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46bec80) {
      %869 = "llvm.mul"(%674, %868) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46bed30) {
      %870 = "llvm.add"(%869, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46bede0) {
      %871 = "llvm.getelementptr"(%867, %870) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46bee90) {
      %872 = "llvm.bitcast"(%871) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46bef20) {
      %873 = "llvm.load"(%872) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4606ac0) {
  %875 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46bcc40)
    ** Insert  : 'memref.load'(0x46befb0)
    ** Replace : 'affine.load'(0x4606ac0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46bcc40) {
      %875 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46bcca0)
        ** Replace : 'arith.constant'(0x46bcc40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bcca0) {
          %875 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46befb0) {
      %877 = "memref.load"(%509, %876) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46c0920)
        ** Insert  : 'llvm.getelementptr'(0x46bf060)
        ** Insert  : 'llvm.load'(0x46bf110)
        ** Replace : 'memref.load'(0x46befb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46c0920) {
          %877 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46bf060) {
          %878 = "llvm.getelementptr"(%877, %875) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46bf110) {
          %879 = "llvm.load"(%878) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4605620) {
  %882 = "vector.fma"(%866, %874, %881) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46be710)
    ** Replace : 'vector.fma'(0x4605620)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46be710) {
      %882 = "llvm.intr.fmuladd"(%864, %873, %879) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4605700) {
  "affine.store"(%883, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46be7e0)
    ** Insert  : 'memref.store'(0x46be830)
    ** Replace : 'affine.store'(0x4605700)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46be7e0) {
      %884 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46be900)
        ** Replace : 'arith.constant'(0x46be7e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46be900) {
          %884 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46be830) {
      "memref.store"(%883, %509, %885) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46be680)
        ** Insert  : 'llvm.getelementptr'(0x46be960)
        ** Insert  : 'llvm.store'(0x46bea00)
        ** Replace : 'memref.store'(0x46be830)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46be680) {
          %886 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46be960) {
          %887 = "llvm.getelementptr"(%886, %884) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46bea00) {
          "llvm.store"(%882, %887) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46057b0) {
  %888 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 515)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46beab0)
    ** Insert  : 'arith.constant'(0x46beb60)
    ** Insert  : 'arith.addi'(0x46bf1a0)
    ** Replace : 'affine.apply'(0x46057b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46beab0) {
      %888 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46bf250)
        ** Replace : 'arith.addi'(0x46beab0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46bf250) {
          %888 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46beb60) {
      %890 = "arith.constant"() {value = 515 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46bebc0)
        ** Replace : 'arith.constant'(0x46beb60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bebc0) {
          %890 = "llvm.mlir.constant"() {value = 515 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46bf1a0) {
      %892 = "arith.addi"(%889, %891) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46bf300)
        ** Replace : 'arith.addi'(0x46bf1a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46bf300) {
          %892 = "llvm.add"(%888, %890) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4607170) {
  %895 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %894) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46bf7b0)
    ** Insert  : 'llvm.mlir.constant'(0x46bf3b0)
    ** Insert  : 'llvm.mul'(0x46bf410)
    ** Insert  : 'llvm.add'(0x46bf4c0)
    ** Insert  : 'llvm.getelementptr'(0x46bf570)
    ** Insert  : 'llvm.load'(0x46bf620)
    ** Replace : 'memref.load'(0x4607170)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46bf7b0) {
      %895 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46bf3b0) {
      %896 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46bf410) {
      %897 = "llvm.mul"(%475, %896) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46bf4c0) {
      %898 = "llvm.add"(%897, %892) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46bf570) {
      %899 = "llvm.getelementptr"(%895, %898) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46bf620) {
      %900 = "llvm.load"(%899) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4607240) {
  %902 = "vector.broadcast"(%901) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46bf6b0)
    ** Replace : 'vector.broadcast'(0x4607240)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46bf6b0) {
      %902 = "vector.splat"(%901) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46bf740)
        ** Insert  : 'llvm.mlir.constant'(0x46bd860)
        ** Insert  : 'llvm.insertelement'(0x46bd8c0)
        ** Insert  : 'llvm.shufflevector'(0x46bd990)
        ** Replace : 'vector.splat'(0x46bf6b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46bf740) {
          %902 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bd860) {
          %903 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46bd8c0) {
          %904 = "llvm.insertelement"(%902, %900, %903) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46bd990) {
          %905 = "llvm.shufflevector"(%904, %902) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46072d0) {
  %908 = "vector.load"(<<UNKNOWN SSA VALUE>>, %723, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46be560)
    ** Insert  : 'llvm.mlir.constant'(0x46be5f0)
    ** Insert  : 'llvm.mul'(0x46bda40)
    ** Insert  : 'llvm.add'(0x46bdaf0)
    ** Insert  : 'llvm.getelementptr'(0x46bdba0)
    ** Insert  : 'llvm.bitcast'(0x46bdc50)
    ** Insert  : 'llvm.load'(0x46bdce0)
    ** Replace : 'vector.load'(0x46072d0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46be560) {
      %908 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46be5f0) {
      %909 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46bda40) {
      %910 = "llvm.mul"(%722, %909) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46bdaf0) {
      %911 = "llvm.add"(%910, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46bdba0) {
      %912 = "llvm.getelementptr"(%908, %911) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46bdc50) {
      %913 = "llvm.bitcast"(%912) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46bdce0) {
      %914 = "llvm.load"(%913) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x46073a0) {
  %916 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46bce20)
    ** Insert  : 'memref.load'(0x46be410)
    ** Replace : 'affine.load'(0x46073a0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46bce20) {
      %916 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46bdd70)
        ** Replace : 'arith.constant'(0x46bce20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bdd70) {
          %916 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46be410) {
      %918 = "memref.load"(%509, %917) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46be380)
        ** Insert  : 'llvm.getelementptr'(0x46bddd0)
        ** Insert  : 'llvm.load'(0x46bde80)
        ** Replace : 'memref.load'(0x46be410)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46be380) {
          %918 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46bddd0) {
          %919 = "llvm.getelementptr"(%918, %916) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46bde80) {
          %920 = "llvm.load"(%919) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4607430) {
  %923 = "vector.fma"(%907, %915, %922) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46be060)
    ** Replace : 'vector.fma'(0x4607430)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46be060) {
      %923 = "llvm.intr.fmuladd"(%905, %914, %920) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x46074f0) {
  "affine.store"(%924, %509) {map = affine_map<() -> (1)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46bdf10)
    ** Insert  : 'memref.store'(0x46be120)
    ** Replace : 'affine.store'(0x46074f0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46bdf10) {
      %925 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46bdf70)
        ** Replace : 'arith.constant'(0x46bdf10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bdf70) {
          %925 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46be120) {
      "memref.store"(%924, %509, %926) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46bdfd0)
        ** Insert  : 'llvm.getelementptr'(0x46be1f0)
        ** Insert  : 'llvm.store'(0x46be290)
        ** Replace : 'memref.store'(0x46be120)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46bdfd0) {
          %927 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46be1f0) {
          %928 = "llvm.getelementptr"(%927, %925) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46be290) {
          "llvm.store"(%923, %928) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46075a0) {
  %929 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1024)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4685d00)
    ** Insert  : 'arith.constant'(0x4685db0)
    ** Insert  : 'arith.addi'(0x4685e10)
    ** Replace : 'affine.apply'(0x46075a0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4685d00) {
      %929 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46bf910)
        ** Replace : 'arith.addi'(0x4685d00)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46bf910) {
          %929 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4685db0) {
      %931 = "arith.constant"() {value = 1024 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46bf9c0)
        ** Replace : 'arith.constant'(0x4685db0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bf9c0) {
          %931 = "llvm.mlir.constant"() {value = 1024 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4685e10) {
      %933 = "arith.addi"(%930, %932) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46bfa20)
        ** Replace : 'arith.addi'(0x4685e10)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46bfa20) {
          %933 = "llvm.add"(%929, %931) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4607650) {
  %936 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %935) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4685c70)
    ** Insert  : 'llvm.mlir.constant'(0x46bfad0)
    ** Insert  : 'llvm.mul'(0x46bfb30)
    ** Insert  : 'llvm.add'(0x46bfbe0)
    ** Insert  : 'llvm.getelementptr'(0x46bfc90)
    ** Insert  : 'llvm.load'(0x46bfd40)
    ** Replace : 'memref.load'(0x4607650)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4685c70) {
      %936 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46bfad0) {
      %937 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46bfb30) {
      %938 = "llvm.mul"(%475, %937) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46bfbe0) {
      %939 = "llvm.add"(%938, %933) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46bfc90) {
      %940 = "llvm.getelementptr"(%936, %939) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46bfd40) {
      %941 = "llvm.load"(%940) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4607720) {
  %943 = "vector.broadcast"(%942) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4683ee0)
    ** Replace : 'vector.broadcast'(0x4607720)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4683ee0) {
      %943 = "vector.splat"(%942) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46bfdd0)
        ** Insert  : 'llvm.mlir.constant'(0x46bfe30)
        ** Insert  : 'llvm.insertelement'(0x46bfe90)
        ** Insert  : 'llvm.shufflevector'(0x46bff60)
        ** Replace : 'vector.splat'(0x4683ee0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46bfdd0) {
          %943 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46bfe30) {
          %944 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46bfe90) {
          %945 = "llvm.insertelement"(%943, %941, %944) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46bff60) {
          %946 = "llvm.shufflevector"(%945, %943) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46077b0) {
  %949 = "vector.load"(<<UNKNOWN SSA VALUE>>, %583, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46c0860)
    ** Insert  : 'llvm.mlir.constant'(0x46c0010)
    ** Insert  : 'llvm.mul'(0x46c0070)
    ** Insert  : 'llvm.add'(0x46c0120)
    ** Insert  : 'llvm.getelementptr'(0x46c01d0)
    ** Insert  : 'llvm.bitcast'(0x46c0280)
    ** Insert  : 'llvm.load'(0x46c0310)
    ** Replace : 'vector.load'(0x46077b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46c0860) {
      %949 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46c0010) {
      %950 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46c0070) {
      %951 = "llvm.mul"(%582, %950) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46c0120) {
      %952 = "llvm.add"(%951, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46c01d0) {
      %953 = "llvm.getelementptr"(%949, %952) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46c0280) {
      %954 = "llvm.bitcast"(%953) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46c0310) {
      %955 = "llvm.load"(%954) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4607880) {
  %957 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46c0740)
    ** Insert  : 'memref.load'(0x46c03a0)
    ** Replace : 'affine.load'(0x4607880)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46c0740) {
      %957 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46c0450)
        ** Replace : 'arith.constant'(0x46c0740)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46c0450) {
          %957 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46c03a0) {
      %959 = "memref.load"(%509, %958) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46c04b0)
        ** Insert  : 'llvm.getelementptr'(0x46c0540)
        ** Insert  : 'llvm.load'(0x46c05f0)
        ** Replace : 'memref.load'(0x46c03a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46c04b0) {
          %959 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46c0540) {
          %960 = "llvm.getelementptr"(%959, %957) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46c05f0) {
          %961 = "llvm.load"(%960) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4607910) {
  %964 = "vector.fma"(%948, %956, %963) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4685010)
    ** Replace : 'vector.fma'(0x4607910)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4685010) {
      %964 = "llvm.intr.fmuladd"(%946, %955, %961) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x46079d0) {
  "affine.store"(%965, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46850e0)
    ** Insert  : 'memref.store'(0x4685130)
    ** Replace : 'affine.store'(0x46079d0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46850e0) {
      %966 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4685200)
        ** Replace : 'arith.constant'(0x46850e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4685200) {
          %966 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4685130) {
      "memref.store"(%965, %509, %967) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4685260)
        ** Insert  : 'llvm.getelementptr'(0x46852f0)
        ** Insert  : 'llvm.store'(0x46c0670)
        ** Replace : 'memref.store'(0x4685130)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4685260) {
          %968 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46852f0) {
          %969 = "llvm.getelementptr"(%968, %966) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46c0670) {
          "llvm.store"(%964, %969) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4607a80) {
  %970 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1025)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46853a0)
    ** Insert  : 'arith.constant'(0x4685450)
    ** Insert  : 'arith.addi'(0x46854b0)
    ** Replace : 'affine.apply'(0x4607a80)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46853a0) {
      %970 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4685560)
        ** Replace : 'arith.addi'(0x46853a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4685560) {
          %970 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4685450) {
      %972 = "arith.constant"() {value = 1025 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4685610)
        ** Replace : 'arith.constant'(0x4685450)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4685610) {
          %972 = "llvm.mlir.constant"() {value = 1025 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46854b0) {
      %974 = "arith.addi"(%971, %973) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4685670)
        ** Replace : 'arith.addi'(0x46854b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4685670) {
          %974 = "llvm.add"(%970, %972) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4607b30) {
  %977 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %976) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4682ed0)
    ** Insert  : 'llvm.mlir.constant'(0x4685720)
    ** Insert  : 'llvm.mul'(0x4685780)
    ** Insert  : 'llvm.add'(0x4685830)
    ** Insert  : 'llvm.getelementptr'(0x46858e0)
    ** Insert  : 'llvm.load'(0x4685990)
    ** Replace : 'memref.load'(0x4607b30)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4682ed0) {
      %977 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4685720) {
      %978 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4685780) {
      %979 = "llvm.mul"(%475, %978) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4685830) {
      %980 = "llvm.add"(%979, %974) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46858e0) {
      %981 = "llvm.getelementptr"(%977, %980) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4685990) {
      %982 = "llvm.load"(%981) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x45c97b0) {
  %984 = "vector.broadcast"(%983) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x4685a20)
    ** Replace : 'vector.broadcast'(0x45c97b0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x4685a20) {
      %984 = "vector.splat"(%983) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4685ab0)
        ** Insert  : 'llvm.mlir.constant'(0x4685b10)
        ** Insert  : 'llvm.insertelement'(0x4685b70)
        ** Insert  : 'llvm.shufflevector'(0x4682f60)
        ** Replace : 'vector.splat'(0x4685a20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4685ab0) {
          %984 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4685b10) {
          %985 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4685b70) {
          %986 = "llvm.insertelement"(%984, %982, %985) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x4682f60) {
          %987 = "llvm.shufflevector"(%986, %984) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x45c98a0) {
  %990 = "vector.load"(<<UNKNOWN SSA VALUE>>, %627, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46824c0)
    ** Insert  : 'llvm.mlir.constant'(0x4682550)
    ** Insert  : 'llvm.mul'(0x46825b0)
    ** Insert  : 'llvm.add'(0x4682660)
    ** Insert  : 'llvm.getelementptr'(0x4682710)
    ** Insert  : 'llvm.bitcast'(0x46827c0)
    ** Insert  : 'llvm.load'(0x4682850)
    ** Replace : 'vector.load'(0x45c98a0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46824c0) {
      %990 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4682550) {
      %991 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46825b0) {
      %992 = "llvm.mul"(%626, %991) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4682660) {
      %993 = "llvm.add"(%992, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4682710) {
      %994 = "llvm.getelementptr"(%990, %993) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46827c0) {
      %995 = "llvm.bitcast"(%994) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4682850) {
      %996 = "llvm.load"(%995) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x45c99d0) {
  %998 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46828e0)
    ** Insert  : 'memref.load'(0x46c07a0)
    ** Replace : 'affine.load'(0x45c99d0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46828e0) {
      %998 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46829b0)
        ** Replace : 'arith.constant'(0x46828e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46829b0) {
          %998 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46c07a0) {
      %1000 = "memref.load"(%509, %999) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4683e30)
        ** Insert  : 'llvm.getelementptr'(0x4682a10)
        ** Insert  : 'llvm.load'(0x4682ac0)
        ** Replace : 'memref.load'(0x46c07a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4683e30) {
          %1000 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4682a10) {
          %1001 = "llvm.getelementptr"(%1000, %998) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4682ac0) {
          %1002 = "llvm.load"(%1001) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x45c9ac0) {
  %1005 = "vector.fma"(%989, %997, %1004) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4682be0)
    ** Replace : 'vector.fma'(0x45c9ac0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4682be0) {
      %1005 = "llvm.intr.fmuladd"(%987, %996, %1002) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4608400) {
  "affine.store"(%1006, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4682cb0)
    ** Insert  : 'memref.store'(0x4682d00)
    ** Replace : 'affine.store'(0x4608400)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4682cb0) {
      %1007 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4682dd0)
        ** Replace : 'arith.constant'(0x4682cb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4682dd0) {
          %1007 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4682d00) {
      "memref.store"(%1006, %509, %1008) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4682b50)
        ** Insert  : 'llvm.getelementptr'(0x4681ec0)
        ** Insert  : 'llvm.store'(0x46be4b0)
        ** Replace : 'memref.store'(0x4682d00)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4682b50) {
          %1009 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4681ec0) {
          %1010 = "llvm.getelementptr"(%1009, %1007) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46be4b0) {
          "llvm.store"(%1005, %1010) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46084b0) {
  %1011 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1026)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4681f70)
    ** Insert  : 'arith.constant'(0x4682020)
    ** Insert  : 'arith.addi'(0x4682080)
    ** Replace : 'affine.apply'(0x46084b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4681f70) {
      %1011 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4682130)
        ** Replace : 'arith.addi'(0x4681f70)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4682130) {
          %1011 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4682020) {
      %1013 = "arith.constant"() {value = 1026 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46821e0)
        ** Replace : 'arith.constant'(0x4682020)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46821e0) {
          %1013 = "llvm.mlir.constant"() {value = 1026 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4682080) {
      %1015 = "arith.addi"(%1012, %1014) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4682240)
        ** Replace : 'arith.addi'(0x4682080)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4682240) {
          %1015 = "llvm.add"(%1011, %1013) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4608560) {
  %1018 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %1017) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46822f0)
    ** Insert  : 'llvm.mlir.constant'(0x4682380)
    ** Insert  : 'llvm.mul'(0x4683010)
    ** Insert  : 'llvm.add'(0x46830c0)
    ** Insert  : 'llvm.getelementptr'(0x4683170)
    ** Insert  : 'llvm.load'(0x4683220)
    ** Replace : 'memref.load'(0x4608560)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46822f0) {
      %1018 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4682380) {
      %1019 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4683010) {
      %1020 = "llvm.mul"(%475, %1019) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46830c0) {
      %1021 = "llvm.add"(%1020, %1015) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x4683170) {
      %1022 = "llvm.getelementptr"(%1018, %1021) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4683220) {
      %1023 = "llvm.load"(%1022) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4608630) {
  %1025 = "vector.broadcast"(%1024) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46832b0)
    ** Replace : 'vector.broadcast'(0x4608630)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46832b0) {
      %1025 = "vector.splat"(%1024) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4683340)
        ** Insert  : 'llvm.mlir.constant'(0x46833a0)
        ** Insert  : 'llvm.insertelement'(0x4683400)
        ** Insert  : 'llvm.shufflevector'(0x46834d0)
        ** Replace : 'vector.splat'(0x46832b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4683340) {
          %1025 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46833a0) {
          %1026 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4683400) {
          %1027 = "llvm.insertelement"(%1025, %1023, %1026) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46834d0) {
          %1028 = "llvm.shufflevector"(%1027, %1025) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x46086c0) {
  %1031 = "vector.load"(<<UNKNOWN SSA VALUE>>, %675, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4683580)
    ** Insert  : 'llvm.mlir.constant'(0x4683610)
    ** Insert  : 'llvm.mul'(0x4683670)
    ** Insert  : 'llvm.add'(0x4683720)
    ** Insert  : 'llvm.getelementptr'(0x46838d0)
    ** Insert  : 'llvm.bitcast'(0x4683980)
    ** Insert  : 'llvm.load'(0x4683a10)
    ** Replace : 'vector.load'(0x46086c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4683580) {
      %1031 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4683610) {
      %1032 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4683670) {
      %1033 = "llvm.mul"(%674, %1032) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4683720) {
      %1034 = "llvm.add"(%1033, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46838d0) {
      %1035 = "llvm.getelementptr"(%1031, %1034) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x4683980) {
      %1036 = "llvm.bitcast"(%1035) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4683a10) {
      %1037 = "llvm.load"(%1036) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4608790) {
  %1039 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x4683870)
    ** Insert  : 'memref.load'(0x4683aa0)
    ** Replace : 'affine.load'(0x4608790)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4683870) {
      %1039 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4682940)
        ** Replace : 'arith.constant'(0x4683870)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4682940) {
          %1039 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x4683aa0) {
      %1041 = "memref.load"(%509, %1040) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4683b50)
        ** Insert  : 'llvm.getelementptr'(0x4683be0)
        ** Insert  : 'llvm.load'(0x4683c90)
        ** Replace : 'memref.load'(0x4683aa0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4683b50) {
          %1041 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4683be0) {
          %1042 = "llvm.getelementptr"(%1041, %1039) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x4683c90) {
          %1043 = "llvm.load"(%1042) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4608820) {
  %1046 = "vector.fma"(%1030, %1038, %1045) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x4683f70)
    ** Replace : 'vector.fma'(0x4608820)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x4683f70) {
      %1046 = "llvm.intr.fmuladd"(%1028, %1037, %1043) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4608900) {
  "affine.store"(%1047, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x4683db0)
    ** Insert  : 'memref.store'(0x4684030)
    ** Replace : 'affine.store'(0x4608900)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4683db0) {
      %1048 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4684100)
        ** Replace : 'arith.constant'(0x4683db0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4684100) {
          %1048 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x4684030) {
      "memref.store"(%1047, %509, %1049) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x4683d20)
        ** Insert  : 'llvm.getelementptr'(0x4684160)
        ** Insert  : 'llvm.store'(0x46837c0)
        ** Replace : 'memref.store'(0x4684030)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x4683d20) {
          %1050 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4684160) {
          %1051 = "llvm.getelementptr"(%1050, %1048) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46837c0) {
          "llvm.store"(%1046, %1051) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46089b0) {
  %1052 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1027)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46842a0)
    ** Insert  : 'arith.constant'(0x4684350)
    ** Insert  : 'arith.addi'(0x46843b0)
    ** Replace : 'affine.apply'(0x46089b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46842a0) {
      %1052 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4684460)
        ** Replace : 'arith.addi'(0x46842a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4684460) {
          %1052 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4684350) {
      %1054 = "arith.constant"() {value = 1027 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4684510)
        ** Replace : 'arith.constant'(0x4684350)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4684510) {
          %1054 = "llvm.mlir.constant"() {value = 1027 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46843b0) {
      %1056 = "arith.addi"(%1053, %1055) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4684570)
        ** Replace : 'arith.addi'(0x46843b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4684570) {
          %1056 = "llvm.add"(%1052, %1054) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4608ac0) {
  %1059 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %1058) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4684210)
    ** Insert  : 'llvm.mlir.constant'(0x4684620)
    ** Insert  : 'llvm.mul'(0x4684680)
    ** Insert  : 'llvm.add'(0x4684730)
    ** Insert  : 'llvm.getelementptr'(0x46847e0)
    ** Insert  : 'llvm.load'(0x4684890)
    ** Replace : 'memref.load'(0x4608ac0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4684210) {
      %1059 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4684620) {
      %1060 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4684680) {
      %1061 = "llvm.mul"(%475, %1060) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4684730) {
      %1062 = "llvm.add"(%1061, %1056) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46847e0) {
      %1063 = "llvm.getelementptr"(%1059, %1062) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x4684890) {
      %1064 = "llvm.load"(%1063) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4608bf0) {
  %1066 = "vector.broadcast"(%1065) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46849b0)
    ** Replace : 'vector.broadcast'(0x4608bf0)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46849b0) {
      %1066 = "vector.splat"(%1065) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x4684920)
        ** Insert  : 'llvm.mlir.constant'(0x4684a40)
        ** Insert  : 'llvm.insertelement'(0x4684aa0)
        ** Insert  : 'llvm.shufflevector'(0x4684b70)
        ** Replace : 'vector.splat'(0x46849b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x4684920) {
          %1066 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4684a40) {
          %1067 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x4684aa0) {
          %1068 = "llvm.insertelement"(%1066, %1064, %1067) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x4684b70) {
          %1069 = "llvm.shufflevector"(%1068, %1066) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4608ce0) {
  %1072 = "vector.load"(<<UNKNOWN SSA VALUE>>, %723, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4684c20)
    ** Insert  : 'llvm.mlir.constant'(0x4684cb0)
    ** Insert  : 'llvm.mul'(0x4684d10)
    ** Insert  : 'llvm.add'(0x4684dc0)
    ** Insert  : 'llvm.getelementptr'(0x46c89c0)
    ** Insert  : 'llvm.bitcast'(0x46c8a70)
    ** Insert  : 'llvm.load'(0x46c8b00)
    ** Replace : 'vector.load'(0x4608ce0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4684c20) {
      %1072 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x4684cb0) {
      %1073 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x4684d10) {
      %1074 = "llvm.mul"(%722, %1073) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x4684dc0) {
      %1075 = "llvm.add"(%1074, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46c89c0) {
      %1076 = "llvm.getelementptr"(%1072, %1075) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46c8a70) {
      %1077 = "llvm.bitcast"(%1076) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46c8b00) {
      %1078 = "llvm.load"(%1077) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4608e10) {
  %1080 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x4684f60)
    ** Insert  : 'memref.load'(0x46c8b90)
    ** Replace : 'affine.load'(0x4608e10)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4684f60) {
      %1080 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46c8c40)
        ** Replace : 'arith.constant'(0x4684f60)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46c8c40) {
          %1080 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46c8b90) {
      %1082 = "memref.load"(%509, %1081) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46c8ca0)
        ** Insert  : 'llvm.getelementptr'(0x46c8d30)
        ** Insert  : 'llvm.load'(0x46c8de0)
        ** Replace : 'memref.load'(0x46c8b90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46c8ca0) {
          %1082 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46c8d30) {
          %1083 = "llvm.getelementptr"(%1082, %1080) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46c8de0) {
          %1084 = "llvm.load"(%1083) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4608f00) {
  %1087 = "vector.fma"(%1071, %1079, %1086) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46c8e70)
    ** Replace : 'vector.fma'(0x4608f00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46c8e70) {
      %1087 = "llvm.intr.fmuladd"(%1069, %1078, %1084) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4609020) {
  "affine.store"(%1088, %509) {map = affine_map<() -> (2)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46c8f40)
    ** Insert  : 'memref.store'(0x46c8f90)
    ** Replace : 'affine.store'(0x4609020)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46c8f40) {
      %1089 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46c9060)
        ** Replace : 'arith.constant'(0x46c8f40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46c9060) {
          %1089 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46c8f90) {
      "memref.store"(%1088, %509, %1090) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46cb6a0)
        ** Insert  : 'llvm.getelementptr'(0x46c90c0)
        ** Insert  : 'llvm.store'(0x4684e60)
        ** Replace : 'memref.store'(0x46c8f90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46cb6a0) {
          %1091 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46c90c0) {
          %1092 = "llvm.getelementptr"(%1091, %1089) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4684e60) {
          "llvm.store"(%1087, %1092) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46090d0) {
  %1093 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1536)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46c9200)
    ** Insert  : 'arith.constant'(0x46c92b0)
    ** Insert  : 'arith.addi'(0x46c9310)
    ** Replace : 'affine.apply'(0x46090d0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46c9200) {
      %1093 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46c93c0)
        ** Replace : 'arith.addi'(0x46c9200)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46c93c0) {
          %1093 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46c92b0) {
      %1095 = "arith.constant"() {value = 1536 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46c9470)
        ** Replace : 'arith.constant'(0x46c92b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46c9470) {
          %1095 = "llvm.mlir.constant"() {value = 1536 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46c9310) {
      %1097 = "arith.addi"(%1094, %1096) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46c94d0)
        ** Replace : 'arith.addi'(0x46c9310)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46c94d0) {
          %1097 = "llvm.add"(%1093, %1095) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x46091e0) {
  %1100 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %1099) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46c9170)
    ** Insert  : 'llvm.mlir.constant'(0x46c9580)
    ** Insert  : 'llvm.mul'(0x46c95e0)
    ** Insert  : 'llvm.add'(0x46c9690)
    ** Insert  : 'llvm.getelementptr'(0x46c9740)
    ** Insert  : 'llvm.load'(0x46c97f0)
    ** Replace : 'memref.load'(0x46091e0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46c9170) {
      %1100 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46c9580) {
      %1101 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46c95e0) {
      %1102 = "llvm.mul"(%475, %1101) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46c9690) {
      %1103 = "llvm.add"(%1102, %1097) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46c9740) {
      %1104 = "llvm.getelementptr"(%1100, %1103) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46c97f0) {
      %1105 = "llvm.load"(%1104) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4609310) {
  %1107 = "vector.broadcast"(%1106) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46c9880)
    ** Replace : 'vector.broadcast'(0x4609310)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46c9880) {
      %1107 = "vector.splat"(%1106) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46c9910)
        ** Insert  : 'llvm.mlir.constant'(0x46c9970)
        ** Insert  : 'llvm.insertelement'(0x46c99d0)
        ** Insert  : 'llvm.shufflevector'(0x46c9aa0)
        ** Replace : 'vector.splat'(0x46c9880)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46c9910) {
          %1107 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46c9970) {
          %1108 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46c99d0) {
          %1109 = "llvm.insertelement"(%1107, %1105, %1108) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46c9aa0) {
          %1110 = "llvm.shufflevector"(%1109, %1107) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4609400) {
  %1113 = "vector.load"(<<UNKNOWN SSA VALUE>>, %583, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46cb4d0)
    ** Insert  : 'llvm.mlir.constant'(0x46cb560)
    ** Insert  : 'llvm.mul'(0x46cb5c0)
    ** Insert  : 'llvm.add'(0x46caf90)
    ** Insert  : 'llvm.getelementptr'(0x46cb040)
    ** Insert  : 'llvm.bitcast'(0x46cb0f0)
    ** Insert  : 'llvm.load'(0x46cb180)
    ** Replace : 'vector.load'(0x4609400)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46cb4d0) {
      %1113 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46cb560) {
      %1114 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46cb5c0) {
      %1115 = "llvm.mul"(%582, %1114) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46caf90) {
      %1116 = "llvm.add"(%1115, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46cb040) {
      %1117 = "llvm.getelementptr"(%1113, %1116) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46cb0f0) {
      %1118 = "llvm.bitcast"(%1117) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46cb180) {
      %1119 = "llvm.load"(%1118) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4609530) {
  %1121 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46cb2a0)
    ** Insert  : 'memref.load'(0x46cb300)
    ** Replace : 'affine.load'(0x4609530)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cb2a0) {
      %1121 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46cb3b0)
        ** Replace : 'arith.constant'(0x46cb2a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cb3b0) {
          %1121 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46cb300) {
      %1123 = "memref.load"(%509, %1122) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46cb210)
        ** Insert  : 'llvm.getelementptr'(0x46c9b50)
        ** Insert  : 'llvm.load'(0x46c9c00)
        ** Replace : 'memref.load'(0x46cb300)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46cb210) {
          %1123 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46c9b50) {
          %1124 = "llvm.getelementptr"(%1123, %1121) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46c9c00) {
          %1125 = "llvm.load"(%1124) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4609620) {
  %1128 = "vector.fma"(%1112, %1120, %1127) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46c9d20)
    ** Replace : 'vector.fma'(0x4609620)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46c9d20) {
      %1128 = "llvm.intr.fmuladd"(%1110, %1119, %1125) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4609740) {
  "affine.store"(%1129, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46cb410)
    ** Insert  : 'memref.store'(0x46c9de0)
    ** Replace : 'affine.store'(0x4609740)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cb410) {
      %1130 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46c9eb0)
        ** Replace : 'arith.constant'(0x46cb410)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46c9eb0) {
          %1130 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46c9de0) {
      "memref.store"(%1129, %509, %1131) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46c9c90)
        ** Insert  : 'llvm.getelementptr'(0x4687960)
        ** Insert  : 'llvm.store'(0x46823d0)
        ** Replace : 'memref.store'(0x46c9de0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46c9c90) {
          %1132 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x4687960) {
          %1133 = "llvm.getelementptr"(%1132, %1130) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46823d0) {
          "llvm.store"(%1128, %1133) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x46097f0) {
  %1134 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1537)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x4687aa0)
    ** Insert  : 'arith.constant'(0x4687b50)
    ** Insert  : 'arith.addi'(0x4687bb0)
    ** Replace : 'affine.apply'(0x46097f0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4687aa0) {
      %1134 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4687c60)
        ** Replace : 'arith.addi'(0x4687aa0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4687c60) {
          %1134 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x4687b50) {
      %1136 = "arith.constant"() {value = 1537 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x4687d10)
        ** Replace : 'arith.constant'(0x4687b50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x4687d10) {
          %1136 = "llvm.mlir.constant"() {value = 1537 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x4687bb0) {
      %1138 = "arith.addi"(%1135, %1137) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x4687d70)
        ** Replace : 'arith.addi'(0x4687bb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x4687d70) {
          %1138 = "llvm.add"(%1134, %1136) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4609900) {
  %1141 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %1140) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x4687a10)
    ** Insert  : 'llvm.mlir.constant'(0x46ca920)
    ** Insert  : 'llvm.mul'(0x46ca980)
    ** Insert  : 'llvm.add'(0x46caa30)
    ** Insert  : 'llvm.getelementptr'(0x46caae0)
    ** Insert  : 'llvm.load'(0x46cab90)
    ** Replace : 'memref.load'(0x4609900)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x4687a10) {
      %1141 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46ca920) {
      %1142 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46ca980) {
      %1143 = "llvm.mul"(%475, %1142) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46caa30) {
      %1144 = "llvm.add"(%1143, %1138) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46caae0) {
      %1145 = "llvm.getelementptr"(%1141, %1144) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46cab90) {
      %1146 = "llvm.load"(%1145) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4609a30) {
  %1148 = "vector.broadcast"(%1147) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46cac20)
    ** Replace : 'vector.broadcast'(0x4609a30)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46cac20) {
      %1148 = "vector.splat"(%1147) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46cacb0)
        ** Insert  : 'llvm.mlir.constant'(0x46cad10)
        ** Insert  : 'llvm.insertelement'(0x46cad70)
        ** Insert  : 'llvm.shufflevector'(0x46cae40)
        ** Replace : 'vector.splat'(0x46cac20)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46cacb0) {
          %1148 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cad10) {
          %1149 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46cad70) {
          %1150 = "llvm.insertelement"(%1148, %1146, %1149) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46cae40) {
          %1151 = "llvm.shufflevector"(%1150, %1148) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4609b20) {
  %1154 = "vector.load"(<<UNKNOWN SSA VALUE>>, %627, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46cb730)
    ** Insert  : 'llvm.mlir.constant'(0x46cb7c0)
    ** Insert  : 'llvm.mul'(0x46cb820)
    ** Insert  : 'llvm.add'(0x46cb8d0)
    ** Insert  : 'llvm.getelementptr'(0x46cb980)
    ** Insert  : 'llvm.bitcast'(0x46cba30)
    ** Insert  : 'llvm.load'(0x46cbac0)
    ** Replace : 'vector.load'(0x4609b20)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46cb730) {
      %1154 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46cb7c0) {
      %1155 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46cb820) {
      %1156 = "llvm.mul"(%626, %1155) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46cb8d0) {
      %1157 = "llvm.add"(%1156, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46cb980) {
      %1158 = "llvm.getelementptr"(%1154, %1157) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46cba30) {
      %1159 = "llvm.bitcast"(%1158) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46cbac0) {
      %1160 = "llvm.load"(%1159) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x4609c50) {
  %1162 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46cbb50)
    ** Insert  : 'memref.load'(0x46cbbb0)
    ** Replace : 'affine.load'(0x4609c50)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cbb50) {
      %1162 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46cbc60)
        ** Replace : 'arith.constant'(0x46cbb50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cbc60) {
          %1162 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46cbbb0) {
      %1164 = "memref.load"(%509, %1163) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46cbcc0)
        ** Insert  : 'llvm.getelementptr'(0x46cbd50)
        ** Insert  : 'llvm.load'(0x46cbe00)
        ** Replace : 'memref.load'(0x46cbbb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46cbcc0) {
          %1164 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46cbd50) {
          %1165 = "llvm.getelementptr"(%1164, %1162) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46cbe00) {
          %1166 = "llvm.load"(%1165) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4609d40) {
  %1169 = "vector.fma"(%1153, %1161, %1168) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46cbf20)
    ** Replace : 'vector.fma'(0x4609d40)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46cbf20) {
      %1169 = "llvm.intr.fmuladd"(%1151, %1160, %1166) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4609e60) {
  "affine.store"(%1170, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46cbff0)
    ** Insert  : 'memref.store'(0x46cc040)
    ** Replace : 'affine.store'(0x4609e60)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cbff0) {
      %1171 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46cc110)
        ** Replace : 'arith.constant'(0x46cbff0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cc110) {
          %1171 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46cc040) {
      "memref.store"(%1170, %509, %1172) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46cbe90)
        ** Insert  : 'llvm.getelementptr'(0x46cc170)
        ** Insert  : 'llvm.store'(0x46caee0)
        ** Replace : 'memref.store'(0x46cc040)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46cbe90) {
          %1173 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46cc170) {
          %1174 = "llvm.getelementptr"(%1173, %1171) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46caee0) {
          "llvm.store"(%1169, %1174) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4609f10) {
  %1175 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1538)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46cc220)
    ** Insert  : 'arith.constant'(0x46cc2d0)
    ** Insert  : 'arith.addi'(0x46cc330)
    ** Replace : 'affine.apply'(0x4609f10)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46cc220) {
      %1175 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46cc3e0)
        ** Replace : 'arith.addi'(0x46cc220)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46cc3e0) {
          %1175 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cc2d0) {
      %1177 = "arith.constant"() {value = 1538 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46cc490)
        ** Replace : 'arith.constant'(0x46cc2d0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cc490) {
          %1177 = "llvm.mlir.constant"() {value = 1538 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46cc330) {
      %1179 = "arith.addi"(%1176, %1178) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46cc4f0)
        ** Replace : 'arith.addi'(0x46cc330)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46cc4f0) {
          %1179 = "llvm.add"(%1175, %1177) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x460a020) {
  %1182 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %1181) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46cebb0)
    ** Insert  : 'llvm.mlir.constant'(0x46cc5a0)
    ** Insert  : 'llvm.mul'(0x46cc600)
    ** Insert  : 'llvm.add'(0x46cc6b0)
    ** Insert  : 'llvm.getelementptr'(0x46cc760)
    ** Insert  : 'llvm.load'(0x46cc810)
    ** Replace : 'memref.load'(0x460a020)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46cebb0) {
      %1182 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46cc5a0) {
      %1183 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46cc600) {
      %1184 = "llvm.mul"(%475, %1183) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46cc6b0) {
      %1185 = "llvm.add"(%1184, %1179) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46cc760) {
      %1186 = "llvm.getelementptr"(%1182, %1185) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46cc810) {
      %1187 = "llvm.load"(%1186) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x460a150) {
  %1189 = "vector.broadcast"(%1188) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46cc8a0)
    ** Replace : 'vector.broadcast'(0x460a150)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46cc8a0) {
      %1189 = "vector.splat"(%1188) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46cc930)
        ** Insert  : 'llvm.mlir.constant'(0x46cc990)
        ** Insert  : 'llvm.insertelement'(0x46cc9f0)
        ** Insert  : 'llvm.shufflevector'(0x46ccb90)
        ** Replace : 'vector.splat'(0x46cc8a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46cc930) {
          %1189 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cc990) {
          %1190 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46cc9f0) {
          %1191 = "llvm.insertelement"(%1189, %1187, %1190) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46ccb90) {
          %1192 = "llvm.shufflevector"(%1191, %1189) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x460a240) {
  %1195 = "vector.load"(<<UNKNOWN SSA VALUE>>, %675, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46ccac0)
    ** Insert  : 'llvm.mlir.constant'(0x46ce060)
    ** Insert  : 'llvm.mul'(0x46ce0c0)
    ** Insert  : 'llvm.add'(0x46ce170)
    ** Insert  : 'llvm.getelementptr'(0x46ce220)
    ** Insert  : 'llvm.bitcast'(0x46ce2d0)
    ** Insert  : 'llvm.load'(0x46ce360)
    ** Replace : 'vector.load'(0x460a240)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46ccac0) {
      %1195 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46ce060) {
      %1196 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46ce0c0) {
      %1197 = "llvm.mul"(%674, %1196) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46ce170) {
      %1198 = "llvm.add"(%1197, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46ce220) {
      %1199 = "llvm.getelementptr"(%1195, %1198) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46ce2d0) {
      %1200 = "llvm.bitcast"(%1199) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46ce360) {
      %1201 = "llvm.load"(%1200) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a370) {
  %1203 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46ce480)
    ** Insert  : 'memref.load'(0x46ce4e0)
    ** Replace : 'affine.load'(0x460a370)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46ce480) {
      %1203 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46ce590)
        ** Replace : 'arith.constant'(0x46ce480)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46ce590) {
          %1203 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46ce4e0) {
      %1205 = "memref.load"(%509, %1204) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46ce3f0)
        ** Insert  : 'llvm.getelementptr'(0x46ce5f0)
        ** Insert  : 'llvm.load'(0x46ce6a0)
        ** Replace : 'memref.load'(0x46ce4e0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46ce3f0) {
          %1205 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46ce5f0) {
          %1206 = "llvm.getelementptr"(%1205, %1203) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46ce6a0) {
          %1207 = "llvm.load"(%1206) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x4606b50) {
  %1210 = "vector.fma"(%1194, %1202, %1209) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46ce7f0)
    ** Replace : 'vector.fma'(0x4606b50)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46ce7f0) {
      %1210 = "llvm.intr.fmuladd"(%1192, %1201, %1207) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x4606c70) {
  "affine.store"(%1211, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46ce8c0)
    ** Insert  : 'memref.store'(0x46ce910)
    ** Replace : 'affine.store'(0x4606c70)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46ce8c0) {
      %1212 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46ce9e0)
        ** Replace : 'arith.constant'(0x46ce8c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46ce9e0) {
          %1212 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46ce910) {
      "memref.store"(%1211, %509, %1213) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46ce760)
        ** Insert  : 'llvm.getelementptr'(0x46cea40)
        ** Insert  : 'llvm.store'(0x4682e20)
        ** Replace : 'memref.store'(0x46ce910)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46ce760) {
          %1214 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46cea40) {
          %1215 = "llvm.getelementptr"(%1214, %1212) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x4682e20) {
          "llvm.store"(%1210, %1215) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.apply'(0x4606d20) {
  %1216 = "affine.apply"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) {map = affine_map<(d0, d1) -> (d0 + d1 + 1539)>} : (index, index) -> index

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.apply -> ()' {
    ** Insert  : 'arith.addi'(0x46ccc40)
    ** Insert  : 'arith.constant'(0x46cccf0)
    ** Insert  : 'arith.addi'(0x46ccd50)
    ** Replace : 'affine.apply'(0x4606d20)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46ccc40) {
      %1216 = "arith.addi"(<<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46cce00)
        ** Replace : 'arith.addi'(0x46ccc40)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46cce00) {
          %1216 = "llvm.add"(%493, %579) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cccf0) {
      %1218 = "arith.constant"() {value = 1539 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46cceb0)
        ** Replace : 'arith.constant'(0x46cccf0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cceb0) {
          %1218 = "llvm.mlir.constant"() {value = 1539 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'arith.addi'(0x46ccd50) {
      %1220 = "arith.addi"(%1217, %1219) : (index, index) -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.addi -> ()' {
        ** Insert  : 'llvm.add'(0x46ccf10)
        ** Replace : 'arith.addi'(0x46ccd50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.add'(0x46ccf10) {
          %1220 = "llvm.add"(%1216, %1218) : (i64, i64) -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'memref.load'(0x4606e30) {
  %1223 = "memref.load"(%392, <<UNKNOWN SSA VALUE>>, %1222) : (memref<1x2048xf32>, index, index) -> f32

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'memref.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46ceaf0)
    ** Insert  : 'llvm.mlir.constant'(0x46ccfc0)
    ** Insert  : 'llvm.mul'(0x46cd020)
    ** Insert  : 'llvm.add'(0x46cd0d0)
    ** Insert  : 'llvm.getelementptr'(0x46cd180)
    ** Insert  : 'llvm.load'(0x46cd230)
    ** Replace : 'memref.load'(0x4606e30)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46ceaf0) {
      %1223 = "llvm.extractvalue"(%391) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46ccfc0) {
      %1224 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46cd020) {
      %1225 = "llvm.mul"(%475, %1224) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46cd0d0) {
      %1226 = "llvm.add"(%1225, %1220) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46cd180) {
      %1227 = "llvm.getelementptr"(%1223, %1226) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46cd230) {
      %1228 = "llvm.load"(%1227) : (!llvm.ptr<f32>) -> f32

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.broadcast'(0x4606f60) {
  %1230 = "vector.broadcast"(%1229) : (f32) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.broadcast -> ()' {
    ** Insert  : 'vector.splat'(0x46cd2c0)
    ** Replace : 'vector.broadcast'(0x4606f60)

    //===-------------------------------------------===//
    Legalizing operation : 'vector.splat'(0x46cd2c0) {
      %1230 = "vector.splat"(%1229) : (f32) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'vector.splat -> ()' {
      } -> FAILURE : pattern failed to match

      * Pattern : 'vector.splat -> ()' {
        ** Insert  : 'llvm.mlir.undef'(0x46cd350)
        ** Insert  : 'llvm.mlir.constant'(0x46cd3b0)
        ** Insert  : 'llvm.insertelement'(0x46cd410)
        ** Insert  : 'llvm.shufflevector'(0x46cd4e0)
        ** Replace : 'vector.splat'(0x46cd2c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.undef'(0x46cd350) {
          %1230 = "llvm.mlir.undef"() : () -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cd3b0) {
          %1231 = "llvm.mlir.constant"() {value = 0 : i32} : () -> i32

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.insertelement'(0x46cd410) {
          %1232 = "llvm.insertelement"(%1230, %1228, %1231) : (vector<8xf32>, f32, i32) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.shufflevector'(0x46cd4e0) {
          %1233 = "llvm.shufflevector"(%1232, %1230) {mask = array<i32: 0, 0, 0, 0, 0, 0, 0, 0>} : (vector<8xf32>, vector<8xf32>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.load'(0x4607050) {
  %1236 = "vector.load"(<<UNKNOWN SSA VALUE>>, %723, <<UNKNOWN SSA VALUE>>) : (memref<512x512xf32>, index, index) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.load -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.load -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46cdda0)
    ** Insert  : 'llvm.mlir.constant'(0x46cdf00)
    ** Insert  : 'llvm.mul'(0x46cdf60)
    ** Insert  : 'llvm.add'(0x46cd590)
    ** Insert  : 'llvm.getelementptr'(0x46cd640)
    ** Insert  : 'llvm.bitcast'(0x46cd6f0)
    ** Insert  : 'llvm.load'(0x46cd780)
    ** Replace : 'vector.load'(0x4607050)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46cdda0) {
      %1236 = "llvm.extractvalue"(%2) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46cdf00) {
      %1237 = "llvm.mlir.constant"() {value = 512 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46cdf60) {
      %1238 = "llvm.mul"(%722, %1237) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46cd590) {
      %1239 = "llvm.add"(%1238, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46cd640) {
      %1240 = "llvm.getelementptr"(%1236, %1239) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46cd6f0) {
      %1241 = "llvm.bitcast"(%1240) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46cd780) {
      %1242 = "llvm.load"(%1241) {alignment = 4 : i64} : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460b0a0) {
  %1244 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46cde30)
    ** Insert  : 'memref.load'(0x46cd8a0)
    ** Replace : 'affine.load'(0x460b0a0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cde30) {
      %1244 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46cd950)
        ** Replace : 'arith.constant'(0x46cde30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cd950) {
          %1244 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46cd8a0) {
      %1246 = "memref.load"(%509, %1245) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46cd810)
        ** Insert  : 'llvm.getelementptr'(0x46cd9b0)
        ** Insert  : 'llvm.load'(0x46cda60)
        ** Replace : 'memref.load'(0x46cd8a0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46cd810) {
          %1246 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46cd9b0) {
          %1247 = "llvm.getelementptr"(%1246, %1244) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46cda60) {
          %1248 = "llvm.load"(%1247) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.fma'(0x460b190) {
  %1251 = "vector.fma"(%1235, %1243, %1250) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.fma -> ()' {
    ** Insert  : 'llvm.intr.fmuladd'(0x46cdb80)
    ** Replace : 'vector.fma'(0x460b190)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.intr.fmuladd'(0x46cdb80) {
      %1251 = "llvm.intr.fmuladd"(%1233, %1242, %1248) : (vector<8xf32>, vector<8xf32>, vector<8xf32>) -> vector<8xf32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.store'(0x460b2b0) {
  "affine.store"(%1252, %509) {map = affine_map<() -> (3)>} : (vector<8xf32>, memref<4xvector<8xf32>>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.store -> ()' {
    ** Insert  : 'arith.constant'(0x46cdc50)
    ** Insert  : 'memref.store'(0x46cec30)
    ** Replace : 'affine.store'(0x460b2b0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cdc50) {
      %1253 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46cdcb0)
        ** Replace : 'arith.constant'(0x46cdc50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cdcb0) {
          %1253 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.store'(0x46cec30) {
      "memref.store"(%1252, %509, %1254) : (vector<8xf32>, memref<4xvector<8xf32>>, index) -> ()

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.store -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46cdaf0)
        ** Insert  : 'llvm.getelementptr'(0x46ced00)
        ** Insert  : 'llvm.store'(0x46ceda0)
        ** Replace : 'memref.store'(0x46cec30)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46cdaf0) {
          %1255 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46ced00) {
          %1256 = "llvm.getelementptr"(%1255, %1253) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.store'(0x46ceda0) {
          "llvm.store"(%1251, %1256) : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f66f0) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a4d0) {
  %1259 = "affine.load"(%509) {map = affine_map<() -> (0)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46cee50)
    ** Insert  : 'memref.load'(0x46ceeb0)
    ** Replace : 'affine.load'(0x460a4d0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cee50) {
      %1259 = "arith.constant"() {value = 0 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46cef60)
        ** Replace : 'arith.constant'(0x46cee50)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46cef60) {
          %1259 = "llvm.mlir.constant"() {value = 0 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46ceeb0) {
      %1261 = "memref.load"(%509, %1260) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46d1680)
        ** Insert  : 'llvm.getelementptr'(0x46cefc0)
        ** Insert  : 'llvm.load'(0x46cf070)
        ** Replace : 'memref.load'(0x46ceeb0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46d1680) {
          %1261 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46cefc0) {
          %1262 = "llvm.getelementptr"(%1261, %1259) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46cf070) {
          %1263 = "llvm.load"(%1262) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x4600a20) {
  "vector.store"(%1265, %444, <<UNKNOWN SSA VALUE>>, <<UNKNOWN SSA VALUE>>) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.store -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.store -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46cf100)
    ** Insert  : 'llvm.mlir.constant'(0x46d05b0)
    ** Insert  : 'llvm.mul'(0x46d0610)
    ** Insert  : 'llvm.add'(0x46d06c0)
    ** Insert  : 'llvm.getelementptr'(0x46d0770)
    ** Insert  : 'llvm.bitcast'(0x46d0820)
    ** Insert  : 'llvm.store'(0x46d08a0)
    ** Replace : 'vector.store'(0x4600a20)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46cf100) {
      %1266 = "llvm.extractvalue"(%443) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46d05b0) {
      %1267 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46d0610) {
      %1268 = "llvm.mul"(%475, %1267) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46d06c0) {
      %1269 = "llvm.add"(%1268, %484) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46d0770) {
      %1270 = "llvm.getelementptr"(%1266, %1269) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46d0820) {
      %1271 = "llvm.bitcast"(%1270) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x46d08a0) {
      "llvm.store"(%1263, %1271) {alignment = 4 : i64} : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a560) {
  %1272 = "affine.load"(%509) {map = affine_map<() -> (1)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46d0950)
    ** Insert  : 'memref.load'(0x46d09b0)
    ** Replace : 'affine.load'(0x460a560)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46d0950) {
      %1272 = "arith.constant"() {value = 1 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46d0a60)
        ** Replace : 'arith.constant'(0x46d0950)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46d0a60) {
          %1272 = "llvm.mlir.constant"() {value = 1 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46d09b0) {
      %1274 = "memref.load"(%509, %1273) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46cdd10)
        ** Insert  : 'llvm.getelementptr'(0x46d0ac0)
        ** Insert  : 'llvm.load'(0x46d0b70)
        ** Replace : 'memref.load'(0x46d09b0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46cdd10) {
          %1274 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46d0ac0) {
          %1275 = "llvm.getelementptr"(%1274, %1272) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46d0b70) {
          %1276 = "llvm.load"(%1275) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x45ecf60) {
  "vector.store"(%1278, %444, <<UNKNOWN SSA VALUE>>, %526) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.store -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.store -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46d2720)
    ** Insert  : 'llvm.mlir.constant'(0x46d0c00)
    ** Insert  : 'llvm.mul'(0x46d0c60)
    ** Insert  : 'llvm.add'(0x46d0d10)
    ** Insert  : 'llvm.getelementptr'(0x46d0dc0)
    ** Insert  : 'llvm.bitcast'(0x46d0e70)
    ** Insert  : 'llvm.store'(0x46d0ef0)
    ** Replace : 'vector.store'(0x45ecf60)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2720) {
      %1279 = "llvm.extractvalue"(%443) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46d0c00) {
      %1280 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46d0c60) {
      %1281 = "llvm.mul"(%475, %1280) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46d0d10) {
      %1282 = "llvm.add"(%1281, %524) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46d0dc0) {
      %1283 = "llvm.getelementptr"(%1279, %1282) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46d0e70) {
      %1284 = "llvm.bitcast"(%1283) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x46d0ef0) {
      "llvm.store"(%1276, %1284) {alignment = 4 : i64} : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a5f0) {
  %1285 = "affine.load"(%509) {map = affine_map<() -> (2)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46cde90)
    ** Insert  : 'memref.load'(0x46d25c0)
    ** Replace : 'affine.load'(0x460a5f0)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46cde90) {
      %1285 = "arith.constant"() {value = 2 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46d2670)
        ** Replace : 'arith.constant'(0x46cde90)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46d2670) {
          %1285 = "llvm.mlir.constant"() {value = 2 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46d25c0) {
      %1287 = "memref.load"(%509, %1286) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46d2530)
        ** Insert  : 'llvm.getelementptr'(0x46d0fa0)
        ** Insert  : 'llvm.load'(0x46d1050)
        ** Replace : 'memref.load'(0x46d25c0)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46d2530) {
          %1287 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46d0fa0) {
          %1288 = "llvm.getelementptr"(%1287, %1285) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46d1050) {
          %1289 = "llvm.load"(%1288) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x45ed1b0) {
  "vector.store"(%1291, %444, <<UNKNOWN SSA VALUE>>, %543) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.store -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.store -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46d10e0)
    ** Insert  : 'llvm.mlir.constant'(0x46d24c0)
    ** Insert  : 'llvm.mul'(0x46d1170)
    ** Insert  : 'llvm.add'(0x46d1220)
    ** Insert  : 'llvm.getelementptr'(0x46d12d0)
    ** Insert  : 'llvm.bitcast'(0x46d1380)
    ** Insert  : 'llvm.store'(0x46d1400)
    ** Replace : 'vector.store'(0x45ed1b0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d10e0) {
      %1292 = "llvm.extractvalue"(%443) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46d24c0) {
      %1293 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46d1170) {
      %1294 = "llvm.mul"(%475, %1293) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46d1220) {
      %1295 = "llvm.add"(%1294, %541) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46d12d0) {
      %1296 = "llvm.getelementptr"(%1292, %1295) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46d1380) {
      %1297 = "llvm.bitcast"(%1296) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x46d1400) {
      "llvm.store"(%1289, %1297) {alignment = 4 : i64} : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.load'(0x460a680) {
  %1298 = "affine.load"(%509) {map = affine_map<() -> (3)>} : (memref<4xvector<8xf32>>) -> vector<8xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'affine.load -> ()' {
    ** Insert  : 'arith.constant'(0x46d1710)
    ** Insert  : 'memref.load'(0x46d1770)
    ** Replace : 'affine.load'(0x460a680)

    //===-------------------------------------------===//
    Legalizing operation : 'arith.constant'(0x46d1710) {
      %1298 = "arith.constant"() {value = 3 : index} : () -> index

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'arith.constant -> ()' {
        ** Insert  : 'llvm.mlir.constant'(0x46d1820)
        ** Replace : 'arith.constant'(0x46d1710)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.mlir.constant'(0x46d1820) {
          %1298 = "llvm.mlir.constant"() {value = 3 : index} : () -> i64

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'memref.load'(0x46d1770) {
      %1300 = "memref.load"(%509, %1299) : (memref<4xvector<8xf32>>, index) -> vector<8xf32>

      * Fold {
      } -> FAILURE : unable to fold

      * Pattern : 'memref.load -> ()' {
        ** Insert  : 'llvm.extractvalue'(0x46d14b0)
        ** Insert  : 'llvm.getelementptr'(0x46d1880)
        ** Insert  : 'llvm.load'(0x46d1930)
        ** Replace : 'memref.load'(0x46d1770)

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.extractvalue'(0x46d14b0) {
          %1300 = "llvm.extractvalue"(%508) {position = array<i64: 1>} : (!llvm.struct<(ptr<vector<8xf32>>, ptr<vector<8xf32>>, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.getelementptr'(0x46d1880) {
          %1301 = "llvm.getelementptr"(%1300, %1298) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<vector<8xf32>>, i64) -> !llvm.ptr<vector<8xf32>>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//

        //===-------------------------------------------===//
        Legalizing operation : 'llvm.load'(0x46d1930) {
          %1302 = "llvm.load"(%1301) : (!llvm.ptr<vector<8xf32>>) -> vector<8xf32>

        } -> SUCCESS : operation marked legal by the target
        //===-------------------------------------------===//
      } -> SUCCESS : pattern applied successfully
    } -> SUCCESS
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'vector.store'(0x4602990) {
  "vector.store"(%1304, %444, <<UNKNOWN SSA VALUE>>, %560) : (vector<8xf32>, memref<1x2048xf32>, index, index) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'vector.store -> ()' {
  } -> FAILURE : pattern failed to match

  * Pattern : 'vector.store -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46d37c0)
    ** Insert  : 'llvm.mlir.constant'(0x46d3750)
    ** Insert  : 'llvm.mul'(0x46d19c0)
    ** Insert  : 'llvm.add'(0x46d1a70)
    ** Insert  : 'llvm.getelementptr'(0x46d1b20)
    ** Insert  : 'llvm.bitcast'(0x46d1bd0)
    ** Insert  : 'llvm.store'(0x46d1c50)
    ** Replace : 'vector.store'(0x4602990)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d37c0) {
      %1305 = "llvm.extractvalue"(%443) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46d3750) {
      %1306 = "llvm.mlir.constant"() {value = 2048 : index} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mul'(0x46d19c0) {
      %1307 = "llvm.mul"(%475, %1306) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.add'(0x46d1a70) {
      %1308 = "llvm.add"(%1307, %558) : (i64, i64) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46d1b20) {
      %1309 = "llvm.getelementptr"(%1305, %1308) {rawConstantIndices = array<i32: -2147483648>} : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46d1bd0) {
      %1310 = "llvm.bitcast"(%1309) : (!llvm.ptr<f32>) -> !llvm.ptr<vector<8xf32>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.store'(0x46d1c50) {
      "llvm.store"(%1302, %1310) {alignment = 4 : i64} : (vector<8xf32>, !llvm.ptr<vector<8xf32>>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f4370) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f5c00) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x45f5fd0) {
  "affine.yield"() : () -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'affine.yield'(0x460a850) {
  "affine.yield"(%307, %340) : (i32, i32) -> ()

} -> SUCCESS : operation marked 'ignored' during conversion
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x45f57c0) {
  "func.return"() : () -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.return -> ()' {
    ** Insert  : 'llvm.return'(0x46d3650)
    ** Replace : 'func.return'(0x45f57c0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x46d3650) {
      "llvm.return"() : () -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.func'(0x45e5e80) {
  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.func -> ()' {
    ** Insert  : 'llvm.func'(0x46d36b0)
    ** Erase   : 'func.func'(0x45e5e80)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.func'(0x46d36b0) {
    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'arith.constant'(0x45e7520) {
  %0 = "arith.constant"() {value = 0 : i64} : () -> i64

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'arith.constant -> ()' {
    ** Insert  : 'llvm.mlir.constant'(0x46d1d00)
    ** Replace : 'arith.constant'(0x45e7520)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.mlir.constant'(0x46d1d00) {
      %0 = "llvm.mlir.constant"() {value = 0 : i64} : () -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'llvm.mlir.null'(0x45e7430) {
  %2 = "llvm.mlir.null"() : () -> !llvm.ptr<i8>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.bitcast'(0x460a900) {
  %3 = "rmem.bitcast"(<<UNKNOWN SSA VALUE>>) : (!llvm.ptr<i8>) -> !llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.bitcast -> ()' {
    ** Insert  : 'llvm.bitcast'(0x46d35d0)
    ** Replace : 'rmem.bitcast'(0x460a900)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.bitcast'(0x46d35d0) {
      %3 = "llvm.bitcast"(%arg0) : (!llvm.ptr<i8>) -> !llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x460a990) {
  %5 = "rmem.llvm.getelementptr"(%4, %1) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 0>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x46d1e50)
    ** Replace : 'rmem.llvm.getelementptr'(0x460a990)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46d1e50) {
      %5 = "llvm.getelementptr"(%3, %0) {rawConstantIndices = array<i32: -2147483648, 0>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x460aa40) {
  %7 = "rmem.llvm.load"(%6) : (!llvm.ptr<!rmem.rmref<2, memref<64512x512xf32>>>) -> !rmem.rmref<2, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.load -> ()' {
    ** Insert  : 'llvm.load'(0x46d1d60)
    ** Replace : 'rmem.llvm.load'(0x460aa40)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46d1d60) {
      %7 = "llvm.load"(%5) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x46161e0) {
  %9 = "builtin.unrealized_conversion_cast"(%8) {lower_tgt_mat = true} : (!rmem.rmref<2, memref<64512x512xf32>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x460aad0) {
  %10 = "rmem.llvm.getelementptr"(%4, %1) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 1>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x46d1f90)
    ** Replace : 'rmem.llvm.getelementptr'(0x460aad0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46d1f90) {
      %10 = "llvm.getelementptr"(%3, %0) {rawConstantIndices = array<i32: -2147483648, 1>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x460ab80) {
  %12 = "rmem.llvm.load"(%11) : (!llvm.ptr<!rmem.rmref<1, memref<64512x512xf32>>>) -> !rmem.rmref<1, memref<64512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.load -> ()' {
    ** Insert  : 'llvm.load'(0x46d1f00)
    ** Replace : 'rmem.llvm.load'(0x460ab80)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46d1f00) {
      %12 = "llvm.load"(%10) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4616150) {
  %14 = "builtin.unrealized_conversion_cast"(%13) {lower_tgt_mat = true} : (!rmem.rmref<1, memref<64512x512xf32>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.getelementptr'(0x460ac10) {
  %15 = "rmem.llvm.getelementptr"(%4, %1) {elem_type = !llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>, structIndices = array<i32: 2>} : (!llvm.ptr<!llvm.struct<(!rmem.rmref<2, memref<64512x512xf32>>, !rmem.rmref<1, memref<64512x512xf32>>, memref<512x512xf32>)>>, i64) -> !llvm.ptr<memref<512x512xf32>>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.getelementptr -> ()' {
    ** Insert  : 'llvm.getelementptr'(0x46d20d0)
    ** Replace : 'rmem.llvm.getelementptr'(0x460ac10)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.getelementptr'(0x46d20d0) {
      %15 = "llvm.getelementptr"(%3, %0) {rawConstantIndices = array<i32: -2147483648, 2>} : (!llvm.ptr<struct<(struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>, struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>)>>, i64) -> !llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'rmem.llvm.load'(0x460acc0) {
  %17 = "rmem.llvm.load"(%16) : (!llvm.ptr<memref<512x512xf32>>) -> memref<512x512xf32>

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'rmem.llvm.load -> ()' {
    ** Insert  : 'llvm.load'(0x46d2040)
    ** Replace : 'rmem.llvm.load'(0x460acc0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.load'(0x46d2040) {
      %17 = "llvm.load"(%15) : (!llvm.ptr<struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614e20) {
  %19 = "builtin.unrealized_conversion_cast"(%18) {lower_tgt_mat = true} : (memref<512x512xf32>) -> !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614be0) {
  %20 = "builtin.unrealized_conversion_cast"(%9) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<64512x512xf32>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614c70) {
  %21 = "builtin.unrealized_conversion_cast"(%14) : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> memref<64512x512xf32>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'builtin.unrealized_conversion_cast'(0x4614d00) {
  %22 = "builtin.unrealized_conversion_cast"(%18) : (memref<512x512xf32>) -> memref<512x512xf32>

} -> SUCCESS : operation marked legal by the target
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.call'(0x46149f0) {
  "func.call"(%20, %21, %22) {callee = @main_graph__0} : (memref<64512x512xf32>, memref<64512x512xf32>, memref<512x512xf32>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.call -> ()' {
    ** Insert  : 'llvm.extractvalue'(0x46d2970)
    ** Insert  : 'llvm.extractvalue'(0x46d2a00)
    ** Insert  : 'llvm.extractvalue'(0x46d2a90)
    ** Insert  : 'llvm.extractvalue'(0x46d2b20)
    ** Insert  : 'llvm.extractvalue'(0x46d2bb0)
    ** Insert  : 'llvm.extractvalue'(0x46d2c40)
    ** Insert  : 'llvm.extractvalue'(0x46d2cd0)
    ** Insert  : 'llvm.extractvalue'(0x46d2e00)
    ** Insert  : 'llvm.extractvalue'(0x46d2e90)
    ** Insert  : 'llvm.extractvalue'(0x46d2f20)
    ** Insert  : 'llvm.extractvalue'(0x46d2fb0)
    ** Insert  : 'llvm.extractvalue'(0x46d3040)
    ** Insert  : 'llvm.extractvalue'(0x46d30d0)
    ** Insert  : 'llvm.extractvalue'(0x46d3160)
    ** Insert  : 'llvm.extractvalue'(0x46d3330)
    ** Insert  : 'llvm.extractvalue'(0x46d33c0)
    ** Insert  : 'llvm.extractvalue'(0x46d3450)
    ** Insert  : 'llvm.extractvalue'(0x46d34e0)
    ** Insert  : 'llvm.extractvalue'(0x46cf190)
    ** Insert  : 'llvm.extractvalue'(0x46cf220)
    ** Insert  : 'llvm.extractvalue'(0x46cf2b0)
    ** Insert  : 'llvm.call'(0x46cf3e0)
    ** Replace : 'func.call'(0x46149f0)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2970) {
      %26 = "llvm.extractvalue"(%21) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2a00) {
      %27 = "llvm.extractvalue"(%21) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2a90) {
      %28 = "llvm.extractvalue"(%21) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2b20) {
      %29 = "llvm.extractvalue"(%21) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2bb0) {
      %30 = "llvm.extractvalue"(%21) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2c40) {
      %31 = "llvm.extractvalue"(%21) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2cd0) {
      %32 = "llvm.extractvalue"(%21) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2e00) {
      %33 = "llvm.extractvalue"(%23) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2e90) {
      %34 = "llvm.extractvalue"(%23) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2f20) {
      %35 = "llvm.extractvalue"(%23) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d2fb0) {
      %36 = "llvm.extractvalue"(%23) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d3040) {
      %37 = "llvm.extractvalue"(%23) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d30d0) {
      %38 = "llvm.extractvalue"(%23) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d3160) {
      %39 = "llvm.extractvalue"(%23) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d3330) {
      %40 = "llvm.extractvalue"(%25) {position = array<i64: 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d33c0) {
      %41 = "llvm.extractvalue"(%25) {position = array<i64: 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> !llvm.ptr<f32>

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d3450) {
      %42 = "llvm.extractvalue"(%25) {position = array<i64: 2>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46d34e0) {
      %43 = "llvm.extractvalue"(%25) {position = array<i64: 3, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46cf190) {
      %44 = "llvm.extractvalue"(%25) {position = array<i64: 3, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46cf220) {
      %45 = "llvm.extractvalue"(%25) {position = array<i64: 4, 0>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.extractvalue'(0x46cf2b0) {
      %46 = "llvm.extractvalue"(%25) {position = array<i64: 4, 1>} : (!llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>) -> i64

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.call'(0x46cf3e0) {
      "llvm.call"(%26, %27, %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46) {callee = @main_graph__0, fastmathFlags = #llvm.fastmath<none>} : (!llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//

//===-------------------------------------------===//
Legalizing operation : 'func.return'(0x460ae00) {
  "func.return"(%2) : (!llvm.ptr<i8>) -> ()

  * Fold {
  } -> FAILURE : unable to fold

  * Pattern : 'func.return -> ()' {
    ** Insert  : 'llvm.return'(0x463ed90)
    ** Replace : 'func.return'(0x460ae00)

    //===-------------------------------------------===//
    Legalizing operation : 'llvm.return'(0x463ed90) {
      "llvm.return"(%2) : (!llvm.ptr<i8>) -> ()

    } -> SUCCESS : operation marked legal by the target
    //===-------------------------------------------===//
  } -> SUCCESS : pattern applied successfully
} -> SUCCESS
//===-------------------------------------------===//
** Insert  : 'llvm.mlir.undef'(0x46d1df0)
** Insert  : 'llvm.insertvalue'(0x46cf340)
** Insert  : 'llvm.insertvalue'(0x46cf780)
** Insert  : 'llvm.insertvalue'(0x46cf830)
** Insert  : 'llvm.insertvalue'(0x46cf8e0)
** Insert  : 'llvm.insertvalue'(0x46cf990)
** Insert  : 'llvm.insertvalue'(0x46cfa40)
** Insert  : 'llvm.insertvalue'(0x46cfaf0)
** Insert  : 'llvm.mlir.undef'(0x46d3570)
** Insert  : 'llvm.insertvalue'(0x46cfba0)
** Insert  : 'llvm.insertvalue'(0x46cfc50)
** Insert  : 'llvm.insertvalue'(0x46cfd00)
** Insert  : 'llvm.insertvalue'(0x46cfdb0)
** Insert  : 'llvm.insertvalue'(0x46cfe60)
** Insert  : 'llvm.insertvalue'(0x46cff10)
** Insert  : 'llvm.insertvalue'(0x46cffc0)
** Insert  : 'llvm.mlir.undef'(0x46d0070)
** Insert  : 'llvm.insertvalue'(0x46d00d0)
** Insert  : 'llvm.insertvalue'(0x46d0180)
** Insert  : 'llvm.insertvalue'(0x46d0230)
** Insert  : 'llvm.insertvalue'(0x46d02e0)
** Insert  : 'llvm.insertvalue'(0x46d0390)
** Insert  : 'llvm.insertvalue'(0x46d0440)
** Insert  : 'llvm.insertvalue'(0x46d04f0)
** Insert  : 'llvm.mlir.undef'(0x46d3850)
** Insert  : 'llvm.insertvalue'(0x46d38b0)
** Insert  : 'llvm.insertvalue'(0x46d3960)
** Insert  : 'llvm.insertvalue'(0x46d3a10)
** Insert  : 'llvm.insertvalue'(0x46d3ac0)
** Insert  : 'llvm.insertvalue'(0x46d3b70)
** Insert  : 'llvm.insertvalue'(0x46d3c20)
** Insert  : 'llvm.insertvalue'(0x46d3cd0)
** Insert  : 'llvm.mlir.undef'(0x46d3d80)
** Insert  : 'llvm.insertvalue'(0x46d3de0)
** Insert  : 'llvm.insertvalue'(0x46d3e90)
** Insert  : 'llvm.insertvalue'(0x46d3f40)
** Insert  : 'llvm.insertvalue'(0x46d3ff0)
** Insert  : 'llvm.insertvalue'(0x46d40a0)
** Insert  : 'llvm.insertvalue'(0x46d4150)
** Insert  : 'llvm.insertvalue'(0x46d4200)
** Insert  : 'llvm.mlir.undef'(0x46d42b0)
** Insert  : 'llvm.insertvalue'(0x46d4310)
** Insert  : 'llvm.insertvalue'(0x46d43c0)
** Insert  : 'llvm.insertvalue'(0x46d4470)
** Insert  : 'llvm.insertvalue'(0x46d4520)
** Insert  : 'llvm.insertvalue'(0x46d45d0)
** Insert  : 'llvm.insertvalue'(0x46d4680)
** Insert  : 'llvm.insertvalue'(0x46d4730)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46cf6f0)
** Insert  : 'llvm.mlir.undef'(0x46d47e0)
** Insert  : 'llvm.insertvalue'(0x46d4840)
** Insert  : 'llvm.insertvalue'(0x46d48f0)
** Insert  : 'llvm.insertvalue'(0x46d49a0)
** Insert  : 'llvm.insertvalue'(0x46d4a50)
** Insert  : 'llvm.insertvalue'(0x46d4b00)
** Insert  : 'llvm.insertvalue'(0x46d4bb0)
** Insert  : 'llvm.insertvalue'(0x46d4c60)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d4d10)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d4da0)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d4e30)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d4ec0)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d4f50)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d4fe0)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d5070)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d5100)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d5190)
** Insert  : 'builtin.unrealized_conversion_cast'(0x46d5220)
