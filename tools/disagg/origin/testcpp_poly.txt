clang version 16.0.0 (https://github.com/llvm/llvm-project.git cbc378ecb87e3f31dd5aff91f2a621d500640412)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /users/Zijian/Disagg-mlir/build/bin
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/9
Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/9
Candidate multilib: .;@m64
Selected multilib: .;@m64
ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/9/../../../../x86_64-linux-gnu/include"
ignoring duplicate directory "/users/Zijian/Disagg-mlir/build/lib/clang/16.0.0/include"
ignoring duplicate directory "/usr/local/include"
#include "..." search starts here:
#include <...> search starts here:
 /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9
 /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/x86_64-linux-gnu/c++/9
 /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/backward
 /users/Zijian/Disagg-mlir/build/lib/clang/16.0.0/include
 /usr/local/include
 /usr/include/x86_64-linux-gnu
 /usr/include
End of search list.
Emitting fn: main
main
CompoundStmt 0x8152b50
|-DeclStmt 0x81523f8
| `-VarDecl 0x8127390  used a 'vector<int>':'class std::vector<int>' callinit destroyed
|   `-CXXConstructExpr 0x81523d0 'vector<int>':'class std::vector<int>' 'void (void) noexcept'
|-CXXMemberCallExpr 0x8152480 'void'
| |-MemberExpr 0x8152430 '<bound member function type>' .reserve 0x8143e90
| | `-DeclRefExpr 0x8152410 'vector<int>':'class std::vector<int>' lvalue Var 0x8127390 'a' 'vector<int>':'class std::vector<int>'
| `-ImplicitCastExpr 0x81524a8 'size_type':'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x8152460 'int' 16
|-DeclStmt 0x8152560
| `-VarDecl 0x81524d8  used e 'int' cinit
|   `-IntegerLiteral 0x8152540 'int' 1
|-CXXMemberCallExpr 0x8152648 'void'
| |-MemberExpr 0x8152618 '<bound member function type>' .push_back 0x8145528
| | `-DeclRefExpr 0x8152578 'vector<int>':'class std::vector<int>' lvalue Var 0x8127390 'a' 'vector<int>':'class std::vector<int>'
| `-ImplicitCastExpr 0x8152670 'const value_type':'const int' lvalue <NoOp>
|   `-DeclRefExpr 0x81525f8 'int' lvalue Var 0x81524d8 'e' 'int'
|-ForStmt 0x8152ae8
| |-DeclStmt 0x8152728
| | `-VarDecl 0x81526a0  used i 'int' cinit
| |   `-IntegerLiteral 0x8152708 'int' 0
| |-<<<NULL>>>
| |-BinaryOperator 0x8152840 '_Bool' '<'
| | |-ImplicitCastExpr 0x8152828 'size_type':'unsigned long' <IntegralCast>
| | | `-ImplicitCastExpr 0x8152810 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x8152740 'int' lvalue Var 0x81526a0 'i' 'int'
| | `-CXXMemberCallExpr 0x81527b0 'size_type':'unsigned long'
| |   `-MemberExpr 0x8152780 '<bound member function type>' .size 0x8143728
| |     `-ImplicitCastExpr 0x81527f8 'const class std::vector<int>' lvalue <NoOp>
| |       `-DeclRefExpr 0x8152760 'vector<int>':'class std::vector<int>' lvalue Var 0x8127390 'a' 'vector<int>':'class std::vector<int>'
| |-UnaryOperator 0x8152880 'int' lvalue prefix '++'
| | `-DeclRefExpr 0x8152860 'int' lvalue Var 0x81526a0 'i' 'int'
| `-CompoundStmt 0x8152ad0
|   `-CallExpr 0x8152a70 'int'
|     |-ImplicitCastExpr 0x8152a58 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x8152a38 'int (const char *__restrict, ...)' lvalue Function 0x8115be8 'printf' 'int (const char *__restrict, ...)'
|     |-ImplicitCastExpr 0x8152aa0 'const char *' <ArrayToPointerDecay>
|     | `-StringLiteral 0x81528e0 'const char[4]' lvalue "%d\n"
|     `-ImplicitCastExpr 0x8152ab8 'value_type':'int' <LValueToRValue>
|       `-CXXOperatorCallExpr 0x8152a00 'value_type':'int' lvalue '[]'
|         |-ImplicitCastExpr 0x81529e8 'reference (*)(size_type) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x8152970 'reference (size_type) noexcept' lvalue CXXMethod 0x81440b0 'operator[]' 'reference (size_type) noexcept'
|         |-DeclRefExpr 0x8152900 'vector<int>':'class std::vector<int>' lvalue Var 0x8127390 'a' 'vector<int>':'class std::vector<int>'
|         `-ImplicitCastExpr 0x8152958 'size_type':'unsigned long' <IntegralCast>
|           `-ImplicitCastExpr 0x8152940 'int' <LValueToRValue>
|             `-DeclRefExpr 0x8152920 'int' lvalue Var 0x81526a0 'i' 'int'
`-ReturnStmt 0x8152b40
  `-IntegerLiteral 0x8152b20 'int' 0
Emitting fn: _ZNSt6vectorIiSaIiEEC1Ev
vector
 init: - baseInit:1 memberInit:0 anyMember:0 indirectMember:0 isinClass:0 delegating:0 isPack:0
CXXConstructExpr 0x8152328 '_Vector_base<int, allocator<int> >':'struct std::_Vector_base<int, class std::allocator<int> >' 'void (void) noexcept'
CompoundStmt 0x81523c0
Emitting fn: _ZNSt6vectorIiSaIiEE7reserveEm
reserve
CompoundStmt 0x818ea10
|-IfStmt 0x81642a8
| |-BinaryOperator 0x8164230 '_Bool' '>'
| | |-ImplicitCastExpr 0x8164218 'size_type':'unsigned long' <LValueToRValue>
| | | `-DeclRefExpr 0x8164180 'size_type':'unsigned long' lvalue ParmVar 0x8143e00 '__n' 'size_type':'unsigned long'
| | `-CXXMemberCallExpr 0x81641e0 'size_type':'unsigned long'
| |   `-MemberExpr 0x81641b0 '<bound member function type>' ->max_size 0x81437e0
| |     `-ImplicitCastExpr 0x8164200 'const class std::vector<int> *' <NoOp>
| |       `-CXXThisExpr 0x81641a0 'class std::vector<int> *' this
| `-CallExpr 0x8164268 'void'
|   |-ImplicitCastExpr 0x8164250 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x80d1680 'void (const char *) __attribute__((noreturn))' lvalue Function 0x7cc7180 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'
|   `-ImplicitCastExpr 0x8164290 'const char *' <ArrayToPointerDecay>
|     `-ParenExpr 0x80d1660 'const char[16]' lvalue
|       `-StringLiteral 0x80d1638 'const char[16]' lvalue "vector::reserve"
`-IfStmt 0x818e9f0
  |-BinaryOperator 0x81643e8 '_Bool' '<'
  | |-CXXMemberCallExpr 0x8164378 'size_type':'unsigned long'
  | | `-MemberExpr 0x8164348 '<bound member function type>' ->capacity 0x8143c90
  | |   `-ImplicitCastExpr 0x8164398 'const class std::vector<int> *' <NoOp>
  | |     `-CXXThisExpr 0x8164338 'class std::vector<int> *' this
  | `-ImplicitCastExpr 0x81643d0 'size_type':'unsigned long' <LValueToRValue>
  |   `-DeclRefExpr 0x81643b0 'size_type':'unsigned long' lvalue ParmVar 0x8143e00 '__n' 'size_type':'unsigned long'
  `-CompoundStmt 0x818e9a0
    |-DeclStmt 0x8164540
    | `-VarDecl 0x8164408  used __old_size 'const size_type':'const unsigned long' cinit
    |   `-CXXMemberCallExpr 0x81644b0 'size_type':'unsigned long'
    |     `-MemberExpr 0x8164480 '<bound member function type>' ->size 0x8143728
    |       `-ImplicitCastExpr 0x81644d0 'const class std::vector<int> *' <NoOp>
    |         `-CXXThisExpr 0x8164470 'class std::vector<int> *' implicit this
    |-DeclStmt 0x81645d0
    | `-VarDecl 0x8164568  used __tmp 'pointer':'int *'
    |-IfStmt 0x818e000 has_else
    | |-CallExpr 0x817f5b8 '_Bool'
    | | `-ImplicitCastExpr 0x817f5a0 '_Bool (*)(void)' <FunctionToPointerDecay>
    | |   `-DeclRefExpr 0x81645e8 '_Bool (void)' lvalue CXXMethod 0x813d7a8 '_S_use_relocate' '_Bool (void)'
    | |-CompoundStmt 0x817faa8
    | | |-BinaryOperator 0x817f6d0 'pointer':'int *' lvalue '='
    | | | |-DeclRefExpr 0x817f5d8 'pointer':'int *' lvalue Var 0x8164568 '__tmp' 'pointer':'int *'
    | | | `-CXXMemberCallExpr 0x817f670 'pointer':'int *'
    | | |   |-MemberExpr 0x817f608 '<bound member function type>' ->_M_allocate 0x8139908
    | | |   | `-ImplicitCastExpr 0x817f698 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | | |   |   `-CXXThisExpr 0x817f5f8 'class std::vector<int> *' this
    | | |   `-ImplicitCastExpr 0x817f6b8 'size_type':'unsigned long' <LValueToRValue>
    | | |     `-DeclRefExpr 0x817f650 'size_type':'unsigned long' lvalue ParmVar 0x8143e00 '__n' 'size_type':'unsigned long'
    | | `-CallExpr 0x817fa20 'pointer':'int *'
    | |   |-ImplicitCastExpr 0x817fa08 'pointer (*)(pointer, pointer, pointer, _Tp_alloc_type &) noexcept' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x817f6f0 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept' lvalue CXXMethod 0x813e3b0 '_S_relocate' 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept'
    | |   |-ImplicitCastExpr 0x817fa60 'pointer':'int *' <LValueToRValue>
    | |   | `-MemberExpr 0x817f7a8 'pointer':'int *' lvalue ._M_start 0x8137870
    | |   |   `-ImplicitCastExpr 0x817f788 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    | |   |     `-MemberExpr 0x817f740 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    | |   |       `-ImplicitCastExpr 0x817f720 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |   |         `-CXXThisExpr 0x817f710 'class std::vector<int> *' this
    | |   |-ImplicitCastExpr 0x817fa78 'pointer':'int *' <LValueToRValue>
    | |   | `-MemberExpr 0x817f870 'pointer':'int *' lvalue ._M_finish 0x81378d0
    | |   |   `-ImplicitCastExpr 0x817f850 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    | |   |     `-MemberExpr 0x817f808 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    | |   |       `-ImplicitCastExpr 0x817f7e8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |   |         `-CXXThisExpr 0x817f7d8 'class std::vector<int> *' this
    | |   |-ImplicitCastExpr 0x817fa90 'pointer':'int *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x817f8a0 'pointer':'int *' lvalue Var 0x8164568 '__tmp' 'pointer':'int *'
    | |   `-CXXMemberCallExpr 0x817f998 '_Tp_alloc_type':'class std::allocator<int>' lvalue
    | |     `-MemberExpr 0x817f950 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
    | |       `-ImplicitCastExpr 0x817f9b8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |         `-CXXThisExpr 0x817f940 'class std::vector<int> *' implicit this
    | `-CompoundStmt 0x818dfe0
    |   |-ExprWithCleanups 0x818db20 'pointer':'int *' lvalue
    |   | `-BinaryOperator 0x818db00 'pointer':'int *' lvalue '='
    |   |   |-DeclRefExpr 0x817fac8 'pointer':'int *' lvalue Var 0x8164568 '__tmp' 'pointer':'int *'
    |   |   `-CXXMemberCallExpr 0x818d0c8 'pointer':'int *'
    |   |     |-MemberExpr 0x818d080 '<bound member function type>' ->_M_allocate_and_copy 0x818cf58
    |   |     | `-CXXThisExpr 0x818d070 'class std::vector<int> *' implicit this
    |   |     |-ImplicitCastExpr 0x818d100 'size_type':'unsigned long' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x817fb60 'size_type':'unsigned long' lvalue ParmVar 0x8143e00 '__n' 'size_type':'unsigned long'
    |   |     |-CXXConstructExpr 0x818da48 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
    |   |     | `-MaterializeTemporaryExpr 0x818d7d8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
    |   |     |   `-CallExpr 0x8188310 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    |   |     |     |-ImplicitCastExpr 0x81882f8 'class std::move_iterator<int *> (*)(int *)' <FunctionToPointerDecay>
    |   |     |     | `-DeclRefExpr 0x8188268 'class std::move_iterator<int *> (int *)' lvalue Function 0x8188148 '__make_move_if_noexcept_iterator' 'class std::move_iterator<int *> (int *)' (FunctionTemplate 0x7ce02a0 '__make_move_if_noexcept_iterator')
    |   |     |     `-ImplicitCastExpr 0x818c290 'pointer':'int *' <LValueToRValue>
    |   |     |       `-MemberExpr 0x817fc68 'pointer':'int *' lvalue ._M_start 0x8137870
    |   |     |         `-ImplicitCastExpr 0x817fc48 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    |   |     |           `-MemberExpr 0x817fc00 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    |   |     |             `-ImplicitCastExpr 0x817fbe0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    |   |     |               `-CXXThisExpr 0x817fbd0 'class std::vector<int> *' this
    |   |     `-CXXConstructExpr 0x818dad0 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
    |   |       `-MaterializeTemporaryExpr 0x818dab8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
    |   |         `-CallExpr 0x818cca0 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    |   |           |-ImplicitCastExpr 0x818cc88 'class std::move_iterator<int *> (*)(int *)' <FunctionToPointerDecay>
    |   |           | `-DeclRefExpr 0x818cc50 'class std::move_iterator<int *> (int *)' lvalue Function 0x8188148 '__make_move_if_noexcept_iterator' 'class std::move_iterator<int *> (int *)' (FunctionTemplate 0x7ce02a0 '__make_move_if_noexcept_iterator')
    |   |           `-ImplicitCastExpr 0x818ccc8 'pointer':'int *' <LValueToRValue>
    |   |             `-MemberExpr 0x818c478 'pointer':'int *' lvalue ._M_finish 0x81378d0
    |   |               `-ImplicitCastExpr 0x818c458 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    |   |                 `-MemberExpr 0x818c410 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    |   |                   `-ImplicitCastExpr 0x818c3f0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    |   |                     `-CXXThisExpr 0x818c3e0 'class std::vector<int> *' this
    |   `-CallExpr 0x818df78 'void'
    |     |-ImplicitCastExpr 0x818df60 'void (*)(int *, int *, allocator<int> &)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x818df28 'void (int *, int *, allocator<int> &)' lvalue Function 0x8157ba8 '_Destroy' 'void (int *, int *, allocator<int> &)' (FunctionTemplate 0x7fcd9b0 '_Destroy')
    |     |-ImplicitCastExpr 0x818dfb0 'pointer':'int *' <LValueToRValue>
    |     | `-MemberExpr 0x818dc50 'pointer':'int *' lvalue ._M_start 0x8137870
    |     |   `-ImplicitCastExpr 0x818dc10 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    |     |     `-MemberExpr 0x818dbc8 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    |     |       `-ImplicitCastExpr 0x818dba8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    |     |         `-CXXThisExpr 0x818db98 'class std::vector<int> *' this
    |     |-ImplicitCastExpr 0x818dfc8 'pointer':'int *' <LValueToRValue>
    |     | `-MemberExpr 0x818dd18 'pointer':'int *' lvalue ._M_finish 0x81378d0
    |     |   `-ImplicitCastExpr 0x818dcf8 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    |     |     `-MemberExpr 0x818dcb0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    |     |       `-ImplicitCastExpr 0x818dc90 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    |     |         `-CXXThisExpr 0x818dc80 'class std::vector<int> *' this
    |     `-CXXMemberCallExpr 0x818de20 '_Tp_alloc_type':'class std::allocator<int>' lvalue
    |       `-MemberExpr 0x818ddd8 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
    |         `-ImplicitCastExpr 0x818de40 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    |           `-CXXThisExpr 0x818ddc8 'class std::vector<int> *' implicit this
    |-NullStmt 0x80d6868
    |-CXXMemberCallExpr 0x818e3a8 'void'
    | |-MemberExpr 0x818e060 '<bound member function type>' ->_M_deallocate 0x8139b18
    | | `-ImplicitCastExpr 0x818e3d8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |   `-CXXThisExpr 0x818e050 'class std::vector<int> *' implicit this
    | |-ImplicitCastExpr 0x818e3f8 'pointer':'int *' <LValueToRValue>
    | | `-MemberExpr 0x818e140 'pointer':'int *' lvalue ._M_start 0x8137870
    | |   `-ImplicitCastExpr 0x818e120 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    | |     `-MemberExpr 0x818e0d8 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    | |       `-ImplicitCastExpr 0x818e0b8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |         `-CXXThisExpr 0x818e0a8 'class std::vector<int> *' this
    | `-ImplicitCastExpr 0x818e410 'size_t':'unsigned long' <IntegralCast>
    |   `-BinaryOperator 0x818e388 'long' '-'
    |     |-ImplicitCastExpr 0x818e358 'pointer':'int *' <LValueToRValue>
    |     | `-MemberExpr 0x818e260 'pointer':'int *' lvalue ._M_end_of_storage 0x8137930
    |     |   `-ImplicitCastExpr 0x818e240 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    |     |     `-MemberExpr 0x818e1f8 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    |     |       `-ImplicitCastExpr 0x818e1d8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    |     |         `-CXXThisExpr 0x818e1c8 'class std::vector<int> *' this
    |     `-ImplicitCastExpr 0x818e370 'pointer':'int *' <LValueToRValue>
    |       `-MemberExpr 0x818e328 'pointer':'int *' lvalue ._M_start 0x8137870
    |         `-ImplicitCastExpr 0x818e308 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    |           `-MemberExpr 0x818e2c0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    |             `-ImplicitCastExpr 0x818e2a0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    |               `-CXXThisExpr 0x818e290 'class std::vector<int> *' this
    |-BinaryOperator 0x818e528 'pointer':'int *' lvalue '='
    | |-MemberExpr 0x818e4c0 'pointer':'int *' lvalue ._M_start 0x8137870
    | | `-ImplicitCastExpr 0x818e4a0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    | |   `-MemberExpr 0x818e458 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    | |     `-ImplicitCastExpr 0x818e438 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |       `-CXXThisExpr 0x818e428 'class std::vector<int> *' this
    | `-ImplicitCastExpr 0x818e510 'pointer':'int *' <LValueToRValue>
    |   `-DeclRefExpr 0x818e4f0 'pointer':'int *' lvalue Var 0x8164568 '__tmp' 'pointer':'int *'
    |-BinaryOperator 0x818e700 'pointer':'int *' lvalue '='
    | |-MemberExpr 0x818e5e0 'pointer':'int *' lvalue ._M_finish 0x81378d0
    | | `-ImplicitCastExpr 0x818e5c0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
    | |   `-MemberExpr 0x818e578 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    | |     `-ImplicitCastExpr 0x818e558 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |       `-CXXThisExpr 0x818e548 'class std::vector<int> *' this
    | `-BinaryOperator 0x818e6e0 'pointer':'int *' '+'
    |   |-ImplicitCastExpr 0x818e6b0 'pointer':'int *' <LValueToRValue>
    |   | `-DeclRefExpr 0x818e670 'pointer':'int *' lvalue Var 0x8164568 '__tmp' 'pointer':'int *'
    |   `-ImplicitCastExpr 0x818e6c8 'size_type':'unsigned long' <LValueToRValue>
    |     `-DeclRefExpr 0x818e690 'const size_type':'const unsigned long' lvalue Var 0x8164408 '__old_size' 'const size_type':'const unsigned long'
    `-BinaryOperator 0x818e980 'pointer':'int *' lvalue '='
      |-MemberExpr 0x818e7b8 'pointer':'int *' lvalue ._M_end_of_storage 0x8137930
      | `-ImplicitCastExpr 0x818e798 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
      |   `-MemberExpr 0x818e750 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
      |     `-ImplicitCastExpr 0x818e730 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
      |       `-CXXThisExpr 0x818e720 'class std::vector<int> *' this
      `-BinaryOperator 0x818e960 'pointer':'int *' '+'
        |-ImplicitCastExpr 0x818e930 'pointer':'int *' <LValueToRValue>
        | `-MemberExpr 0x818e8e0 'pointer':'int *' lvalue ._M_start 0x8137870
        |   `-ImplicitCastExpr 0x818e8c0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
        |     `-MemberExpr 0x818e878 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
        |       `-ImplicitCastExpr 0x818e858 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
        |         `-CXXThisExpr 0x818e848 'class std::vector<int> *' this
        `-ImplicitCastExpr 0x818e948 'size_type':'unsigned long' <LValueToRValue>
          `-DeclRefExpr 0x818e910 'size_type':'unsigned long' lvalue ParmVar 0x8143e00 '__n' 'size_type':'unsigned long'
BinaryOperator 0x818db00 'pointer':'int *' lvalue '='
|-DeclRefExpr 0x817fac8 'pointer':'int *' lvalue Var 0x8164568 '__tmp' 'pointer':'int *'
`-CXXMemberCallExpr 0x818d0c8 'pointer':'int *'
  |-MemberExpr 0x818d080 '<bound member function type>' ->_M_allocate_and_copy 0x818cf58
  | `-CXXThisExpr 0x818d070 'class std::vector<int> *' implicit this
  |-ImplicitCastExpr 0x818d100 'size_type':'unsigned long' <LValueToRValue>
  | `-DeclRefExpr 0x817fb60 'size_type':'unsigned long' lvalue ParmVar 0x8143e00 '__n' 'size_type':'unsigned long'
  |-CXXConstructExpr 0x818da48 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
  | `-MaterializeTemporaryExpr 0x818d7d8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
  |   `-CallExpr 0x8188310 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
  |     |-ImplicitCastExpr 0x81882f8 'class std::move_iterator<int *> (*)(int *)' <FunctionToPointerDecay>
  |     | `-DeclRefExpr 0x8188268 'class std::move_iterator<int *> (int *)' lvalue Function 0x8188148 '__make_move_if_noexcept_iterator' 'class std::move_iterator<int *> (int *)' (FunctionTemplate 0x7ce02a0 '__make_move_if_noexcept_iterator')
  |     `-ImplicitCastExpr 0x818c290 'pointer':'int *' <LValueToRValue>
  |       `-MemberExpr 0x817fc68 'pointer':'int *' lvalue ._M_start 0x8137870
  |         `-ImplicitCastExpr 0x817fc48 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
  |           `-MemberExpr 0x817fc00 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
  |             `-ImplicitCastExpr 0x817fbe0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
  |               `-CXXThisExpr 0x817fbd0 'class std::vector<int> *' this
  `-CXXConstructExpr 0x818dad0 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
    `-MaterializeTemporaryExpr 0x818dab8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
      `-CallExpr 0x818cca0 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
        |-ImplicitCastExpr 0x818cc88 'class std::move_iterator<int *> (*)(int *)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x818cc50 'class std::move_iterator<int *> (int *)' lvalue Function 0x8188148 '__make_move_if_noexcept_iterator' 'class std::move_iterator<int *> (int *)' (FunctionTemplate 0x7ce02a0 '__make_move_if_noexcept_iterator')
        `-ImplicitCastExpr 0x818ccc8 'pointer':'int *' <LValueToRValue>
          `-MemberExpr 0x818c478 'pointer':'int *' lvalue ._M_finish 0x81378d0
            `-ImplicitCastExpr 0x818c458 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
              `-MemberExpr 0x818c410 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
                `-ImplicitCastExpr 0x818c3f0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
                  `-CXXThisExpr 0x818c3e0 'class std::vector<int> *' this
cleanup not handled
Emitting fn: _ZNSt6vectorIiSaIiEE9push_backERKi
push_back
CompoundStmt 0x81add10
`-IfStmt 0x81adce0 has_else
  |-BinaryOperator 0x81a4a68 '_Bool' '!='
  | |-ImplicitCastExpr 0x81a4a38 'pointer':'int *' <LValueToRValue>
  | | `-MemberExpr 0x81a4940 'pointer':'int *' lvalue ._M_finish 0x81378d0
  | |   `-ImplicitCastExpr 0x81a4920 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
  | |     `-MemberExpr 0x81a48d8 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
  | |       `-ImplicitCastExpr 0x81a48b8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
  | |         `-CXXThisExpr 0x81a48a8 'class std::vector<int> *' this
  | `-ImplicitCastExpr 0x81a4a50 'pointer':'int *' <LValueToRValue>
  |   `-MemberExpr 0x81a4a08 'pointer':'int *' lvalue ._M_end_of_storage 0x8137930
  |     `-ImplicitCastExpr 0x81a49e8 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
  |       `-MemberExpr 0x81a49a0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
  |         `-ImplicitCastExpr 0x81a4980 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
  |           `-CXXThisExpr 0x81a4970 'class std::vector<int> *' this
  |-CompoundStmt 0x81a9ae0
  | |-NullStmt 0x8040e68
  | |-CallExpr 0x81a9990 'void'
  | | |-ImplicitCastExpr 0x81a9978 'void (*)(allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' <FunctionToPointerDecay>
  | | | `-DeclRefExpr 0x81a7480 'void (allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' lvalue CXXMethod 0x81a4ff8 'construct' 'void (allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' (UsingShadow 0x81320c8 'construct')
  | | |-ImplicitCastExpr 0x81a99c8 'allocator_type':'class std::allocator<int>' lvalue <DerivedToBase (allocator)>
  | | | `-MemberExpr 0x81a4b58 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
  | | |   `-ImplicitCastExpr 0x81a4b38 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
  | | |     `-CXXThisExpr 0x81a4b28 'class std::vector<int> *' this
  | | |-ImplicitCastExpr 0x81a99e8 'pointer':'int *' <LValueToRValue>
  | | | `-MemberExpr 0x81a4c38 'pointer':'int *' lvalue ._M_finish 0x81378d0
  | | |   `-ImplicitCastExpr 0x81a4c18 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
  | | |     `-MemberExpr 0x81a4bd0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
  | | |       `-ImplicitCastExpr 0x81a4bb0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
  | | |         `-CXXThisExpr 0x81a4ba0 'class std::vector<int> *' this
  | | `-DeclRefExpr 0x81a4c68 'const value_type':'const int' lvalue ParmVar 0x8145430 '__x' 'const value_type &'
  | |-UnaryOperator 0x81a9ac8 'pointer':'int *' lvalue prefix '++'
  | | `-MemberExpr 0x81a9a98 'pointer':'int *' lvalue ._M_finish 0x81378d0
  | |   `-ImplicitCastExpr 0x81a9a78 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
  | |     `-MemberExpr 0x81a9a30 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
  | |       `-ImplicitCastExpr 0x81a9a10 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
  | |         `-CXXThisExpr 0x81a9a00 'class std::vector<int> *' this
  | `-NullStmt 0x8041110
  `-ExprWithCleanups 0x81adcc8 'void'
    `-CXXMemberCallExpr 0x81ac8d0 'void'
      |-MemberExpr 0x81ac888 '<bound member function type>' ->_M_realloc_insert 0x81ac768
      | `-CXXThisExpr 0x81ac878 'class std::vector<int> *' implicit this
      |-CXXConstructExpr 0x81adc98 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > &&) noexcept' elidable
      | `-MaterializeTemporaryExpr 0x81ada20 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' xvalue
      |   `-CXXMemberCallExpr 0x81a9c48 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
      |     `-MemberExpr 0x81a9c18 '<bound member function type>' ->end 0x8142ce0
      |       `-CXXThisExpr 0x81a9c08 'class std::vector<int> *' implicit this
      `-DeclRefExpr 0x81ac4f0 'const value_type':'const int' lvalue ParmVar 0x8145430 '__x' 'const value_type &'
CXXMemberCallExpr 0x81ac8d0 'void'
|-MemberExpr 0x81ac888 '<bound member function type>' ->_M_realloc_insert 0x81ac768
| `-CXXThisExpr 0x81ac878 'class std::vector<int> *' implicit this
|-CXXConstructExpr 0x81adc98 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > &&) noexcept' elidable
| `-MaterializeTemporaryExpr 0x81ada20 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' xvalue
|   `-CXXMemberCallExpr 0x81a9c48 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
|     `-MemberExpr 0x81a9c18 '<bound member function type>' ->end 0x8142ce0
|       `-CXXThisExpr 0x81a9c08 'class std::vector<int> *' implicit this
`-DeclRefExpr 0x81ac4f0 'const value_type':'const int' lvalue ParmVar 0x8145430 '__x' 'const value_type &'
cleanup not handled
Emitting fn: _ZNKSt6vectorIiSaIiEE4sizeEv
size
CompoundStmt 0x81bad80
`-ReturnStmt 0x81bad70
  `-CXXFunctionalCastExpr 0x81bad48 'size_type':'unsigned long' functional cast to size_type <NoOp>
    `-ImplicitCastExpr 0x81bad30 'size_type':'unsigned long' <IntegralCast> part_of_explicit_cast
      `-BinaryOperator 0x81bad10 'long' '-'
        |-ImplicitCastExpr 0x81bace0 'pointer':'int *' <LValueToRValue>
        | `-MemberExpr 0x81babe8 'const pointer':'int *const' lvalue ._M_finish 0x81378d0
        |   `-ImplicitCastExpr 0x81babc8 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
        |     `-MemberExpr 0x81bab80 'const _Vector_impl':'const struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
        |       `-ImplicitCastExpr 0x81bab60 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
        |         `-CXXThisExpr 0x81bab50 'const class std::vector<int> *' this
        `-ImplicitCastExpr 0x81bacf8 'pointer':'int *' <LValueToRValue>
          `-MemberExpr 0x81bacb0 'const pointer':'int *const' lvalue ._M_start 0x8137870
            `-ImplicitCastExpr 0x81bac90 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
              `-MemberExpr 0x81bac48 'const _Vector_impl':'const struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
                `-ImplicitCastExpr 0x81bac28 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
                  `-CXXThisExpr 0x81bac18 'const class std::vector<int> *' this
Emitting fn: _ZNSt6vectorIiSaIiEEixEm
operator[]
CompoundStmt 0x81baf68
|-NullStmt 0x803fa00
`-ReturnStmt 0x81baf58
  `-UnaryOperator 0x81baf40 'int':'int' lvalue prefix '*' cannot overflow
    `-ParenExpr 0x81baf20 'pointer':'int *'
      `-BinaryOperator 0x81baf00 'pointer':'int *' '+'
        |-ImplicitCastExpr 0x81baed0 'pointer':'int *' <LValueToRValue>
        | `-MemberExpr 0x81bae80 'pointer':'int *' lvalue ._M_start 0x8137870
        |   `-ImplicitCastExpr 0x81bae60 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
        |     `-MemberExpr 0x81bae18 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
        |       `-ImplicitCastExpr 0x81badf8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
        |         `-CXXThisExpr 0x81bade8 'class std::vector<int> *' this
        `-ImplicitCastExpr 0x81baee8 'size_type':'unsigned long' <LValueToRValue>
          `-DeclRefExpr 0x81baeb0 'size_type':'unsigned long' lvalue ParmVar 0x8143fb0 '__n' 'size_type':'unsigned long'
Emitting fn: _ZNSt12_Vector_baseIiSaIiEEC1Ev
_Vector_base
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x81397c0 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_vector.h:337:7, col:20> col:20 referenced _M_impl '_Vector_impl':'std::_Vector_base<int, std::allocator<int>>::_Vector_impl'
CXXConstructExpr 0x81522b8 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' 'void (void) noexcept(is_nothrow_default_constructible<_Tp_alloc_type>::value)'
CompoundStmt 0x8152318
Emitting fn: _ZNKSt6vectorIiSaIiEE8max_sizeEv
max_size
CompoundStmt 0x818ec48
`-ReturnStmt 0x818ec38
  `-CallExpr 0x818ec10 'size_type':'unsigned long'
    |-ImplicitCastExpr 0x818ebf8 'size_type (*)(const _Tp_alloc_type &) noexcept' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x818ea30 'size_type (const _Tp_alloc_type &) noexcept' lvalue CXXMethod 0x814f8b0 '_S_max_size' 'size_type (const _Tp_alloc_type &) noexcept'
    `-CXXMemberCallExpr 0x818eb28 'const _Tp_alloc_type':'const class std::allocator<int>' lvalue
      `-MemberExpr 0x818eae0 '<bound member function type>' ->_M_get_Tp_allocator 0x8135898
        `-ImplicitCastExpr 0x818eb78 'const struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
          `-CXXThisExpr 0x818ead0 'const class std::vector<int> *' implicit this
Emitting fn: _ZNKSt6vectorIiSaIiEE8capacityEv
capacity
CompoundStmt 0x818f688
`-ReturnStmt 0x818f678
  `-CXXFunctionalCastExpr 0x818f650 'size_type':'unsigned long' functional cast to size_type <NoOp>
    `-ImplicitCastExpr 0x818f638 'size_type':'unsigned long' <IntegralCast> part_of_explicit_cast
      `-BinaryOperator 0x818f618 'long' '-'
        |-ImplicitCastExpr 0x818f5e8 'pointer':'int *' <LValueToRValue>
        | `-MemberExpr 0x818f4f0 'const pointer':'int *const' lvalue ._M_end_of_storage 0x8137930
        |   `-ImplicitCastExpr 0x818f4d0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
        |     `-MemberExpr 0x818f488 'const _Vector_impl':'const struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
        |       `-ImplicitCastExpr 0x818f468 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
        |         `-CXXThisExpr 0x818f458 'const class std::vector<int> *' this
        `-ImplicitCastExpr 0x818f600 'pointer':'int *' <LValueToRValue>
          `-MemberExpr 0x818f5b8 'const pointer':'int *const' lvalue ._M_start 0x8137870
            `-ImplicitCastExpr 0x818f598 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
              `-MemberExpr 0x818f550 'const _Vector_impl':'const struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
                `-ImplicitCastExpr 0x818f530 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
                  `-CXXThisExpr 0x818f520 'const class std::vector<int> *' this
Emitting fn: _ZNSt6vectorIiSaIiEE15_S_use_relocateEv
_S_use_relocate
CompoundStmt 0x817f588
`-ReturnStmt 0x817f578
  `-ExprWithCleanups 0x817f560 '_Bool'
    `-CallExpr 0x817f470 '_Bool'
      |-ImplicitCastExpr 0x817f458 '_Bool (*)(true_type)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x816fd58 '_Bool (true_type)' lvalue CXXMethod 0x813d588 '_S_nothrow_relocate' '_Bool (true_type)'
      `-CXXConstructExpr 0x817f530 'true_type':'struct std::integral_constant<_Bool, true>' 'void (struct std::integral_constant<_Bool, true> &&) noexcept'
        `-ImplicitCastExpr 0x817f4b0 'struct std::integral_constant<_Bool, true>' xvalue <DerivedToBase (is_move_constructible -> __is_move_constructible_impl -> is_constructible -> integral_constant)>
          `-MaterializeTemporaryExpr 0x817f498 '__is_move_insertable<_Tp_alloc_type>':'struct std::__is_move_insertable<class std::allocator<int> >' xvalue
            `-CXXTemporaryObjectExpr 0x816f778 '__is_move_insertable<_Tp_alloc_type>':'struct std::__is_move_insertable<class std::allocator<int> >' 'void (void) noexcept' list zeroing
cleanup of materialized not handledCallExpr 0x817f470 '_Bool'
|-ImplicitCastExpr 0x817f458 '_Bool (*)(true_type)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x816fd58 '_Bool (true_type)' lvalue CXXMethod 0x813d588 '_S_nothrow_relocate' '_Bool (true_type)'
`-CXXConstructExpr 0x817f530 'true_type':'struct std::integral_constant<_Bool, true>' 'void (struct std::integral_constant<_Bool, true> &&) noexcept'
  `-ImplicitCastExpr 0x817f4b0 'struct std::integral_constant<_Bool, true>' xvalue <DerivedToBase (is_move_constructible -> __is_move_constructible_impl -> is_constructible -> integral_constant)>
    `-MaterializeTemporaryExpr 0x817f498 '__is_move_insertable<_Tp_alloc_type>':'struct std::__is_move_insertable<class std::allocator<int> >' xvalue
      `-CXXTemporaryObjectExpr 0x816f778 '__is_move_insertable<_Tp_alloc_type>':'struct std::__is_move_insertable<class std::allocator<int> >' 'void (void) noexcept' list zeroing
cleanup not handled
Emitting fn: _ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm
_M_allocate
CompoundStmt 0x818fb30
|-DeclStmt 0x818f7e8
| `-TypedefDecl 0x818f790  referenced _Tr '__gnu_cxx::__alloc_traits<_Tp_alloc_type>':'struct __gnu_cxx::__alloc_traits<class std::allocator<int>, int>'
|   `-ElaboratedType 0x818f730 '__gnu_cxx::__alloc_traits<_Tp_alloc_type>' sugar
|     `-TemplateSpecializationType 0x818f6f0 '__alloc_traits<_Tp_alloc_type>' sugar __alloc_traits
|       |-TemplateArgument type '_Tp_alloc_type':'class std::allocator<int>'
|       | `-ElaboratedType 0x81352a0 '_Tp_alloc_type' sugar
|       |   `-TypedefType 0x8135270 'std::_Vector_base<int, class std::allocator<int> >::_Tp_alloc_type' sugar
|       |     |-Typedef 0x8135210 '_Tp_alloc_type'
|       |     `-ElaboratedType 0x81351c0 'typename __gnu_cxx::__alloc_traits<class allocator<int> >::rebind<int>::other' sugar
|       |       `-TypedefType 0x8135190 '__gnu_cxx::__alloc_traits<class std::allocator<int>, int>::rebind<int>::other' sugar
|       |         |-Typedef 0x8135120 'other'
|       |         `-ElaboratedType 0x81350c0 'typename _Base_type::rebind_alloc<int>' sugar
|       |           `-TemplateSpecializationType 0x8135070 'rebind_alloc<int>' sugar alias rebind_alloc
|       |             |-TemplateArgument type 'int':'int'
|       |             | `-SubstTemplateTypeParmType 0x8134ef0 'int' sugar typename depth 0 index 0 _Tp
|       |             |   |-ClassTemplateSpecialization 0x8134c38 'rebind'
|       |             |   `-BuiltinType 0x7c36430 'int'
|       |             `-ElaboratedType 0x8135020 'allocator<int>' sugar
|       |               `-TemplateSpecializationType 0x8134fe0 'allocator<int>' sugar allocator
|       |                 |-TemplateArgument type 'int':'int'
|       |                 | `-SubstTemplateTypeParmType 0x8134fa0 'int' sugar typename depth 0 index 0 _Up
|       |                 |   |-TypeAliasTemplate 0x812faf0 'rebind_alloc'
|       |                 |   `-BuiltinType 0x7c36430 'int'
|       |                 `-RecordType 0x8127100 'class std::allocator<int>'
|       |                   `-ClassTemplateSpecialization 0x8127018 'allocator'
|       `-RecordType 0x812ee80 'struct __gnu_cxx::__alloc_traits<class std::allocator<int>, int>'
|         `-ClassTemplateSpecialization 0x812ed60 '__alloc_traits'
`-ReturnStmt 0x818fb20
  `-ConditionalOperator 0x818faf0 'pointer':'int *'
    |-BinaryOperator 0x818f850 '_Bool' '!='
    | |-ImplicitCastExpr 0x818f820 'size_t':'unsigned long' <LValueToRValue>
    | | `-DeclRefExpr 0x818f800 'size_t':'unsigned long' lvalue ParmVar 0x8139810 '__n' 'size_t':'unsigned long'
    | `-ImplicitCastExpr 0x818f838 'size_t':'unsigned long' <IntegralCast>
    |   `-IntegerLiteral 0x800aed0 'int' 0
    |-CallExpr 0x818fa60 'pointer':'int *'
    | |-ImplicitCastExpr 0x818fa48 'pointer (*)(allocator_type &, size_type)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x818f9b0 'pointer (allocator_type &, size_type)' lvalue CXXMethod 0x8130068 'allocate' 'pointer (allocator_type &, size_type)' (UsingShadow 0x8131eb8 'allocate')
    | |-ImplicitCastExpr 0x818fa90 'allocator_type':'class std::allocator<int>' lvalue <DerivedToBase (allocator)>
    | | `-MemberExpr 0x818f960 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    | |   `-CXXThisExpr 0x818f950 'struct std::_Vector_base<int, class std::allocator<int> > *' implicit this
    | `-ImplicitCastExpr 0x818fab0 'size_t':'unsigned long' <LValueToRValue>
    |   `-DeclRefExpr 0x818f990 'size_t':'unsigned long' lvalue ParmVar 0x8139810 '__n' 'size_t':'unsigned long'
    `-CXXScalarValueInitExpr 0x818fad8 'pointer':'int *'
Emitting fn: _ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_
_S_relocate
CompoundStmt 0x81905f0
|-DeclStmt 0x8190250
| `-TypeAliasDecl 0x81901f0  referenced __do_it '__bool_constant<_S_use_relocate()>':'struct std::integral_constant<_Bool, true>'
|   `-ElaboratedType 0x81901a0 '__bool_constant<_S_use_relocate()>' sugar
|     `-TemplateSpecializationType 0x8190150 '__bool_constant<_S_use_relocate()>' sugar alias __bool_constant
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x818ffc0 '_Bool'
|       |   |-value: Int 1
|       |   `-CallExpr 0x818ffa0 '_Bool'
|       |     `-ImplicitCastExpr 0x818ff88 '_Bool (*)(void)' <FunctionToPointerDecay>
|       |       `-DeclRefExpr 0x818ff68 '_Bool (void)' lvalue CXXMethod 0x813d7a8 '_S_use_relocate' '_Bool (void)'
|       `-ElaboratedType 0x81900f0 'integral_constant<_Bool, true>' sugar
|         `-TemplateSpecializationType 0x8190090 'integral_constant<_Bool, true>' sugar integral_constant
|           |-TemplateArgument type '_Bool'
|           | `-BuiltinType 0x7c363b0 '_Bool'
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x8190070 '_Bool'
|           |   |-value: Int 1
|           |   `-SubstNonTypeTemplateParmExpr 0x8190028 '_Bool'
|           |     |-NonTypeTemplateParmDecl 0x7d24358  referenced '_Bool' depth 0 index 0 __v
|           |     `-CXXBoolLiteralExpr 0x8190018 '_Bool' true
|           `-RecordType 0x7d23f40 'struct std::integral_constant<_Bool, true>'
|             `-ClassTemplateSpecialization 0x7d23e48 'integral_constant'
`-ReturnStmt 0x81905e0
  `-ExprWithCleanups 0x81905c8 'pointer':'int *'
    `-CallExpr 0x81904f0 'pointer':'int *'
      |-ImplicitCastExpr 0x81904d8 'pointer (*)(pointer, pointer, pointer, _Tp_alloc_type &, true_type) noexcept' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x8190458 'pointer (pointer, pointer, pointer, _Tp_alloc_type &, true_type) noexcept' lvalue CXXMethod 0x813dbd0 '_S_do_relocate' 'pointer (pointer, pointer, pointer, _Tp_alloc_type &, true_type) noexcept'
      |-ImplicitCastExpr 0x8190538 'pointer':'int *' <LValueToRValue>
      | `-DeclRefExpr 0x81902b8 'pointer':'int *' lvalue ParmVar 0x813e0f0 '__first' 'pointer':'int *'
      |-ImplicitCastExpr 0x8190550 'pointer':'int *' <LValueToRValue>
      | `-DeclRefExpr 0x81902d8 'pointer':'int *' lvalue ParmVar 0x813e168 '__last' 'pointer':'int *'
      |-ImplicitCastExpr 0x8190568 'pointer':'int *' <LValueToRValue>
      | `-DeclRefExpr 0x81902f8 'pointer':'int *' lvalue ParmVar 0x813e1e0 '__result' 'pointer':'int *'
      |-DeclRefExpr 0x8190318 '_Tp_alloc_type':'class std::allocator<int>' lvalue ParmVar 0x813e260 '__alloc' '_Tp_alloc_type &'
      `-CXXConstructExpr 0x8190598 'true_type':'struct std::integral_constant<_Bool, true>' 'void (struct std::integral_constant<_Bool, true> &&) noexcept' elidable
        `-MaterializeTemporaryExpr 0x8190580 '__do_it':'struct std::integral_constant<_Bool, true>' xvalue
          `-CXXFunctionalCastExpr 0x8190430 '__do_it':'struct std::integral_constant<_Bool, true>' functional cast to __do_it <NoOp>
            `-InitListExpr 0x81903f0 '__do_it':'struct std::integral_constant<_Bool, true>'
cleanup of materialized not handledCallExpr 0x81904f0 'pointer':'int *'
|-ImplicitCastExpr 0x81904d8 'pointer (*)(pointer, pointer, pointer, _Tp_alloc_type &, true_type) noexcept' <FunctionToPointerDecay>
| `-DeclRefExpr 0x8190458 'pointer (pointer, pointer, pointer, _Tp_alloc_type &, true_type) noexcept' lvalue CXXMethod 0x813dbd0 '_S_do_relocate' 'pointer (pointer, pointer, pointer, _Tp_alloc_type &, true_type) noexcept'
|-ImplicitCastExpr 0x8190538 'pointer':'int *' <LValueToRValue>
| `-DeclRefExpr 0x81902b8 'pointer':'int *' lvalue ParmVar 0x813e0f0 '__first' 'pointer':'int *'
|-ImplicitCastExpr 0x8190550 'pointer':'int *' <LValueToRValue>
| `-DeclRefExpr 0x81902d8 'pointer':'int *' lvalue ParmVar 0x813e168 '__last' 'pointer':'int *'
|-ImplicitCastExpr 0x8190568 'pointer':'int *' <LValueToRValue>
| `-DeclRefExpr 0x81902f8 'pointer':'int *' lvalue ParmVar 0x813e1e0 '__result' 'pointer':'int *'
|-DeclRefExpr 0x8190318 '_Tp_alloc_type':'class std::allocator<int>' lvalue ParmVar 0x813e260 '__alloc' '_Tp_alloc_type &'
`-CXXConstructExpr 0x8190598 'true_type':'struct std::integral_constant<_Bool, true>' 'void (struct std::integral_constant<_Bool, true> &&) noexcept' elidable
  `-MaterializeTemporaryExpr 0x8190580 '__do_it':'struct std::integral_constant<_Bool, true>' xvalue
    `-CXXFunctionalCastExpr 0x8190430 '__do_it':'struct std::integral_constant<_Bool, true>' functional cast to __do_it <NoOp>
      `-InitListExpr 0x81903f0 '__do_it':'struct std::integral_constant<_Bool, true>'
cleanup not handled
Emitting fn: _ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv
_M_get_Tp_allocator
CompoundStmt 0x8157e78
`-ReturnStmt 0x8157e68
  `-ImplicitCastExpr 0x8157e48 '_Tp_alloc_type':'class std::allocator<int>' lvalue <DerivedToBase (allocator)>
    `-MemberExpr 0x8157e18 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
      `-CXXThisExpr 0x8157e08 'struct std::_Vector_base<int, class std::allocator<int> > *' this
Emitting fn: _ZNSt6vectorIiSaIiEE20_M_allocate_and_copyISt13move_iteratorIPiEEES4_mT_S6_
_M_allocate_and_copy
CompoundStmt 0x81946a8
|-DeclStmt 0x8191a70
| `-VarDecl 0x8191930  used __result 'pointer':'int *' cinit
|   `-CXXMemberCallExpr 0x8191a10 'pointer':'int *'
|     |-MemberExpr 0x81919a8 '<bound member function type>' ->_M_allocate 0x8139908
|     | `-ImplicitCastExpr 0x8191a38 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|     |   `-CXXThisExpr 0x8191998 'class std::vector<int> *' this
|     `-ImplicitCastExpr 0x8191a58 'size_type':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x81919f0 'size_type':'unsigned long' lvalue ParmVar 0x818cd18 '__n' 'size_type':'unsigned long'
`-CXXTryStmt 0x8194688
  |-CompoundStmt 0x81944f0
  | |-CallExpr 0x8194220 'int *':'int *'
  | | |-ImplicitCastExpr 0x8194208 'int *(*)(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' <FunctionToPointerDecay>
  | | | `-DeclRefExpr 0x8194178 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' lvalue Function 0x8194028 '__uninitialized_copy_a' 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' (FunctionTemplate 0x7fd8f90 '__uninitialized_copy_a')
  | | |-CXXConstructExpr 0x81943d8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
  | | | `-ImplicitCastExpr 0x81942a0 'const class std::move_iterator<int *>' lvalue <NoOp>
  | | |   `-DeclRefExpr 0x8191ad8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x818cdb8 '__first' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
  | | |-CXXConstructExpr 0x8194460 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
  | | | `-ImplicitCastExpr 0x8194448 'const class std::move_iterator<int *>' lvalue <NoOp>
  | | |   `-DeclRefExpr 0x8191af8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x818ce30 '__last' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
  | | |-ImplicitCastExpr 0x8194490 'pointer':'int *' <LValueToRValue>
  | | | `-DeclRefExpr 0x8191b18 'pointer':'int *' lvalue Var 0x8191930 '__result' 'pointer':'int *'
  | | `-CXXMemberCallExpr 0x8191c10 '_Tp_alloc_type':'class std::allocator<int>' lvalue
  | |   `-MemberExpr 0x8191bc8 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
  | |     `-ImplicitCastExpr 0x8191c30 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
  | |       `-CXXThisExpr 0x8191bb8 'class std::vector<int> *' implicit this
  | `-ReturnStmt 0x81944e0
  |   `-ImplicitCastExpr 0x81944c8 'pointer':'int *' <LValueToRValue>
  |     `-DeclRefExpr 0x81944a8 'pointer':'int *' lvalue Var 0x8191930 '__result' 'pointer':'int *'
  `-CXXCatchStmt 0x8194668
    |-<<<NULL>>>
    `-CompoundStmt 0x8194648
      |-CXXMemberCallExpr 0x81945c8 'void'
      | |-MemberExpr 0x8194540 '<bound member function type>' ->_M_deallocate 0x8139b18
      | | `-ImplicitCastExpr 0x81945f8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
      | |   `-CXXThisExpr 0x8194530 'class std::vector<int> *' implicit this
      | |-ImplicitCastExpr 0x8194618 'pointer':'int *' <LValueToRValue>
      | | `-DeclRefExpr 0x8194588 'pointer':'int *' lvalue Var 0x8191930 '__result' 'pointer':'int *'
      | `-ImplicitCastExpr 0x8194630 'size_type':'unsigned long' <LValueToRValue>
      |   `-DeclRefExpr 0x81945a8 'size_type':'unsigned long' lvalue ParmVar 0x818cd18 '__n' 'size_type':'unsigned long'
      `-CXXThrowExpr 0x80462c8 'void'
warning, not performing catches for try: CXXTryStmt 0x8194688
|-CompoundStmt 0x81944f0
| |-CallExpr 0x8194220 'int *':'int *'
| | |-ImplicitCastExpr 0x8194208 'int *(*)(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' <FunctionToPointerDecay>
| | | `-DeclRefExpr 0x8194178 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' lvalue Function 0x8194028 '__uninitialized_copy_a' 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' (FunctionTemplate 0x7fd8f90 '__uninitialized_copy_a')
| | |-CXXConstructExpr 0x81943d8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
| | | `-ImplicitCastExpr 0x81942a0 'const class std::move_iterator<int *>' lvalue <NoOp>
| | |   `-DeclRefExpr 0x8191ad8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x818cdb8 '__first' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
| | |-CXXConstructExpr 0x8194460 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
| | | `-ImplicitCastExpr 0x8194448 'const class std::move_iterator<int *>' lvalue <NoOp>
| | |   `-DeclRefExpr 0x8191af8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x818ce30 '__last' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
| | |-ImplicitCastExpr 0x8194490 'pointer':'int *' <LValueToRValue>
| | | `-DeclRefExpr 0x8191b18 'pointer':'int *' lvalue Var 0x8191930 '__result' 'pointer':'int *'
| | `-CXXMemberCallExpr 0x8191c10 '_Tp_alloc_type':'class std::allocator<int>' lvalue
| |   `-MemberExpr 0x8191bc8 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
| |     `-ImplicitCastExpr 0x8191c30 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| |       `-CXXThisExpr 0x8191bb8 'class std::vector<int> *' implicit this
| `-ReturnStmt 0x81944e0
|   `-ImplicitCastExpr 0x81944c8 'pointer':'int *' <LValueToRValue>
|     `-DeclRefExpr 0x81944a8 'pointer':'int *' lvalue Var 0x8191930 '__result' 'pointer':'int *'
`-CXXCatchStmt 0x8194668
  |-<<<NULL>>>
  `-CompoundStmt 0x8194648
    |-CXXMemberCallExpr 0x81945c8 'void'
    | |-MemberExpr 0x8194540 '<bound member function type>' ->_M_deallocate 0x8139b18
    | | `-ImplicitCastExpr 0x81945f8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |   `-CXXThisExpr 0x8194530 'class std::vector<int> *' implicit this
    | |-ImplicitCastExpr 0x8194618 'pointer':'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x8194588 'pointer':'int *' lvalue Var 0x8191930 '__result' 'pointer':'int *'
    | `-ImplicitCastExpr 0x8194630 'size_type':'unsigned long' <LValueToRValue>
    |   `-DeclRefExpr 0x81945a8 'size_type':'unsigned long' lvalue ParmVar 0x818cd18 '__n' 'size_type':'unsigned long'
    `-CXXThrowExpr 0x80462c8 'void'
Emitting fn: _ZNSt13move_iteratorIPiEC1EOS1_
move_iterator
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x8188498 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_iterator.h:1031:7, col:17> col:17 referenced _M_current 'int *':'int *'
ImplicitCastExpr 0x818d9f8 'int *':'int *' <LValueToRValue>
`-MemberExpr 0x818d9b0 'int *':'int *' xvalue ._M_current 0x8188498
  `-CXXStaticCastExpr 0x818d980 'class std::move_iterator<int *>' xvalue static_cast<class std::move_iterator<int *> &&> <NoOp>
    `-DeclRefExpr 0x818d950 'class std::move_iterator<int *>' lvalue ParmVar 0x818d438 '' 'class std::move_iterator<int *> &&'
CompoundStmt 0x818da38
Emitting fn: _ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_
__make_move_if_noexcept_iterator
CompoundStmt 0x8191810
`-ReturnStmt 0x8191800
  `-ExprWithCleanups 0x81917e8 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    `-CXXConstructExpr 0x81917b8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
      `-MaterializeTemporaryExpr 0x8191770 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
        `-CXXFunctionalCastExpr 0x8191708 'class std::move_iterator<int *>':'class std::move_iterator<int *>' functional cast to class std::move_iterator<int *> <ConstructorConversion>
          `-CXXConstructExpr 0x81916d8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (iterator_type)'
            `-ImplicitCastExpr 0x8191698 'int *' <LValueToRValue>
              `-DeclRefExpr 0x81915e8 'int *' lvalue ParmVar 0x8188088 '__i' 'int *'
CXXConstructExpr 0x81917b8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
`-MaterializeTemporaryExpr 0x8191770 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
  `-CXXFunctionalCastExpr 0x8191708 'class std::move_iterator<int *>':'class std::move_iterator<int *>' functional cast to class std::move_iterator<int *> <ConstructorConversion>
    `-CXXConstructExpr 0x81916d8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (iterator_type)'
      `-ImplicitCastExpr 0x8191698 'int *' <LValueToRValue>
        `-DeclRefExpr 0x81915e8 'int *' lvalue ParmVar 0x8188088 '__i' 'int *'
cleanup not handled
Emitting fn: _ZSt8_DestroyIPiiEvT_S1_RSaIT0_E
_Destroy
CompoundStmt 0x8158340
`-CallExpr 0x81582e0 'void'
  |-ImplicitCastExpr 0x81582c8 'void (*)(int *, int *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x8158248 'void (int *, int *)' lvalue Function 0x8158138 '_Destroy' 'void (int *, int *)' (FunctionTemplate 0x7fca530 '_Destroy')
  |-ImplicitCastExpr 0x8158310 'int *':'int *' <LValueToRValue>
  | `-DeclRefExpr 0x8157ef0 'int *':'int *' lvalue ParmVar 0x81578d8 '__first' 'int *':'int *'
  `-ImplicitCastExpr 0x8158328 'int *':'int *' <LValueToRValue>
    `-DeclRefExpr 0x8157f10 'int *':'int *' lvalue ParmVar 0x8157950 '__last' 'int *':'int *'
Emitting fn: _ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim
_M_deallocate
CompoundStmt 0x8156e78
|-DeclStmt 0x8156bb8
| `-TypedefDecl 0x8156b60  referenced _Tr '__gnu_cxx::__alloc_traits<_Tp_alloc_type>':'struct __gnu_cxx::__alloc_traits<class std::allocator<int>, int>'
|   `-ElaboratedType 0x8156b00 '__gnu_cxx::__alloc_traits<_Tp_alloc_type>' sugar
|     `-TemplateSpecializationType 0x8153630 '__alloc_traits<_Tp_alloc_type>' sugar __alloc_traits
|       |-TemplateArgument type '_Tp_alloc_type':'class std::allocator<int>'
|       | `-ElaboratedType 0x81352a0 '_Tp_alloc_type' sugar
|       |   `-TypedefType 0x8135270 'std::_Vector_base<int, class std::allocator<int> >::_Tp_alloc_type' sugar
|       |     |-Typedef 0x8135210 '_Tp_alloc_type'
|       |     `-ElaboratedType 0x81351c0 'typename __gnu_cxx::__alloc_traits<class allocator<int> >::rebind<int>::other' sugar
|       |       `-TypedefType 0x8135190 '__gnu_cxx::__alloc_traits<class std::allocator<int>, int>::rebind<int>::other' sugar
|       |         |-Typedef 0x8135120 'other'
|       |         `-ElaboratedType 0x81350c0 'typename _Base_type::rebind_alloc<int>' sugar
|       |           `-TemplateSpecializationType 0x8135070 'rebind_alloc<int>' sugar alias rebind_alloc
|       |             |-TemplateArgument type 'int':'int'
|       |             | `-SubstTemplateTypeParmType 0x8134ef0 'int' sugar typename depth 0 index 0 _Tp
|       |             |   |-ClassTemplateSpecialization 0x8134c38 'rebind'
|       |             |   `-BuiltinType 0x7c36430 'int'
|       |             `-ElaboratedType 0x8135020 'allocator<int>' sugar
|       |               `-TemplateSpecializationType 0x8134fe0 'allocator<int>' sugar allocator
|       |                 |-TemplateArgument type 'int':'int'
|       |                 | `-SubstTemplateTypeParmType 0x8134fa0 'int' sugar typename depth 0 index 0 _Up
|       |                 |   |-TypeAliasTemplate 0x812faf0 'rebind_alloc'
|       |                 |   `-BuiltinType 0x7c36430 'int'
|       |                 `-RecordType 0x8127100 'class std::allocator<int>'
|       |                   `-ClassTemplateSpecialization 0x8127018 'allocator'
|       `-RecordType 0x812ee80 'struct __gnu_cxx::__alloc_traits<class std::allocator<int>, int>'
|         `-ClassTemplateSpecialization 0x812ed60 '__alloc_traits'
`-IfStmt 0x8156e58
  |-ImplicitCastExpr 0x8156c08 '_Bool' <PointerToBoolean>
  | `-ImplicitCastExpr 0x8156bf0 'pointer':'int *' <LValueToRValue>
  |   `-DeclRefExpr 0x8156bd0 'pointer':'int *' lvalue ParmVar 0x81399d8 '__p' 'pointer':'int *'
  `-CallExpr 0x8156dd0 'void'
    |-ImplicitCastExpr 0x8156db8 'void (*)(allocator_type &, pointer, size_type)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x8156ca0 'void (allocator_type &, pointer, size_type)' lvalue CXXMethod 0x8130638 'deallocate' 'void (allocator_type &, pointer, size_type)' (UsingShadow 0x8131ff0 'deallocate')
    |-ImplicitCastExpr 0x8156e08 'allocator_type':'class std::allocator<int>' lvalue <DerivedToBase (allocator)>
    | `-MemberExpr 0x8156ce8 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    |   `-CXXThisExpr 0x8156cd8 'struct std::_Vector_base<int, class std::allocator<int> > *' implicit this
    |-ImplicitCastExpr 0x8156e28 'pointer':'int *' <LValueToRValue>
    | `-DeclRefExpr 0x8156d18 'pointer':'int *' lvalue ParmVar 0x81399d8 '__p' 'pointer':'int *'
    `-ImplicitCastExpr 0x8156e40 'size_t':'unsigned long' <LValueToRValue>
      `-DeclRefExpr 0x8156d38 'size_t':'unsigned long' lvalue ParmVar 0x8139a40 '__n' 'size_t':'unsigned long'
Emitting fn: _ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_
construct
CompoundStmt 0x81af378
`-CXXMemberCallExpr 0x81af310 'void'
  |-MemberExpr 0x81af098 '<bound member function type>' .construct 0x81aef28
  | `-ImplicitCastExpr 0x81af340 'class __gnu_cxx::new_allocator<int>' lvalue <UncheckedDerivedToBase (new_allocator)>
  |   `-DeclRefExpr 0x81add28 'allocator_type':'class std::allocator<int>' lvalue ParmVar 0x81a4d20 '__a' 'allocator_type &'
  |-ImplicitCastExpr 0x81af360 'int *' <LValueToRValue>
  | `-DeclRefExpr 0x81adda0 'int *' lvalue ParmVar 0x81a4df8 '__p' 'int *'
  `-CallExpr 0x81aeba0 'const int' lvalue
    |-ImplicitCastExpr 0x81aeb88 'const int &(*)(typename std::remove_reference<const int &>::type &) noexcept' <BuiltinFnToFnPtr>
    | `-DeclRefExpr 0x81aeac8 '<builtin fn type>' Function 0x81ae6b0 'forward' 'const int &(typename std::remove_reference<const int &>::type &) noexcept' (FunctionTemplate 0x7d9e798 'forward')
    `-DeclRefExpr 0x81ade50 'const int' lvalue ParmVar 0x81a4ec8 '__args' 'const int &'
Emitting fn: _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_
_M_realloc_insert
CompoundStmt 0x81b7f50
|-DeclStmt 0x81b03d8
| `-VarDecl 0x81b0238  used __len 'const size_type':'const unsigned long' cinit
|   `-CXXMemberCallExpr 0x81b0320 'size_type':'unsigned long'
|     |-MemberExpr 0x81b02b0 '<bound member function type>' ->_M_check_len 0x814dd88
|     | `-ImplicitCastExpr 0x81b0350 'const class std::vector<int> *' <NoOp>
|     |   `-CXXThisExpr 0x81b02a0 'class std::vector<int> *' implicit this
|     |-CXXFunctionalCastExpr 0x81b02f8 'size_type':'unsigned long' functional cast to size_type <NoOp>
|     | `-ImplicitCastExpr 0x81b02e0 'size_type':'unsigned long' <IntegralCast> part_of_explicit_cast
|     |   `-IntegerLiteral 0x80e7df0 'int' 1
|     `-ImplicitCastExpr 0x81b0368 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x80e7ec8 'const char[26]' lvalue "vector::_M_realloc_insert"
|-DeclStmt 0x81b0548
| `-VarDecl 0x81b0400  used __old_start 'pointer':'int *' cinit
|   `-ImplicitCastExpr 0x81b0530 'pointer':'int *' <LValueToRValue>
|     `-MemberExpr 0x81b0500 'pointer':'int *' lvalue ._M_start 0x8137870
|       `-ImplicitCastExpr 0x81b04e0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
|         `-MemberExpr 0x81b0498 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
|           `-ImplicitCastExpr 0x81b0478 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|             `-CXXThisExpr 0x81b0468 'class std::vector<int> *' this
|-DeclStmt 0x81b06b8
| `-VarDecl 0x81b0570  used __old_finish 'pointer':'int *' cinit
|   `-ImplicitCastExpr 0x81b06a0 'pointer':'int *' <LValueToRValue>
|     `-MemberExpr 0x81b0670 'pointer':'int *' lvalue ._M_finish 0x81378d0
|       `-ImplicitCastExpr 0x81b0650 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
|         `-MemberExpr 0x81b0608 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
|           `-ImplicitCastExpr 0x81b05e8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|             `-CXXThisExpr 0x81b05d8 'class std::vector<int> *' this
|-DeclStmt 0x81b18d0
| `-VarDecl 0x81b06d0  used __elems_before 'const size_type':'const unsigned long' cinit
|   `-ExprWithCleanups 0x81b1860 'const size_type':'const unsigned long'
|     `-ImplicitCastExpr 0x81b1848 'const size_type':'const unsigned long' <IntegralCast>
|       `-CXXOperatorCallExpr 0x81b1810 'typename __normal_iterator<int *, class vector<int> >::difference_type':'long' '-' adl
|         |-ImplicitCastExpr 0x81b17f8 'typename __normal_iterator<int *, class vector<int> >::difference_type (*)(const __normal_iterator<int *, vector<int, allocator<int> > > &, const __normal_iterator<int *, vector<int, allocator<int> > > &) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x81b1780 'typename __normal_iterator<int *, class vector<int> >::difference_type (const __normal_iterator<int *, vector<int, allocator<int> > > &, const __normal_iterator<int *, vector<int, allocator<int> > > &) noexcept' lvalue Function 0x81b1610 'operator-' 'typename __normal_iterator<int *, class vector<int> >::difference_type (const __normal_iterator<int *, vector<int, allocator<int> > > &, const __normal_iterator<int *, vector<int, allocator<int> > > &) noexcept'
|         |-ImplicitCastExpr 0x81b1738 'const __normal_iterator<int *, vector<int, allocator<int> > >':'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
|         | `-DeclRefExpr 0x81b0790 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
|         `-MaterializeTemporaryExpr 0x81b1768 'const iterator':'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue
|           `-ImplicitCastExpr 0x81b1750 'const iterator':'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' <NoOp>
|             `-CXXMemberCallExpr 0x81b0870 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
|               `-MemberExpr 0x81b0840 '<bound member function type>' ->begin 0x8142ab0
|                 `-CXXThisExpr 0x81b0830 'class std::vector<int> *' implicit this
|-DeclStmt 0x81b1a58
| `-VarDecl 0x81b18f8  used __new_start 'pointer':'int *' callinit
|   `-CXXMemberCallExpr 0x81b19d8 'pointer':'int *'
|     |-MemberExpr 0x81b1970 '<bound member function type>' ->_M_allocate 0x8139908
|     | `-ImplicitCastExpr 0x81b1a00 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|     |   `-CXXThisExpr 0x81b1960 'class std::vector<int> *' this
|     `-ImplicitCastExpr 0x81b1a20 'size_type':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x81b19b8 'const size_type':'const unsigned long' lvalue Var 0x81b0238 '__len' 'const size_type':'const unsigned long'
|-DeclStmt 0x81b1b40
| `-VarDecl 0x81b1a80  used __new_finish 'pointer':'int *' callinit
|   `-ImplicitCastExpr 0x81b1b28 'pointer':'int *' <LValueToRValue>
|     `-DeclRefExpr 0x81b1ae8 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
|-CXXTryStmt 0x81b74a8
| |-CompoundStmt 0x81b4e70
| | |-CallExpr 0x81b2a50 'void'
| | | |-ImplicitCastExpr 0x81b2a38 'void (*)(allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x81b2a00 'void (allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' lvalue CXXMethod 0x81a4ff8 'construct' 'void (allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' (UsingShadow 0x81320c8 'construct')
| | | |-ImplicitCastExpr 0x81b2a88 'allocator_type':'class std::allocator<int>' lvalue <DerivedToBase (allocator)>
| | | | `-MemberExpr 0x81b1c28 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
| | | |   `-ImplicitCastExpr 0x81b1c08 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| | | |     `-CXXThisExpr 0x81b1bf8 'class std::vector<int> *' this
| | | |-BinaryOperator 0x81b1d40 'pointer':'int *' '+'
| | | | |-ImplicitCastExpr 0x81b1d10 'pointer':'int *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x81b1cd0 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
| | | | `-ImplicitCastExpr 0x81b1d28 'size_type':'unsigned long' <LValueToRValue>
| | | |   `-DeclRefExpr 0x81b1cf0 'const size_type':'const unsigned long' lvalue Var 0x81b06d0 '__elems_before' 'const size_type':'const unsigned long'
| | | `-CallExpr 0x81b2288 'const int' lvalue
| | |   |-ImplicitCastExpr 0x81b2270 'const int &(*)(typename std::remove_reference<const int &>::type &) noexcept' <BuiltinFnToFnPtr>
| | |   | `-DeclRefExpr 0x81b2208 '<builtin fn type>' Function 0x81ae6b0 'forward' 'const int &(typename std::remove_reference<const int &>::type &) noexcept' (FunctionTemplate 0x7d9e798 'forward')
| | |   `-DeclRefExpr 0x81b1e18 'const int' lvalue ParmVar 0x81ac658 '__args' 'const int &'
| | |-BinaryOperator 0x81b2af0 'pointer':'int *' lvalue '='
| | | |-DeclRefExpr 0x81b2aa8 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| | | `-CXXScalarValueInitExpr 0x81b2ad8 'pointer':'int *'
| | `-IfStmt 0x81b4e40 has_else
| |   |-CallExpr 0x81b2b48 '_Bool'
| |   | `-ImplicitCastExpr 0x81b2b30 '_Bool (*)(void)' <FunctionToPointerDecay>
| |   |   `-DeclRefExpr 0x81b2b10 '_Bool (void)' lvalue CXXMethod 0x813d7a8 '_S_use_relocate' '_Bool (void)'
| |   |-CompoundStmt 0x81b3160
| |   | |-BinaryOperator 0x81b2e28 'pointer':'int *' lvalue '='
| |   | | |-DeclRefExpr 0x81b2b68 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| |   | | `-CallExpr 0x81b2da0 'pointer':'int *'
| |   | |   |-ImplicitCastExpr 0x81b2d88 'pointer (*)(pointer, pointer, pointer, _Tp_alloc_type &) noexcept' <FunctionToPointerDecay>
| |   | |   | `-DeclRefExpr 0x81b2b88 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept' lvalue CXXMethod 0x813e3b0 '_S_relocate' 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept'
| |   | |   |-ImplicitCastExpr 0x81b2de0 'pointer':'int *' <LValueToRValue>
| |   | |   | `-DeclRefExpr 0x81b2ba8 'pointer':'int *' lvalue Var 0x81b0400 '__old_start' 'pointer':'int *'
| |   | |   |-ImplicitCastExpr 0x81b2df8 'int *':'int *' <LValueToRValue>
| |   | |   | `-CXXMemberCallExpr 0x81b2c18 'int *const':'int *const' lvalue
| |   | |   |   `-MemberExpr 0x81b2be8 '<bound member function type>' .base 0x81ac330
| |   | |   |     `-ImplicitCastExpr 0x81b2c38 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
| |   | |   |       `-DeclRefExpr 0x81b2bc8 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
| |   | |   |-ImplicitCastExpr 0x81b2e10 'pointer':'int *' <LValueToRValue>
| |   | |   | `-DeclRefExpr 0x81b2c50 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
| |   | |   `-CXXMemberCallExpr 0x81b2d48 '_Tp_alloc_type':'class std::allocator<int>' lvalue
| |   | |     `-MemberExpr 0x81b2d00 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
| |   | |       `-ImplicitCastExpr 0x81b2d68 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| |   | |         `-CXXThisExpr 0x81b2cf0 'class std::vector<int> *' implicit this
| |   | |-UnaryOperator 0x81b2e68 'pointer':'int *' lvalue prefix '++'
| |   | | `-DeclRefExpr 0x81b2e48 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| |   | `-BinaryOperator 0x81b3140 'pointer':'int *' lvalue '='
| |   |   |-DeclRefExpr 0x81b2e80 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| |   |   `-CallExpr 0x81b30b8 'pointer':'int *'
| |   |     |-ImplicitCastExpr 0x81b30a0 'pointer (*)(pointer, pointer, pointer, _Tp_alloc_type &) noexcept' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x81b2ea0 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept' lvalue CXXMethod 0x813e3b0 '_S_relocate' 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept'
| |   |     |-ImplicitCastExpr 0x81b30f8 'int *':'int *' <LValueToRValue>
| |   |     | `-CXXMemberCallExpr 0x81b2f10 'int *const':'int *const' lvalue
| |   |     |   `-MemberExpr 0x81b2ee0 '<bound member function type>' .base 0x81ac330
| |   |     |     `-ImplicitCastExpr 0x81b2f30 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
| |   |     |       `-DeclRefExpr 0x81b2ec0 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
| |   |     |-ImplicitCastExpr 0x81b3110 'pointer':'int *' <LValueToRValue>
| |   |     | `-DeclRefExpr 0x81b2f48 'pointer':'int *' lvalue Var 0x81b0570 '__old_finish' 'pointer':'int *'
| |   |     |-ImplicitCastExpr 0x81b3128 'pointer':'int *' <LValueToRValue>
| |   |     | `-DeclRefExpr 0x81b2f68 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| |   |     `-CXXMemberCallExpr 0x81b3060 '_Tp_alloc_type':'class std::allocator<int>' lvalue
| |   |       `-MemberExpr 0x81b3018 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
| |   |         `-ImplicitCastExpr 0x81b3080 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| |   |           `-CXXThisExpr 0x81b3008 'class std::vector<int> *' implicit this
| |   `-CompoundStmt 0x81b4e18
| |     |-BinaryOperator 0x81b39c8 'pointer':'int *' lvalue '='
| |     | |-DeclRefExpr 0x81b3188 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| |     | `-CallExpr 0x81b3940 'int *':'int *'
| |     |   |-ImplicitCastExpr 0x81b3928 'int *(*)(int *, int *, int *, class std::allocator<int> &)' <FunctionToPointerDecay>
| |     |   | `-DeclRefExpr 0x81b38c8 'int *(int *, int *, int *, class std::allocator<int> &)' lvalue Function 0x81b3778 '__uninitialized_move_if_noexcept_a' 'int *(int *, int *, int *, class std::allocator<int> &)' (FunctionTemplate 0x7fda750 '__uninitialized_move_if_noexcept_a')
| |     |   |-ImplicitCastExpr 0x81b3980 'pointer':'int *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x81b31f0 'pointer':'int *' lvalue Var 0x81b0400 '__old_start' 'pointer':'int *'
| |     |   |-ImplicitCastExpr 0x81b3998 'int *':'int *' <LValueToRValue>
| |     |   | `-CXXMemberCallExpr 0x81b3260 'int *const':'int *const' lvalue
| |     |   |   `-MemberExpr 0x81b3230 '<bound member function type>' .base 0x81ac330
| |     |   |     `-ImplicitCastExpr 0x81b3280 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
| |     |   |       `-DeclRefExpr 0x81b3210 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
| |     |   |-ImplicitCastExpr 0x81b39b0 'pointer':'int *' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x81b3298 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
| |     |   `-CXXMemberCallExpr 0x81b3390 '_Tp_alloc_type':'class std::allocator<int>' lvalue
| |     |     `-MemberExpr 0x81b3348 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
| |     |       `-ImplicitCastExpr 0x81b33b0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| |     |         `-CXXThisExpr 0x81b3338 'class std::vector<int> *' implicit this
| |     |-UnaryOperator 0x81b3a08 'pointer':'int *' lvalue prefix '++'
| |     | `-DeclRefExpr 0x81b39e8 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| |     `-BinaryOperator 0x81b4df8 'pointer':'int *' lvalue '='
| |       |-DeclRefExpr 0x81b3a20 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| |       `-CallExpr 0x81b4d70 'int *':'int *'
| |         |-ImplicitCastExpr 0x81b3d30 'int *(*)(int *, int *, int *, class std::allocator<int> &)' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x81b3cf8 'int *(int *, int *, int *, class std::allocator<int> &)' lvalue Function 0x81b3778 '__uninitialized_move_if_noexcept_a' 'int *(int *, int *, int *, class std::allocator<int> &)' (FunctionTemplate 0x7fda750 '__uninitialized_move_if_noexcept_a')
| |         |-ImplicitCastExpr 0x81b4db0 'int *':'int *' <LValueToRValue>
| |         | `-CXXMemberCallExpr 0x81b3ad8 'int *const':'int *const' lvalue
| |         |   `-MemberExpr 0x81b3aa8 '<bound member function type>' .base 0x81ac330
| |         |     `-ImplicitCastExpr 0x81b3af8 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
| |         |       `-DeclRefExpr 0x81b3a88 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
| |         |-ImplicitCastExpr 0x81b4dc8 'pointer':'int *' <LValueToRValue>
| |         | `-DeclRefExpr 0x81b3b10 'pointer':'int *' lvalue Var 0x81b0570 '__old_finish' 'pointer':'int *'
| |         |-ImplicitCastExpr 0x81b4de0 'pointer':'int *' <LValueToRValue>
| |         | `-DeclRefExpr 0x81b3b30 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| |         `-CXXMemberCallExpr 0x81b3c28 '_Tp_alloc_type':'class std::allocator<int>' lvalue
| |           `-MemberExpr 0x81b3be0 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
| |             `-ImplicitCastExpr 0x81b3c48 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| |               `-CXXThisExpr 0x81b3bd0 'class std::vector<int> *' implicit this
| `-CXXCatchStmt 0x81b7488
|   |-<<<NULL>>>
|   `-CompoundStmt 0x81b7460
|     |-IfStmt 0x81b72f8 has_else
|     | |-UnaryOperator 0x81b4ee8 '_Bool' prefix '!' cannot overflow
|     | | `-ImplicitCastExpr 0x81b4ed0 '_Bool' <PointerToBoolean>
|     | |   `-ImplicitCastExpr 0x81b4eb8 'pointer':'int *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x81b4e98 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|     | |-CallExpr 0x81b6f70 'void'
|     | | |-ImplicitCastExpr 0x81b6f58 'void (*)(allocator_type &, int *) noexcept(noexcept(__a.destroy(__p)))' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x81b5b20 'void (allocator_type &, int *) noexcept(noexcept(__a.destroy(__p)))' lvalue CXXMethod 0x81b5338 'destroy' 'void (allocator_type &, int *) noexcept(noexcept(__a.destroy(__p)))' (UsingShadow 0x81321a0 'destroy')
|     | | |-ImplicitCastExpr 0x81b6fa0 'allocator_type':'class std::allocator<int>' lvalue <DerivedToBase (allocator)>
|     | | | `-MemberExpr 0x81b4fd0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
|     | | |   `-ImplicitCastExpr 0x81b4fb0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|     | | |     `-CXXThisExpr 0x81b4fa0 'class std::vector<int> *' this
|     | | `-BinaryOperator 0x81b50e8 'pointer':'int *' '+'
|     | |   |-ImplicitCastExpr 0x81b50b8 'pointer':'int *' <LValueToRValue>
|     | |   | `-DeclRefExpr 0x81b5078 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
|     | |   `-ImplicitCastExpr 0x81b50d0 'size_type':'unsigned long' <LValueToRValue>
|     | |     `-DeclRefExpr 0x81b5098 'const size_type':'const unsigned long' lvalue Var 0x81b06d0 '__elems_before' 'const size_type':'const unsigned long'
|     | `-CallExpr 0x81b7290 'void'
|     |   |-ImplicitCastExpr 0x81b7278 'void (*)(int *, int *, allocator<int> &)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x81b7240 'void (int *, int *, allocator<int> &)' lvalue Function 0x8157ba8 '_Destroy' 'void (int *, int *, allocator<int> &)' (FunctionTemplate 0x7fcd9b0 '_Destroy')
|     |   |-ImplicitCastExpr 0x81b72c8 'pointer':'int *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x81b7020 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
|     |   |-ImplicitCastExpr 0x81b72e0 'pointer':'int *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x81b7040 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|     |   `-CXXMemberCallExpr 0x81b7138 '_Tp_alloc_type':'class std::allocator<int>' lvalue
|     |     `-MemberExpr 0x81b70f0 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
|     |       `-ImplicitCastExpr 0x81b7158 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|     |         `-CXXThisExpr 0x81b70e0 'class std::vector<int> *' implicit this
|     |-CXXMemberCallExpr 0x81b73e0 'void'
|     | |-MemberExpr 0x81b7358 '<bound member function type>' ->_M_deallocate 0x8139b18
|     | | `-ImplicitCastExpr 0x81b7410 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|     | |   `-CXXThisExpr 0x81b7348 'class std::vector<int> *' implicit this
|     | |-ImplicitCastExpr 0x81b7430 'pointer':'int *' <LValueToRValue>
|     | | `-DeclRefExpr 0x81b73a0 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
|     | `-ImplicitCastExpr 0x81b7448 'size_type':'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x81b73c0 'const size_type':'const unsigned long' lvalue Var 0x81b0238 '__len' 'const size_type':'const unsigned long'
|     `-CXXThrowExpr 0x80e9820 'void'
|-IfStmt 0x81b7870
| |-UnaryOperator 0x81b7520 '_Bool' prefix '!' cannot overflow
| | `-CallExpr 0x81b7500 '_Bool'
| |   `-ImplicitCastExpr 0x81b74e8 '_Bool (*)(void)' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x81b74c8 '_Bool (void)' lvalue CXXMethod 0x813d7a8 '_S_use_relocate' '_Bool (void)'
| `-CallExpr 0x81b7808 'void'
|   |-ImplicitCastExpr 0x81b77f0 'void (*)(int *, int *, allocator<int> &)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x81b77b8 'void (int *, int *, allocator<int> &)' lvalue Function 0x8157ba8 '_Destroy' 'void (int *, int *, allocator<int> &)' (FunctionTemplate 0x7fcd9b0 '_Destroy')
|   |-ImplicitCastExpr 0x81b7840 'pointer':'int *' <LValueToRValue>
|   | `-DeclRefExpr 0x81b7598 'pointer':'int *' lvalue Var 0x81b0400 '__old_start' 'pointer':'int *'
|   |-ImplicitCastExpr 0x81b7858 'pointer':'int *' <LValueToRValue>
|   | `-DeclRefExpr 0x81b75b8 'pointer':'int *' lvalue Var 0x81b0570 '__old_finish' 'pointer':'int *'
|   `-CXXMemberCallExpr 0x81b76b0 '_Tp_alloc_type':'class std::allocator<int>' lvalue
|     `-MemberExpr 0x81b7668 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
|       `-ImplicitCastExpr 0x81b76d0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|         `-CXXThisExpr 0x81b7658 'class std::vector<int> *' implicit this
|-NullStmt 0x80e9aa0
|-CXXMemberCallExpr 0x81b7ab8 'void'
| |-MemberExpr 0x81b78c0 '<bound member function type>' ->_M_deallocate 0x8139b18
| | `-ImplicitCastExpr 0x81b7ae8 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| |   `-CXXThisExpr 0x81b78b0 'class std::vector<int> *' implicit this
| |-ImplicitCastExpr 0x81b7b08 'pointer':'int *' <LValueToRValue>
| | `-DeclRefExpr 0x81b7908 'pointer':'int *' lvalue Var 0x81b0400 '__old_start' 'pointer':'int *'
| `-ImplicitCastExpr 0x81b7b20 'size_t':'unsigned long' <IntegralCast>
|   `-BinaryOperator 0x81b7a98 'long' '-'
|     |-ImplicitCastExpr 0x81b7a68 'pointer':'int *' <LValueToRValue>
|     | `-MemberExpr 0x81b7a18 'pointer':'int *' lvalue ._M_end_of_storage 0x8137930
|     |   `-ImplicitCastExpr 0x81b79f8 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
|     |     `-MemberExpr 0x81b79b0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
|     |       `-ImplicitCastExpr 0x81b7990 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|     |         `-CXXThisExpr 0x81b7980 'class std::vector<int> *' this
|     `-ImplicitCastExpr 0x81b7a80 'pointer':'int *' <LValueToRValue>
|       `-DeclRefExpr 0x81b7a48 'pointer':'int *' lvalue Var 0x81b0400 '__old_start' 'pointer':'int *'
|-BinaryOperator 0x81b7c38 'pointer':'int *' lvalue '='
| |-MemberExpr 0x81b7bd0 'pointer':'int *' lvalue ._M_start 0x8137870
| | `-ImplicitCastExpr 0x81b7bb0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
| |   `-MemberExpr 0x81b7b68 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
| |     `-ImplicitCastExpr 0x81b7b48 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| |       `-CXXThisExpr 0x81b7b38 'class std::vector<int> *' this
| `-ImplicitCastExpr 0x81b7c20 'pointer':'int *' <LValueToRValue>
|   `-DeclRefExpr 0x81b7c00 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
|-BinaryOperator 0x81b7d58 'pointer':'int *' lvalue '='
| |-MemberExpr 0x81b7cf0 'pointer':'int *' lvalue ._M_finish 0x81378d0
| | `-ImplicitCastExpr 0x81b7cd0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
| |   `-MemberExpr 0x81b7c88 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
| |     `-ImplicitCastExpr 0x81b7c68 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| |       `-CXXThisExpr 0x81b7c58 'class std::vector<int> *' this
| `-ImplicitCastExpr 0x81b7d40 'pointer':'int *' <LValueToRValue>
|   `-DeclRefExpr 0x81b7d20 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
`-BinaryOperator 0x81b7f30 'pointer':'int *' lvalue '='
  |-MemberExpr 0x81b7e10 'pointer':'int *' lvalue ._M_end_of_storage 0x8137930
  | `-ImplicitCastExpr 0x81b7df0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
  |   `-MemberExpr 0x81b7da8 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
  |     `-ImplicitCastExpr 0x81b7d88 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
  |       `-CXXThisExpr 0x81b7d78 'class std::vector<int> *' this
  `-BinaryOperator 0x81b7f10 'pointer':'int *' '+'
    |-ImplicitCastExpr 0x81b7ee0 'pointer':'int *' <LValueToRValue>
    | `-DeclRefExpr 0x81b7ea0 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
    `-ImplicitCastExpr 0x81b7ef8 'size_type':'unsigned long' <LValueToRValue>
      `-DeclRefExpr 0x81b7ec0 'const size_type':'const unsigned long' lvalue Var 0x81b0238 '__len' 'const size_type':'const unsigned long'
ImplicitCastExpr 0x81b1848 'const size_type':'const unsigned long' <IntegralCast>
`-CXXOperatorCallExpr 0x81b1810 'typename __normal_iterator<int *, class vector<int> >::difference_type':'long' '-' adl
  |-ImplicitCastExpr 0x81b17f8 'typename __normal_iterator<int *, class vector<int> >::difference_type (*)(const __normal_iterator<int *, vector<int, allocator<int> > > &, const __normal_iterator<int *, vector<int, allocator<int> > > &) noexcept' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x81b1780 'typename __normal_iterator<int *, class vector<int> >::difference_type (const __normal_iterator<int *, vector<int, allocator<int> > > &, const __normal_iterator<int *, vector<int, allocator<int> > > &) noexcept' lvalue Function 0x81b1610 'operator-' 'typename __normal_iterator<int *, class vector<int> >::difference_type (const __normal_iterator<int *, vector<int, allocator<int> > > &, const __normal_iterator<int *, vector<int, allocator<int> > > &) noexcept'
  |-ImplicitCastExpr 0x81b1738 'const __normal_iterator<int *, vector<int, allocator<int> > >':'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
  | `-DeclRefExpr 0x81b0790 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
  `-MaterializeTemporaryExpr 0x81b1768 'const iterator':'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue
    `-ImplicitCastExpr 0x81b1750 'const iterator':'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' <NoOp>
      `-CXXMemberCallExpr 0x81b0870 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
        `-MemberExpr 0x81b0840 '<bound member function type>' ->begin 0x8142ab0
          `-CXXThisExpr 0x81b0830 'class std::vector<int> *' implicit this
cleanup not handled
warning, not performing catches for try: CXXTryStmt 0x81b74a8
|-CompoundStmt 0x81b4e70
| |-CallExpr 0x81b2a50 'void'
| | |-ImplicitCastExpr 0x81b2a38 'void (*)(allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' <FunctionToPointerDecay>
| | | `-DeclRefExpr 0x81b2a00 'void (allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' lvalue CXXMethod 0x81a4ff8 'construct' 'void (allocator_type &, int *, const int &) noexcept(std::is_nothrow_constructible<int, const int &>::value)' (UsingShadow 0x81320c8 'construct')
| | |-ImplicitCastExpr 0x81b2a88 'allocator_type':'class std::allocator<int>' lvalue <DerivedToBase (allocator)>
| | | `-MemberExpr 0x81b1c28 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
| | |   `-ImplicitCastExpr 0x81b1c08 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
| | |     `-CXXThisExpr 0x81b1bf8 'class std::vector<int> *' this
| | |-BinaryOperator 0x81b1d40 'pointer':'int *' '+'
| | | |-ImplicitCastExpr 0x81b1d10 'pointer':'int *' <LValueToRValue>
| | | | `-DeclRefExpr 0x81b1cd0 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
| | | `-ImplicitCastExpr 0x81b1d28 'size_type':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x81b1cf0 'const size_type':'const unsigned long' lvalue Var 0x81b06d0 '__elems_before' 'const size_type':'const unsigned long'
| | `-CallExpr 0x81b2288 'const int' lvalue
| |   |-ImplicitCastExpr 0x81b2270 'const int &(*)(typename std::remove_reference<const int &>::type &) noexcept' <BuiltinFnToFnPtr>
| |   | `-DeclRefExpr 0x81b2208 '<builtin fn type>' Function 0x81ae6b0 'forward' 'const int &(typename std::remove_reference<const int &>::type &) noexcept' (FunctionTemplate 0x7d9e798 'forward')
| |   `-DeclRefExpr 0x81b1e18 'const int' lvalue ParmVar 0x81ac658 '__args' 'const int &'
| |-BinaryOperator 0x81b2af0 'pointer':'int *' lvalue '='
| | |-DeclRefExpr 0x81b2aa8 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
| | `-CXXScalarValueInitExpr 0x81b2ad8 'pointer':'int *'
| `-IfStmt 0x81b4e40 has_else
|   |-CallExpr 0x81b2b48 '_Bool'
|   | `-ImplicitCastExpr 0x81b2b30 '_Bool (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x81b2b10 '_Bool (void)' lvalue CXXMethod 0x813d7a8 '_S_use_relocate' '_Bool (void)'
|   |-CompoundStmt 0x81b3160
|   | |-BinaryOperator 0x81b2e28 'pointer':'int *' lvalue '='
|   | | |-DeclRefExpr 0x81b2b68 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|   | | `-CallExpr 0x81b2da0 'pointer':'int *'
|   | |   |-ImplicitCastExpr 0x81b2d88 'pointer (*)(pointer, pointer, pointer, _Tp_alloc_type &) noexcept' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x81b2b88 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept' lvalue CXXMethod 0x813e3b0 '_S_relocate' 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept'
|   | |   |-ImplicitCastExpr 0x81b2de0 'pointer':'int *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x81b2ba8 'pointer':'int *' lvalue Var 0x81b0400 '__old_start' 'pointer':'int *'
|   | |   |-ImplicitCastExpr 0x81b2df8 'int *':'int *' <LValueToRValue>
|   | |   | `-CXXMemberCallExpr 0x81b2c18 'int *const':'int *const' lvalue
|   | |   |   `-MemberExpr 0x81b2be8 '<bound member function type>' .base 0x81ac330
|   | |   |     `-ImplicitCastExpr 0x81b2c38 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
|   | |   |       `-DeclRefExpr 0x81b2bc8 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
|   | |   |-ImplicitCastExpr 0x81b2e10 'pointer':'int *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x81b2c50 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
|   | |   `-CXXMemberCallExpr 0x81b2d48 '_Tp_alloc_type':'class std::allocator<int>' lvalue
|   | |     `-MemberExpr 0x81b2d00 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
|   | |       `-ImplicitCastExpr 0x81b2d68 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|   | |         `-CXXThisExpr 0x81b2cf0 'class std::vector<int> *' implicit this
|   | |-UnaryOperator 0x81b2e68 'pointer':'int *' lvalue prefix '++'
|   | | `-DeclRefExpr 0x81b2e48 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|   | `-BinaryOperator 0x81b3140 'pointer':'int *' lvalue '='
|   |   |-DeclRefExpr 0x81b2e80 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|   |   `-CallExpr 0x81b30b8 'pointer':'int *'
|   |     |-ImplicitCastExpr 0x81b30a0 'pointer (*)(pointer, pointer, pointer, _Tp_alloc_type &) noexcept' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x81b2ea0 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept' lvalue CXXMethod 0x813e3b0 '_S_relocate' 'pointer (pointer, pointer, pointer, _Tp_alloc_type &) noexcept'
|   |     |-ImplicitCastExpr 0x81b30f8 'int *':'int *' <LValueToRValue>
|   |     | `-CXXMemberCallExpr 0x81b2f10 'int *const':'int *const' lvalue
|   |     |   `-MemberExpr 0x81b2ee0 '<bound member function type>' .base 0x81ac330
|   |     |     `-ImplicitCastExpr 0x81b2f30 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
|   |     |       `-DeclRefExpr 0x81b2ec0 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
|   |     |-ImplicitCastExpr 0x81b3110 'pointer':'int *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x81b2f48 'pointer':'int *' lvalue Var 0x81b0570 '__old_finish' 'pointer':'int *'
|   |     |-ImplicitCastExpr 0x81b3128 'pointer':'int *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x81b2f68 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|   |     `-CXXMemberCallExpr 0x81b3060 '_Tp_alloc_type':'class std::allocator<int>' lvalue
|   |       `-MemberExpr 0x81b3018 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
|   |         `-ImplicitCastExpr 0x81b3080 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|   |           `-CXXThisExpr 0x81b3008 'class std::vector<int> *' implicit this
|   `-CompoundStmt 0x81b4e18
|     |-BinaryOperator 0x81b39c8 'pointer':'int *' lvalue '='
|     | |-DeclRefExpr 0x81b3188 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|     | `-CallExpr 0x81b3940 'int *':'int *'
|     |   |-ImplicitCastExpr 0x81b3928 'int *(*)(int *, int *, int *, class std::allocator<int> &)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x81b38c8 'int *(int *, int *, int *, class std::allocator<int> &)' lvalue Function 0x81b3778 '__uninitialized_move_if_noexcept_a' 'int *(int *, int *, int *, class std::allocator<int> &)' (FunctionTemplate 0x7fda750 '__uninitialized_move_if_noexcept_a')
|     |   |-ImplicitCastExpr 0x81b3980 'pointer':'int *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x81b31f0 'pointer':'int *' lvalue Var 0x81b0400 '__old_start' 'pointer':'int *'
|     |   |-ImplicitCastExpr 0x81b3998 'int *':'int *' <LValueToRValue>
|     |   | `-CXXMemberCallExpr 0x81b3260 'int *const':'int *const' lvalue
|     |   |   `-MemberExpr 0x81b3230 '<bound member function type>' .base 0x81ac330
|     |   |     `-ImplicitCastExpr 0x81b3280 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
|     |   |       `-DeclRefExpr 0x81b3210 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
|     |   |-ImplicitCastExpr 0x81b39b0 'pointer':'int *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x81b3298 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
|     |   `-CXXMemberCallExpr 0x81b3390 '_Tp_alloc_type':'class std::allocator<int>' lvalue
|     |     `-MemberExpr 0x81b3348 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
|     |       `-ImplicitCastExpr 0x81b33b0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|     |         `-CXXThisExpr 0x81b3338 'class std::vector<int> *' implicit this
|     |-UnaryOperator 0x81b3a08 'pointer':'int *' lvalue prefix '++'
|     | `-DeclRefExpr 0x81b39e8 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|     `-BinaryOperator 0x81b4df8 'pointer':'int *' lvalue '='
|       |-DeclRefExpr 0x81b3a20 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|       `-CallExpr 0x81b4d70 'int *':'int *'
|         |-ImplicitCastExpr 0x81b3d30 'int *(*)(int *, int *, int *, class std::allocator<int> &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x81b3cf8 'int *(int *, int *, int *, class std::allocator<int> &)' lvalue Function 0x81b3778 '__uninitialized_move_if_noexcept_a' 'int *(int *, int *, int *, class std::allocator<int> &)' (FunctionTemplate 0x7fda750 '__uninitialized_move_if_noexcept_a')
|         |-ImplicitCastExpr 0x81b4db0 'int *':'int *' <LValueToRValue>
|         | `-CXXMemberCallExpr 0x81b3ad8 'int *const':'int *const' lvalue
|         |   `-MemberExpr 0x81b3aa8 '<bound member function type>' .base 0x81ac330
|         |     `-ImplicitCastExpr 0x81b3af8 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue <NoOp>
|         |       `-DeclRefExpr 0x81b3a88 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81ac580 '__position' 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
|         |-ImplicitCastExpr 0x81b4dc8 'pointer':'int *' <LValueToRValue>
|         | `-DeclRefExpr 0x81b3b10 'pointer':'int *' lvalue Var 0x81b0570 '__old_finish' 'pointer':'int *'
|         |-ImplicitCastExpr 0x81b4de0 'pointer':'int *' <LValueToRValue>
|         | `-DeclRefExpr 0x81b3b30 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
|         `-CXXMemberCallExpr 0x81b3c28 '_Tp_alloc_type':'class std::allocator<int>' lvalue
|           `-MemberExpr 0x81b3be0 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
|             `-ImplicitCastExpr 0x81b3c48 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
|               `-CXXThisExpr 0x81b3bd0 'class std::vector<int> *' implicit this
`-CXXCatchStmt 0x81b7488
  |-<<<NULL>>>
  `-CompoundStmt 0x81b7460
    |-IfStmt 0x81b72f8 has_else
    | |-UnaryOperator 0x81b4ee8 '_Bool' prefix '!' cannot overflow
    | | `-ImplicitCastExpr 0x81b4ed0 '_Bool' <PointerToBoolean>
    | |   `-ImplicitCastExpr 0x81b4eb8 'pointer':'int *' <LValueToRValue>
    | |     `-DeclRefExpr 0x81b4e98 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
    | |-CallExpr 0x81b6f70 'void'
    | | |-ImplicitCastExpr 0x81b6f58 'void (*)(allocator_type &, int *) noexcept(noexcept(__a.destroy(__p)))' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x81b5b20 'void (allocator_type &, int *) noexcept(noexcept(__a.destroy(__p)))' lvalue CXXMethod 0x81b5338 'destroy' 'void (allocator_type &, int *) noexcept(noexcept(__a.destroy(__p)))' (UsingShadow 0x81321a0 'destroy')
    | | |-ImplicitCastExpr 0x81b6fa0 'allocator_type':'class std::allocator<int>' lvalue <DerivedToBase (allocator)>
    | | | `-MemberExpr 0x81b4fd0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
    | | |   `-ImplicitCastExpr 0x81b4fb0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | | |     `-CXXThisExpr 0x81b4fa0 'class std::vector<int> *' this
    | | `-BinaryOperator 0x81b50e8 'pointer':'int *' '+'
    | |   |-ImplicitCastExpr 0x81b50b8 'pointer':'int *' <LValueToRValue>
    | |   | `-DeclRefExpr 0x81b5078 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
    | |   `-ImplicitCastExpr 0x81b50d0 'size_type':'unsigned long' <LValueToRValue>
    | |     `-DeclRefExpr 0x81b5098 'const size_type':'const unsigned long' lvalue Var 0x81b06d0 '__elems_before' 'const size_type':'const unsigned long'
    | `-CallExpr 0x81b7290 'void'
    |   |-ImplicitCastExpr 0x81b7278 'void (*)(int *, int *, allocator<int> &)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x81b7240 'void (int *, int *, allocator<int> &)' lvalue Function 0x8157ba8 '_Destroy' 'void (int *, int *, allocator<int> &)' (FunctionTemplate 0x7fcd9b0 '_Destroy')
    |   |-ImplicitCastExpr 0x81b72c8 'pointer':'int *' <LValueToRValue>
    |   | `-DeclRefExpr 0x81b7020 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
    |   |-ImplicitCastExpr 0x81b72e0 'pointer':'int *' <LValueToRValue>
    |   | `-DeclRefExpr 0x81b7040 'pointer':'int *' lvalue Var 0x81b1a80 '__new_finish' 'pointer':'int *'
    |   `-CXXMemberCallExpr 0x81b7138 '_Tp_alloc_type':'class std::allocator<int>' lvalue
    |     `-MemberExpr 0x81b70f0 '<bound member function type>' ->_M_get_Tp_allocator 0x8135728
    |       `-ImplicitCastExpr 0x81b7158 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    |         `-CXXThisExpr 0x81b70e0 'class std::vector<int> *' implicit this
    |-CXXMemberCallExpr 0x81b73e0 'void'
    | |-MemberExpr 0x81b7358 '<bound member function type>' ->_M_deallocate 0x8139b18
    | | `-ImplicitCastExpr 0x81b7410 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
    | |   `-CXXThisExpr 0x81b7348 'class std::vector<int> *' implicit this
    | |-ImplicitCastExpr 0x81b7430 'pointer':'int *' <LValueToRValue>
    | | `-DeclRefExpr 0x81b73a0 'pointer':'int *' lvalue Var 0x81b18f8 '__new_start' 'pointer':'int *'
    | `-ImplicitCastExpr 0x81b7448 'size_type':'unsigned long' <LValueToRValue>
    |   `-DeclRefExpr 0x81b73c0 'const size_type':'const unsigned long' lvalue Var 0x81b0238 '__len' 'const size_type':'const unsigned long'
    `-CXXThrowExpr 0x80e9820 'void'
Emitting fn: _ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1EOS5_
__normal_iterator
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x81a9e28 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_iterator.h:787:7, col:17> col:17 referenced _M_current 'int *':'int *'
ImplicitCastExpr 0x81adc48 'int *':'int *' <LValueToRValue>
`-MemberExpr 0x81adc00 'int *':'int *' xvalue ._M_current 0x81a9e28
  `-CXXStaticCastExpr 0x81adbd0 'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' xvalue static_cast<class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > &&> <NoOp>
    `-DeclRefExpr 0x81adba0 'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81acc18 '' 'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > &&'
CompoundStmt 0x81adc88
Emitting fn: _ZNSt6vectorIiSaIiEE3endEv
end
CompoundStmt 0x81b00a0
`-ReturnStmt 0x81b0090
  `-ExprWithCleanups 0x81b0078 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
    `-CXXConstructExpr 0x81b0048 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > &&) noexcept' elidable
      `-MaterializeTemporaryExpr 0x81b0030 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' xvalue
        `-CXXFunctionalCastExpr 0x81affc8 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' functional cast to iterator <ConstructorConversion>
          `-CXXConstructExpr 0x81aff98 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (int *const &) noexcept'
            `-ImplicitCastExpr 0x81aff80 'int *const':'int *const' lvalue <NoOp>
              `-MemberExpr 0x81afec0 'pointer':'int *' lvalue ._M_finish 0x81378d0
                `-ImplicitCastExpr 0x81afea0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
                  `-MemberExpr 0x81afe58 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
                    `-ImplicitCastExpr 0x81afe38 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
                      `-CXXThisExpr 0x81afe28 'class std::vector<int> *' this
CXXConstructExpr 0x81b0048 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > &&) noexcept' elidable
`-MaterializeTemporaryExpr 0x81b0030 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' xvalue
  `-CXXFunctionalCastExpr 0x81affc8 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' functional cast to iterator <ConstructorConversion>
    `-CXXConstructExpr 0x81aff98 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (int *const &) noexcept'
      `-ImplicitCastExpr 0x81aff80 'int *const':'int *const' lvalue <NoOp>
        `-MemberExpr 0x81afec0 'pointer':'int *' lvalue ._M_finish 0x81378d0
          `-ImplicitCastExpr 0x81afea0 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
            `-MemberExpr 0x81afe58 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
              `-ImplicitCastExpr 0x81afe38 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
                `-CXXThisExpr 0x81afe28 'class std::vector<int> *' this
cleanup not handled
Emitting fn: _ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev
_Vector_impl
 init: - baseInit:1 memberInit:0 anyMember:0 indirectMember:0 isinClass:0 delegating:0 isPack:0
CXXConstructExpr 0x8153008 '_Tp_alloc_type':'class std::allocator<int>' 'void (void) noexcept'
 init: - baseInit:1 memberInit:0 anyMember:0 indirectMember:0 isinClass:0 delegating:0 isPack:0
CXXConstructExpr 0x81530a8 '_Vector_impl_data':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' 'void (void) noexcept'
CompoundStmt 0x80031a0
Emitting fn: _ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_
_S_max_size
CompoundStmt 0x818f028
|-DeclStmt 0x818eda0
| `-VarDecl 0x818ec60  used __diffmax 'const size_t':'const unsigned long' cinit
|   `-BinaryOperator 0x818ed28 'unsigned long' '/'
|     |-ImplicitCastExpr 0x818ed10 'unsigned long' <IntegralCast>
|     | `-ImplicitCastExpr 0x818ecf8 'long':'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x804ba40 'const long':'const long' lvalue Var 0x804b5c0 '__max' 'const long':'const long' non_odr_use_constant
|     `-UnaryExprOrTypeTraitExpr 0x818ecd8 'unsigned long' sizeof 'int':'int'
|-DeclStmt 0x818ef60
| `-VarDecl 0x818edb8  used __allocmax 'const size_t':'const unsigned long' cinit
|   `-CallExpr 0x818eee0 'size_type':'unsigned long'
|     |-ImplicitCastExpr 0x818eec8 'size_type (*)(const allocator_type &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x818ee40 'size_type (const allocator_type &) noexcept' lvalue CXXMethod 0x81312d0 'max_size' 'size_type (const allocator_type &) noexcept' (UsingShadow 0x8132278 'max_size')
|     `-DeclRefExpr 0x818ee78 'const _Tp_alloc_type':'const class std::allocator<int>' lvalue ParmVar 0x814f7e0 '__a' 'const _Tp_alloc_type &'
`-ReturnStmt 0x818f018
  `-ImplicitCastExpr 0x818f000 'unsigned long':'unsigned long' <LValueToRValue>
    `-CallExpr 0x818efd0 'const unsigned long':'const unsigned long' lvalue
      |-ImplicitCastExpr 0x818efb8 'const unsigned long &(*)(const unsigned long &, const unsigned long &)' <FunctionToPointerDecay>
      | `-ParenExpr 0x804bd60 'const unsigned long &(const unsigned long &, const unsigned long &)' lvalue
      |   `-DeclRefExpr 0x804bd28 'const unsigned long &(const unsigned long &, const unsigned long &)' lvalue Function 0x7f36558 'min' 'const unsigned long &(const unsigned long &, const unsigned long &)' (FunctionTemplate 0x7f0ada0 'min')
      |-DeclRefExpr 0x818ef78 'const size_t':'const unsigned long' lvalue Var 0x818ec60 '__diffmax' 'const size_t':'const unsigned long'
      `-DeclRefExpr 0x818ef98 'const size_t':'const unsigned long' lvalue Var 0x818edb8 '__allocmax' 'const size_t':'const unsigned long'
Emitting fn: _ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv
_M_get_Tp_allocator
CompoundStmt 0x818f3f0
`-ReturnStmt 0x818f3e0
  `-ImplicitCastExpr 0x818f3c0 'const _Tp_alloc_type':'const class std::allocator<int>' lvalue <DerivedToBase (allocator)>
    `-MemberExpr 0x818f390 'const _Vector_impl':'const struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
      `-CXXThisExpr 0x818f380 'const struct std::_Vector_base<int, class std::allocator<int> > *' this
Emitting fn: _ZNSt6vectorIiSaIiEE19_S_nothrow_relocateESt17integral_constantIbLb1EE
_S_nothrow_relocate
CompoundStmt 0x817f3e8
`-ReturnStmt 0x817f3d8
  `-CXXNoexceptExpr 0x817f3b8 '_Bool'
    `-CallExpr 0x817f330 'int *':'int *'
      |-ImplicitCastExpr 0x817f318 'int *(*)(int *, int *, int *, class std::allocator<int> &) noexcept(noexcept(__relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc)))' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x8173368 'int *(int *, int *, int *, class std::allocator<int> &) noexcept(noexcept(__relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc)))' lvalue Function 0x81731b8 '__relocate_a' 'int *(int *, int *, int *, class std::allocator<int> &) noexcept(noexcept(__relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc)))' (FunctionTemplate 0x7ff8d80 '__relocate_a') non_odr_use_unevaluated
      |-ImplicitCastExpr 0x817f370 'int *' <LValueToRValue>
      | `-CallExpr 0x8170ce0 'int *' xvalue
      |   `-ImplicitCastExpr 0x8170cc8 'auto (*)(void) noexcept -> decltype(__declval<int *>(0))' <FunctionToPointerDecay>
      |     `-DeclRefExpr 0x8170c00 'auto (void) noexcept -> decltype(__declval<int *>(0))' lvalue Function 0x8170b00 'declval' 'auto (void) noexcept -> decltype(__declval<int *>(0))' (FunctionTemplate 0x7e148b8 'declval') non_odr_use_unevaluated
      |-ImplicitCastExpr 0x817f388 'int *' <LValueToRValue>
      | `-CallExpr 0x81711a0 'int *' xvalue
      |   `-ImplicitCastExpr 0x8171188 'auto (*)(void) noexcept -> decltype(__declval<int *>(0))' <FunctionToPointerDecay>
      |     `-DeclRefExpr 0x8171120 'auto (void) noexcept -> decltype(__declval<int *>(0))' lvalue Function 0x8170b00 'declval' 'auto (void) noexcept -> decltype(__declval<int *>(0))' (FunctionTemplate 0x7e148b8 'declval') non_odr_use_unevaluated
      |-ImplicitCastExpr 0x817f3a0 'int *' <LValueToRValue>
      | `-CallExpr 0x8171ee0 'int *' xvalue
      |   `-ImplicitCastExpr 0x8171ec8 'auto (*)(void) noexcept -> decltype(__declval<int *>(0))' <FunctionToPointerDecay>
      |     `-DeclRefExpr 0x8171e60 'auto (void) noexcept -> decltype(__declval<int *>(0))' lvalue Function 0x8170b00 'declval' 'auto (void) noexcept -> decltype(__declval<int *>(0))' (FunctionTemplate 0x7e148b8 'declval') non_odr_use_unevaluated
      `-CallExpr 0x8172dd0 'class std::allocator<int>' lvalue
        `-ImplicitCastExpr 0x8172db8 'auto (*)(void) noexcept -> decltype(__declval<class std::allocator<int> &>(0))' <FunctionToPointerDecay>
          `-DeclRefExpr 0x8172cf0 'auto (void) noexcept -> decltype(__declval<class std::allocator<int> &>(0))' lvalue Function 0x8172bf0 'declval' 'auto (void) noexcept -> decltype(__declval<class std::allocator<int> &>(0))' (FunctionTemplate 0x7e148b8 'declval') non_odr_use_unevaluated
Emitting fn: _ZNSt17integral_constantIbLb1EEC1EOS0_
integral_constant
CompoundStmt 0x817f520
Emitting fn: _ZNSt16allocator_traitsISaIiEE8allocateERS0_m
allocate
CompoundStmt 0x818fca0
`-ReturnStmt 0x818fc90
  `-CXXMemberCallExpr 0x818fbc0 'pointer':'int *'
    |-MemberExpr 0x818fb70 '<bound member function type>' .allocate 0x812bd18
    | `-ImplicitCastExpr 0x818fbf0 'class __gnu_cxx::new_allocator<int>' lvalue <UncheckedDerivedToBase (new_allocator)>
    |   `-DeclRefExpr 0x818fb50 'allocator_type':'class std::allocator<int>' lvalue ParmVar 0x812fef0 '__a' 'allocator_type &'
    |-ImplicitCastExpr 0x818fc10 'size_type':'unsigned long' <LValueToRValue>
    | `-DeclRefExpr 0x818fba0 'size_type':'unsigned long' lvalue ParmVar 0x812ff58 '__n' 'size_type':'unsigned long'
    `-CXXDefaultArgExpr 0x818fc70 'const void *'
Emitting fn: _ZNSt6vectorIiSaIiEE14_S_do_relocateEPiS2_S2_RS0_St17integral_constantIbLb1EE
_S_do_relocate
CompoundStmt 0x8190848
`-ReturnStmt 0x8190838
  `-CallExpr 0x81907b0 'int *':'int *'
    |-ImplicitCastExpr 0x8190798 'int *(*)(int *, int *, int *, class std::allocator<int> &) noexcept(noexcept(__relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc)))' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x8190760 'int *(int *, int *, int *, class std::allocator<int> &) noexcept(noexcept(__relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc)))' lvalue Function 0x81731b8 '__relocate_a' 'int *(int *, int *, int *, class std::allocator<int> &) noexcept(noexcept(__relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc)))' (FunctionTemplate 0x7ff8d80 '__relocate_a')
    |-ImplicitCastExpr 0x81907f0 'pointer':'int *' <LValueToRValue>
    | `-DeclRefExpr 0x8190658 'pointer':'int *' lvalue ParmVar 0x813d870 '__first' 'pointer':'int *'
    |-ImplicitCastExpr 0x8190808 'pointer':'int *' <LValueToRValue>
    | `-DeclRefExpr 0x8190678 'pointer':'int *' lvalue ParmVar 0x813d8e8 '__last' 'pointer':'int *'
    |-ImplicitCastExpr 0x8190820 'pointer':'int *' <LValueToRValue>
    | `-DeclRefExpr 0x8190698 'pointer':'int *' lvalue ParmVar 0x813d960 '__result' 'pointer':'int *'
    `-DeclRefExpr 0x81906b8 '_Tp_alloc_type':'class std::allocator<int>' lvalue ParmVar 0x813da10 '__alloc' '_Tp_alloc_type &'
Emitting fn: _ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E
__uninitialized_copy_a
CompoundStmt 0x8194db8
`-ReturnStmt 0x8194da8
  `-CallExpr 0x8194c20 'int *':'int *'
    |-ImplicitCastExpr 0x8194c08 'int *(*)(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x8194b78 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' lvalue Function 0x8194a48 'uninitialized_copy' 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' (FunctionTemplate 0x7fd0170 'uninitialized_copy')
    |-CXXConstructExpr 0x8194cd8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
    | `-ImplicitCastExpr 0x8194c98 'const class std::move_iterator<int *>' lvalue <NoOp>
    |   `-DeclRefExpr 0x8194710 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x8193cd8 '__first' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    |-CXXConstructExpr 0x8194d60 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
    | `-ImplicitCastExpr 0x8194d48 'const class std::move_iterator<int *>' lvalue <NoOp>
    |   `-DeclRefExpr 0x8194730 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x8193d50 '__last' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    `-ImplicitCastExpr 0x8194d90 'int *':'int *' <LValueToRValue>
      `-DeclRefExpr 0x8194750 'int *':'int *' lvalue ParmVar 0x8193dc8 '__result' 'int *':'int *'
Emitting fn: _ZNSt13move_iteratorIPiEC1ERKS1_
move_iterator
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x8188498 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_iterator.h:1031:7, col:17> col:17 referenced _M_current 'int *':'int *'
ImplicitCastExpr 0x8194388 'int *':'int *' <LValueToRValue>
`-MemberExpr 0x8194340 'int *const':'int *const' lvalue ._M_current 0x8188498
  `-DeclRefExpr 0x8194320 'const class std::move_iterator<int *>' lvalue ParmVar 0x818d268 '' 'const class std::move_iterator<int *> &'
CompoundStmt 0x81943c8
Emitting fn: _ZNSt13move_iteratorIPiEC1ES0_
move_iterator
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x8188498 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_iterator.h:1031:7, col:17> col:17 referenced _M_current 'int *':'int *'
ImplicitCastExpr 0x8191868 'iterator_type':'int *' <LValueToRValue>
`-DeclRefExpr 0x8191828 'iterator_type':'int *' lvalue ParmVar 0x818aa40 '__i' 'iterator_type':'int *'
CompoundStmt 0x7ed8b58
Emitting fn: _ZSt8_DestroyIPiEvT_S1_
_Destroy
CompoundStmt 0x8163db0
|-DeclStmt 0x8158a78
| `-TypedefDecl 0x8158a20  referenced _Value_type 'typename iterator_traits<int *>::value_type':'int'
|   `-ElaboratedType 0x81589d0 'typename iterator_traits<int *>::value_type' sugar
|     `-TypedefType 0x81589a0 'std::iterator_traits<int *>::value_type' sugar
|       |-Typedef 0x81587a8 'value_type'
|       `-SubstTemplateTypeParmType 0x8158770 'int' sugar typename depth 0 index 0 _Tp
|         |-ClassTemplateSpecialization 0x8158398 'iterator_traits'
|         `-BuiltinType 0x7c36430 'int'
|-DeclStmt 0x8163800
| `-StaticAssertDecl 0x81637c0 
|   |-ImplicitCastExpr 0x8163788 '_Bool':'_Bool' <LValueToRValue>
|   | `-DeclRefExpr 0x8163758 'const _Bool':'const _Bool' lvalue Var 0x7de3ee8 'value' 'const _Bool':'const _Bool' non_odr_use_constant
|   `-StringLiteral 0x7fca998 'const char[27]' lvalue "value type is destructible"
`-CallExpr 0x8163d50 'void'
  |-ImplicitCastExpr 0x8163d38 'void (*)(int *, int *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x8163cd8 'void (int *, int *)' lvalue CXXMethod 0x8163bc8 '__destroy' 'void (int *, int *)' (FunctionTemplate 0x7fca210 '__destroy')
  |-ImplicitCastExpr 0x8163d80 'int *':'int *' <LValueToRValue>
  | `-DeclRefExpr 0x8163948 'int *':'int *' lvalue ParmVar 0x8157fa8 '__first' 'int *':'int *'
  `-ImplicitCastExpr 0x8163d98 'int *':'int *' <LValueToRValue>
    `-DeclRefExpr 0x8163968 'int *':'int *' lvalue ParmVar 0x8158020 '__last' 'int *':'int *'
Emitting fn: _ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pim
deallocate
CompoundStmt 0x8156fa8
`-CXXMemberCallExpr 0x8156f28 'void'
  |-MemberExpr 0x8156eb8 '<bound member function type>' .deallocate 0x812bf68
  | `-ImplicitCastExpr 0x8156f58 'class __gnu_cxx::new_allocator<int>' lvalue <UncheckedDerivedToBase (new_allocator)>
  |   `-DeclRefExpr 0x8156e98 'allocator_type':'class std::allocator<int>' lvalue ParmVar 0x8130430 '__a' 'allocator_type &'
  |-ImplicitCastExpr 0x8156f78 'pointer':'int *' <LValueToRValue>
  | `-DeclRefExpr 0x8156ee8 'pointer':'int *' lvalue ParmVar 0x81304a8 '__p' 'pointer':'int *'
  `-ImplicitCastExpr 0x8156f90 'size_type':'unsigned long' <LValueToRValue>
    `-DeclRefExpr 0x8156f08 'size_type':'unsigned long' lvalue ParmVar 0x8130510 '__n' 'size_type':'unsigned long'
Emitting fn: _ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_
construct
CompoundStmt 0x81afde8
`-CXXNewExpr 0x81afda0 'int *' global Function 0x7f794a8 'operator new' 'void *(std::size_t, void *) noexcept'
  |-ImplicitCastExpr 0x81afd88 'int' <LValueToRValue>
  | `-CallExpr 0x81af938 'const int' lvalue
  |   |-ImplicitCastExpr 0x81af920 'const int &(*)(typename std::remove_reference<const int &>::type &) noexcept' <BuiltinFnToFnPtr>
  |   | `-DeclRefExpr 0x81af8b8 '<builtin fn type>' Function 0x81ae6b0 'forward' 'const int &(typename std::remove_reference<const int &>::type &) noexcept' (FunctionTemplate 0x7d9e798 'forward')
  |   `-DeclRefExpr 0x81af4c0 'const int' lvalue ParmVar 0x81aee08 '__args' 'const int &'
  `-CStyleCastExpr 0x81af408 'void *' <NoOp>
    `-ImplicitCastExpr 0x81af3f0 'void *' <BitCast> part_of_explicit_cast
      `-ImplicitCastExpr 0x81af3d8 'int *' <LValueToRValue> part_of_explicit_cast
        `-DeclRefExpr 0x81af3b8 'int *' lvalue ParmVar 0x81aed38 '__p' 'int *'
Emitting fn: _ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc
_M_check_len
CompoundStmt 0x81b8ca8
|-IfStmt 0x81b8268
| |-BinaryOperator 0x81b81b0 '_Bool' '<'
| | |-BinaryOperator 0x81b8158 'size_type':'unsigned long' '-'
| | | |-CXXMemberCallExpr 0x81b80d8 'size_type':'unsigned long'
| | | | `-MemberExpr 0x81b80a8 '<bound member function type>' ->max_size 0x81437e0
| | | |   `-CXXThisExpr 0x81b8098 'const class std::vector<int> *' implicit this
| | | `-CXXMemberCallExpr 0x81b8138 'size_type':'unsigned long'
| | |   `-MemberExpr 0x81b8108 '<bound member function type>' ->size 0x8143728
| | |     `-CXXThisExpr 0x81b80f8 'const class std::vector<int> *' implicit this
| | `-ImplicitCastExpr 0x81b8198 'size_type':'unsigned long' <LValueToRValue>
| |   `-DeclRefExpr 0x81b8178 'size_type':'unsigned long' lvalue ParmVar 0x814dc50 '__n' 'size_type':'unsigned long'
| `-CallExpr 0x81b8228 'void'
|   |-ImplicitCastExpr 0x81b8210 'void (*)(const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x8048688 'void (const char *) __attribute__((noreturn))' lvalue Function 0x7cc7180 '__throw_length_error' 'void (const char *) __attribute__((noreturn))'
|   `-ImplicitCastExpr 0x81b8250 'const char *' <LValueToRValue>
|     `-ParenExpr 0x81b81f0 'const char *' lvalue
|       `-DeclRefExpr 0x81b81d0 'const char *' lvalue ParmVar 0x814dcb8 '__s' 'const char *'
|-DeclStmt 0x81b8938
| `-VarDecl 0x81b8288  used __len 'const size_type':'const unsigned long' cinit
|   `-ExprWithCleanups 0x81b88c8 'unsigned long'
|     `-BinaryOperator 0x81b88a8 'unsigned long' '+'
|       |-CXXMemberCallExpr 0x81b8380 'size_type':'unsigned long'
|       | `-MemberExpr 0x81b8350 '<bound member function type>' ->size 0x8143728
|       |   `-CXXThisExpr 0x81b8340 'const class std::vector<int> *' implicit this
|       `-ImplicitCastExpr 0x81b8890 'unsigned long':'unsigned long' <LValueToRValue>
|         `-CallExpr 0x81b8830 'const unsigned long':'const unsigned long' lvalue
|           |-ImplicitCastExpr 0x81b8818 'const unsigned long &(*)(const unsigned long &, const unsigned long &)' <FunctionToPointerDecay>
|           | `-ParenExpr 0x81b87d0 'const unsigned long &(const unsigned long &, const unsigned long &)' lvalue
|           |   `-DeclRefExpr 0x81b8798 'const unsigned long &(const unsigned long &, const unsigned long &)' lvalue Function 0x81b8688 'max' 'const unsigned long &(const unsigned long &, const unsigned long &)' (FunctionTemplate 0x7f0b2c0 'max')
|           |-MaterializeTemporaryExpr 0x81b8860 'const unsigned long':'const unsigned long' lvalue
|           | `-CXXMemberCallExpr 0x81b8450 'size_type':'unsigned long'
|           |   `-MemberExpr 0x81b8420 '<bound member function type>' ->size 0x8143728
|           |     `-CXXThisExpr 0x81b8410 'const class std::vector<int> *' implicit this
|           `-ImplicitCastExpr 0x81b8878 'const unsigned long':'const unsigned long' lvalue <NoOp>
|             `-DeclRefExpr 0x81b8470 'size_type':'unsigned long' lvalue ParmVar 0x814dc50 '__n' 'size_type':'unsigned long'
`-ReturnStmt 0x81b8c98
  `-ConditionalOperator 0x81b8c68 'size_type':'unsigned long'
    |-ParenExpr 0x81b8bb0 '_Bool'
    | `-BinaryOperator 0x81b8b90 '_Bool' '||'
    |   |-BinaryOperator 0x81b8a50 '_Bool' '<'
    |   | |-ImplicitCastExpr 0x81b8a38 'size_type':'unsigned long' <LValueToRValue>
    |   | | `-DeclRefExpr 0x81b89b8 'const size_type':'const unsigned long' lvalue Var 0x81b8288 '__len' 'const size_type':'const unsigned long'
    |   | `-CXXMemberCallExpr 0x81b8a18 'size_type':'unsigned long'
    |   |   `-MemberExpr 0x81b89e8 '<bound member function type>' ->size 0x8143728
    |   |     `-CXXThisExpr 0x81b89d8 'const class std::vector<int> *' implicit this
    |   `-BinaryOperator 0x81b8b70 '_Bool' '>'
    |     |-ImplicitCastExpr 0x81b8b58 'size_type':'unsigned long' <LValueToRValue>
    |     | `-DeclRefExpr 0x81b8ad8 'const size_type':'const unsigned long' lvalue Var 0x81b8288 '__len' 'const size_type':'const unsigned long'
    |     `-CXXMemberCallExpr 0x81b8b38 'size_type':'unsigned long'
    |       `-MemberExpr 0x81b8b08 '<bound member function type>' ->max_size 0x81437e0
    |         `-CXXThisExpr 0x81b8af8 'const class std::vector<int> *' implicit this
    |-CXXMemberCallExpr 0x81b8c10 'size_type':'unsigned long'
    | `-MemberExpr 0x81b8be0 '<bound member function type>' ->max_size 0x81437e0
    |   `-CXXThisExpr 0x81b8bd0 'const class std::vector<int> *' implicit this
    `-ImplicitCastExpr 0x81b8c50 'size_type':'unsigned long' <LValueToRValue>
      `-DeclRefExpr 0x81b8c30 'const size_type':'const unsigned long' lvalue Var 0x81b8288 '__len' 'const size_type':'const unsigned long'
cleanup of materialized not handledBinaryOperator 0x81b88a8 'unsigned long' '+'
|-CXXMemberCallExpr 0x81b8380 'size_type':'unsigned long'
| `-MemberExpr 0x81b8350 '<bound member function type>' ->size 0x8143728
|   `-CXXThisExpr 0x81b8340 'const class std::vector<int> *' implicit this
`-ImplicitCastExpr 0x81b8890 'unsigned long':'unsigned long' <LValueToRValue>
  `-CallExpr 0x81b8830 'const unsigned long':'const unsigned long' lvalue
    |-ImplicitCastExpr 0x81b8818 'const unsigned long &(*)(const unsigned long &, const unsigned long &)' <FunctionToPointerDecay>
    | `-ParenExpr 0x81b87d0 'const unsigned long &(const unsigned long &, const unsigned long &)' lvalue
    |   `-DeclRefExpr 0x81b8798 'const unsigned long &(const unsigned long &, const unsigned long &)' lvalue Function 0x81b8688 'max' 'const unsigned long &(const unsigned long &, const unsigned long &)' (FunctionTemplate 0x7f0b2c0 'max')
    |-MaterializeTemporaryExpr 0x81b8860 'const unsigned long':'const unsigned long' lvalue
    | `-CXXMemberCallExpr 0x81b8450 'size_type':'unsigned long'
    |   `-MemberExpr 0x81b8420 '<bound member function type>' ->size 0x8143728
    |     `-CXXThisExpr 0x81b8410 'const class std::vector<int> *' implicit this
    `-ImplicitCastExpr 0x81b8878 'const unsigned long':'const unsigned long' lvalue <NoOp>
      `-DeclRefExpr 0x81b8470 'size_type':'unsigned long' lvalue ParmVar 0x814dc50 '__n' 'size_type':'unsigned long'
cleanup not handled
Emitting fn: _ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_
operator-
CompoundStmt 0x81b9318
`-ReturnStmt 0x81b9308
  `-BinaryOperator 0x81b92e8 'long' '-'
    |-ImplicitCastExpr 0x81b92b8 'int *':'int *' <LValueToRValue>
    | `-CXXMemberCallExpr 0x81b91d0 'int *const':'int *const' lvalue
    |   `-MemberExpr 0x81b91a0 '<bound member function type>' .base 0x81ac330
    |     `-DeclRefExpr 0x81b9180 'const __normal_iterator<int *, vector<int, allocator<int> > >':'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81b13b8 '__lhs' 'const __normal_iterator<int *, vector<int, allocator<int> > > &'
    `-ImplicitCastExpr 0x81b92d0 'int *':'int *' <LValueToRValue>
      `-CXXMemberCallExpr 0x81b9268 'int *const':'int *const' lvalue
        `-MemberExpr 0x81b9238 '<bound member function type>' .base 0x81ac330
          `-DeclRefExpr 0x81b9218 'const __normal_iterator<int *, vector<int, allocator<int> > >':'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' lvalue ParmVar 0x81b1528 '__rhs' 'const __normal_iterator<int *, vector<int, allocator<int> > > &'
Emitting fn: _ZNSt6vectorIiSaIiEE5beginEv
begin
CompoundStmt 0x81b9118
`-ReturnStmt 0x81b9108
  `-ExprWithCleanups 0x81b90f0 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >'
    `-CXXConstructExpr 0x81b90c0 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > &&) noexcept' elidable
      `-MaterializeTemporaryExpr 0x81b90a8 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' xvalue
        `-CXXFunctionalCastExpr 0x81b9040 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' functional cast to iterator <ConstructorConversion>
          `-CXXConstructExpr 0x81b9010 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (int *const &) noexcept'
            `-ImplicitCastExpr 0x81b8ff8 'int *const':'int *const' lvalue <NoOp>
              `-MemberExpr 0x81b8f38 'pointer':'int *' lvalue ._M_start 0x8137870
                `-ImplicitCastExpr 0x81b8f18 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
                  `-MemberExpr 0x81b8ed0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
                    `-ImplicitCastExpr 0x81b8eb0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
                      `-CXXThisExpr 0x81b8ea0 'class std::vector<int> *' this
CXXConstructExpr 0x81b90c0 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > &&) noexcept' elidable
`-MaterializeTemporaryExpr 0x81b90a8 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' xvalue
  `-CXXFunctionalCastExpr 0x81b9040 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' functional cast to iterator <ConstructorConversion>
    `-CXXConstructExpr 0x81b9010 'iterator':'class __gnu_cxx::__normal_iterator<int *, class std::vector<int> >' 'void (int *const &) noexcept'
      `-ImplicitCastExpr 0x81b8ff8 'int *const':'int *const' lvalue <NoOp>
        `-MemberExpr 0x81b8f38 'pointer':'int *' lvalue ._M_start 0x8137870
          `-ImplicitCastExpr 0x81b8f18 'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl_data' lvalue <UncheckedDerivedToBase (_Vector_impl_data)>
            `-MemberExpr 0x81b8ed0 '_Vector_impl':'struct std::_Vector_base<int, class std::allocator<int> >::_Vector_impl' lvalue ->_M_impl 0x81397c0
              `-ImplicitCastExpr 0x81b8eb0 'struct std::_Vector_base<int, class std::allocator<int> > *' <UncheckedDerivedToBase (_Vector_base)>
                `-CXXThisExpr 0x81b8ea0 'class std::vector<int> *' this
cleanup not handled
Emitting fn: _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv
base
CompoundStmt 0x81b9380
`-ReturnStmt 0x81b9370
  `-MemberExpr 0x81b9340 'int *const':'int *const' lvalue ->_M_current 0x81a9e28
    `-CXXThisExpr 0x81b9330 'const class __gnu_cxx::__normal_iterator<int *, class std::vector<int> > *' implicit this
Emitting fn: _ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_
__uninitialized_move_if_noexcept_a
CompoundStmt 0x81ba888
`-ReturnStmt 0x81ba878
  `-ExprWithCleanups 0x81ba860 'int *':'int *'
    `-CallExpr 0x81ba6f8 'int *':'int *'
      |-ImplicitCastExpr 0x81ba6e0 'int *(*)(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x81ba6a8 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' lvalue Function 0x8194028 '__uninitialized_copy_a' 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' (FunctionTemplate 0x7fd8f90 '__uninitialized_copy_a')
      |-CXXConstructExpr 0x81ba790 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
      | `-MaterializeTemporaryExpr 0x81ba778 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
      |   `-CallExpr 0x81b9c60 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
      |     |-ImplicitCastExpr 0x81b9c48 'class std::move_iterator<int *> (*)(int *)' <FunctionToPointerDecay>
      |     | `-DeclRefExpr 0x81b9c10 'class std::move_iterator<int *> (int *)' lvalue Function 0x8188148 '__make_move_if_noexcept_iterator' 'class std::move_iterator<int *> (int *)' (FunctionTemplate 0x7ce02a0 '__make_move_if_noexcept_iterator')
      |     `-ImplicitCastExpr 0x81b9c88 'int *':'int *' <LValueToRValue>
      |       `-DeclRefExpr 0x81b9438 'int *':'int *' lvalue ParmVar 0x81b34c8 '__first' 'int *':'int *'
      |-CXXConstructExpr 0x81ba818 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
      | `-MaterializeTemporaryExpr 0x81ba800 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
      |   `-CallExpr 0x81ba510 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
      |     |-ImplicitCastExpr 0x81ba4f8 'class std::move_iterator<int *> (*)(int *)' <FunctionToPointerDecay>
      |     | `-DeclRefExpr 0x81ba4c0 'class std::move_iterator<int *> (int *)' lvalue Function 0x8188148 '__make_move_if_noexcept_iterator' 'class std::move_iterator<int *> (int *)' (FunctionTemplate 0x7ce02a0 '__make_move_if_noexcept_iterator')
      |     `-ImplicitCastExpr 0x81ba538 'int *':'int *' <LValueToRValue>
      |       `-DeclRefExpr 0x81b9cf0 'int *':'int *' lvalue ParmVar 0x81b3540 '__last' 'int *':'int *'
      |-ImplicitCastExpr 0x81ba848 'int *':'int *' <LValueToRValue>
      | `-DeclRefExpr 0x81ba550 'int *':'int *' lvalue ParmVar 0x81b35b8 '__result' 'int *':'int *'
      `-DeclRefExpr 0x81ba570 'class std::allocator<int>':'class std::allocator<int>' lvalue ParmVar 0x81b3688 '__alloc' 'class std::allocator<int> &'
CallExpr 0x81ba6f8 'int *':'int *'
|-ImplicitCastExpr 0x81ba6e0 'int *(*)(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x81ba6a8 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' lvalue Function 0x8194028 '__uninitialized_copy_a' 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *, allocator<int> &)' (FunctionTemplate 0x7fd8f90 '__uninitialized_copy_a')
|-CXXConstructExpr 0x81ba790 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
| `-MaterializeTemporaryExpr 0x81ba778 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
|   `-CallExpr 0x81b9c60 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
|     |-ImplicitCastExpr 0x81b9c48 'class std::move_iterator<int *> (*)(int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x81b9c10 'class std::move_iterator<int *> (int *)' lvalue Function 0x8188148 '__make_move_if_noexcept_iterator' 'class std::move_iterator<int *> (int *)' (FunctionTemplate 0x7ce02a0 '__make_move_if_noexcept_iterator')
|     `-ImplicitCastExpr 0x81b9c88 'int *':'int *' <LValueToRValue>
|       `-DeclRefExpr 0x81b9438 'int *':'int *' lvalue ParmVar 0x81b34c8 '__first' 'int *':'int *'
|-CXXConstructExpr 0x81ba818 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (class std::move_iterator<int *> &&) noexcept' elidable
| `-MaterializeTemporaryExpr 0x81ba800 'class std::move_iterator<int *>':'class std::move_iterator<int *>' xvalue
|   `-CallExpr 0x81ba510 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
|     |-ImplicitCastExpr 0x81ba4f8 'class std::move_iterator<int *> (*)(int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x81ba4c0 'class std::move_iterator<int *> (int *)' lvalue Function 0x8188148 '__make_move_if_noexcept_iterator' 'class std::move_iterator<int *> (int *)' (FunctionTemplate 0x7ce02a0 '__make_move_if_noexcept_iterator')
|     `-ImplicitCastExpr 0x81ba538 'int *':'int *' <LValueToRValue>
|       `-DeclRefExpr 0x81b9cf0 'int *':'int *' lvalue ParmVar 0x81b3540 '__last' 'int *':'int *'
|-ImplicitCastExpr 0x81ba848 'int *':'int *' <LValueToRValue>
| `-DeclRefExpr 0x81ba550 'int *':'int *' lvalue ParmVar 0x81b35b8 '__result' 'int *':'int *'
`-DeclRefExpr 0x81ba570 'class std::allocator<int>':'class std::allocator<int>' lvalue ParmVar 0x81b3688 '__alloc' 'class std::allocator<int> &'
cleanup not handled
Emitting fn: _ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_
__normal_iterator
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x81a9e28 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_iterator.h:787:7, col:17> col:17 referenced _M_current 'int *':'int *'
ImplicitCastExpr 0x81b00f8 'int *':'int *' <LValueToRValue>
`-DeclRefExpr 0x81b00b8 'int *const':'int *const' lvalue ParmVar 0x81aa5b8 '__i' 'int *const &'
CompoundStmt 0x7ec6f60
Emitting fn: _ZNSaIiEC1Ev
allocator
 init: - baseInit:1 memberInit:0 anyMember:0 indirectMember:0 isinClass:0 delegating:0 isPack:0
CXXConstructExpr 0x8153168 '__allocator_base<int>':'class __gnu_cxx::new_allocator<int>' 'void (void) noexcept'
CompoundStmt 0x7f8aa88
Emitting fn: _ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev
_Vector_impl_data
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x8137870 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_vector.h:90:2, col:10> col:10 referenced _M_start 'pointer':'int *'
ImplicitValueInitExpr 0x8153200 'pointer':'int *'
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x81378d0 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_vector.h:91:2, col:10> col:10 referenced _M_finish 'pointer':'int *'
ImplicitValueInitExpr 0x8153248 'pointer':'int *'
 init: - baseInit:0 memberInit:1 anyMember:1 indirectMember:0 isinClass:0 delegating:0 isPack:0
FieldDecl 0x8137930 </usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_vector.h:92:2, col:10> col:10 referenced _M_end_of_storage 'pointer':'int *'
ImplicitValueInitExpr 0x8153290 'pointer':'int *'
CompoundStmt 0x8002700
Emitting fn: _ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_
max_size
CompoundStmt 0x818f118
`-ReturnStmt 0x818f108
  `-CXXMemberCallExpr 0x818f0a0 'size_type':'unsigned long'
    `-MemberExpr 0x818f070 '<bound member function type>' .max_size 0x812c030
      `-ImplicitCastExpr 0x818f0e8 'const class __gnu_cxx::new_allocator<int>' lvalue <UncheckedDerivedToBase (new_allocator)>
        `-DeclRefExpr 0x818f050 'const allocator_type':'const class std::allocator<int>' lvalue ParmVar 0x81311d0 '__a' 'const allocator_type &'
Emitting fn: _ZSt3minImERKT_S2_S2_
min
CompoundStmt 0x818f360
|-IfStmt 0x818f310
| |-BinaryOperator 0x818f2c0 '_Bool' '<'
| | |-ImplicitCastExpr 0x818f290 'unsigned long':'unsigned long' <LValueToRValue>
| | | `-DeclRefExpr 0x818f250 'const unsigned long':'const unsigned long' lvalue ParmVar 0x7f36440 '__b' 'const unsigned long &'
| | `-ImplicitCastExpr 0x818f2a8 'unsigned long':'unsigned long' <LValueToRValue>
| |   `-DeclRefExpr 0x818f270 'const unsigned long':'const unsigned long' lvalue ParmVar 0x7f363c8 '__a' 'const unsigned long &'
| `-ReturnStmt 0x818f300
|   `-DeclRefExpr 0x818f2e0 'const unsigned long':'const unsigned long' lvalue ParmVar 0x7f36440 '__b' 'const unsigned long &'
`-ReturnStmt 0x818f350
  `-DeclRefExpr 0x818f330 'const unsigned long':'const unsigned long' lvalue ParmVar 0x7f363c8 '__a' 'const unsigned long &'
Emitting fn: _ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv
allocate
CompoundStmt 0x818ff48
|-IfStmt 0x818fe10
| |-BinaryOperator 0x818fdb8 '_Bool' '>'
| | |-ImplicitCastExpr 0x818fda0 'size_type':'unsigned long' <LValueToRValue>
| | | `-DeclRefExpr 0x818fd08 'size_type':'unsigned long' lvalue ParmVar 0x812bba0 '__n' 'size_type':'unsigned long'
| | `-CXXMemberCallExpr 0x818fd68 'size_type':'unsigned long'
| |   `-MemberExpr 0x818fd38 '<bound member function type>' ->max_size 0x812c030
| |     `-ImplicitCastExpr 0x818fd88 'const class __gnu_cxx::new_allocator<int> *' <NoOp>
| |       `-CXXThisExpr 0x818fd28 'class __gnu_cxx::new_allocator<int> *' this
| `-CallExpr 0x818fdf0 'void'
|   `-ImplicitCastExpr 0x818fdd8 'void (*)(void) __attribute__((noreturn))' <FunctionToPointerDecay>
|     `-DeclRefExpr 0x7f7fe90 'void (void) __attribute__((noreturn))' lvalue Function 0x7c820f8 '__throw_bad_alloc' 'void (void) __attribute__((noreturn))'
`-ReturnStmt 0x818ff38
  `-CXXStaticCastExpr 0x818ff08 'int *' static_cast<int *> <BitCast>
    `-CallExpr 0x818fee0 'void *'
      |-ImplicitCastExpr 0x818fec8 'void *(*)(std::size_t)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x7f80030 'void *(std::size_t)' lvalue Function 0x7f77e90 'operator new' 'void *(std::size_t)'
      `-BinaryOperator 0x818fea8 'unsigned long' '*'
        |-ImplicitCastExpr 0x818fe90 'size_type':'unsigned long' <LValueToRValue>
        | `-DeclRefExpr 0x818fe40 'size_type':'unsigned long' lvalue ParmVar 0x812bba0 '__n' 'size_type':'unsigned long'
        `-UnaryExprOrTypeTraitExpr 0x818fe70 'unsigned long' sizeof 'int':'int'
Emitting fn: _ZSt12__relocate_aIPiS0_SaIiEET0_T_S3_S2_RT1_
__relocate_a
CompoundStmt 0x8190fe0
`-ReturnStmt 0x8190fd0
  `-CallExpr 0x8190f90 '__enable_if_t<std::__is_bitwise_relocatable<int>::value, int *>':'int *'
    |-ImplicitCastExpr 0x8190f78 '__enable_if_t<std::__is_bitwise_relocatable<int>::value, int *> (*)(int *, int *, int *, allocator<int> &) noexcept' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x8190f50 '__enable_if_t<std::__is_bitwise_relocatable<int>::value, int *> (int *, int *, int *, allocator<int> &) noexcept' lvalue Function 0x817f048 '__relocate_a_1' '__enable_if_t<std::__is_bitwise_relocatable<int>::value, int *> (int *, int *, int *, allocator<int> &) noexcept' (FunctionTemplate 0x7ff5f30 '__relocate_a_1')
    |-CallExpr 0x8190a48 'int *':'int *'
    | |-ImplicitCastExpr 0x8190a30 'int *(*)(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x81909f8 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' lvalue Function 0x8173678 '__niter_base' 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' (FunctionTemplate 0x7f0d300 '__niter_base')
    | `-ImplicitCastExpr 0x8190a70 'int *':'int *' <LValueToRValue>
    |   `-DeclRefExpr 0x8190910 'int *':'int *' lvalue ParmVar 0x8172ef8 '__first' 'int *':'int *'
    |-CallExpr 0x8190c20 'int *':'int *'
    | |-ImplicitCastExpr 0x8190c08 'int *(*)(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x8190bd0 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' lvalue Function 0x8173678 '__niter_base' 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' (FunctionTemplate 0x7f0d300 '__niter_base')
    | `-ImplicitCastExpr 0x8190c48 'int *':'int *' <LValueToRValue>
    |   `-DeclRefExpr 0x8190ae8 'int *':'int *' lvalue ParmVar 0x8172f70 '__last' 'int *':'int *'
    |-CallExpr 0x8190df8 'int *':'int *'
    | |-ImplicitCastExpr 0x8190de0 'int *(*)(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x8190da8 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' lvalue Function 0x8173678 '__niter_base' 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' (FunctionTemplate 0x7f0d300 '__niter_base')
    | `-ImplicitCastExpr 0x8190e20 'int *':'int *' <LValueToRValue>
    |   `-DeclRefExpr 0x8190cc0 'int *':'int *' lvalue ParmVar 0x8172fe8 '__result' 'int *':'int *'
    `-DeclRefExpr 0x8190e38 'class std::allocator<int>':'class std::allocator<int>' lvalue ParmVar 0x81730b8 '__alloc' 'class std::allocator<int> &'
Emitting fn: _ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_
uninitialized_copy
CompoundStmt 0x8197ca8
|-DeclStmt 0x8195e28
| `-TypedefDecl 0x8195dd0  referenced _ValueType1 'typename iterator_traits<class move_iterator<int *> >::value_type':'int'
|   `-ElaboratedType 0x8195d80 'typename iterator_traits<class move_iterator<int *> >::value_type' sugar
|     `-TypedefType 0x8195d50 'std::__iterator_traits<class std::move_iterator<int *> >::value_type' sugar
|       |-Typedef 0x8195990 'value_type'
|       `-ElaboratedType 0x8195940 'typename class move_iterator<int *>::value_type' sugar
|         `-TypedefType 0x8195390 'std::move_iterator<int *>::value_type' sugar
|           |-Typedef 0x8188930 'value_type'
|           `-ElaboratedType 0x81888e0 'typename __traits_type::value_type' sugar
|             `-TypedefType 0x81589a0 'std::iterator_traits<int *>::value_type' sugar
|               |-Typedef 0x81587a8 'value_type'
|               `-SubstTemplateTypeParmType 0x8158770 'int' sugar typename depth 0 index 0 _Tp
|                 |-ClassTemplateSpecialization 0x8158398 'iterator_traits'
|                 `-BuiltinType 0x7c36430 'int'
|-DeclStmt 0x8195fb8
| `-TypedefDecl 0x8195f60  referenced _ValueType2 'typename iterator_traits<int *>::value_type':'int'
|   `-ElaboratedType 0x8195f10 'typename iterator_traits<int *>::value_type' sugar
|     `-TypedefType 0x81589a0 'std::iterator_traits<int *>::value_type' sugar
|       |-Typedef 0x81587a8 'value_type'
|       `-SubstTemplateTypeParmType 0x8158770 'int' sugar typename depth 0 index 0 _Tp
|         |-ClassTemplateSpecialization 0x8158398 'iterator_traits'
|         `-BuiltinType 0x7c36430 'int'
|-DeclStmt 0x8196330
| `-StaticAssertDecl 0x81962f0 
|   |-ImplicitCastExpr 0x81962b8 '_Bool':'_Bool' <LValueToRValue>
|   | `-DeclRefExpr 0x8196288 'const _Bool':'const _Bool' lvalue Var 0x7de3ee8 'value' 'const _Bool':'const _Bool' non_odr_use_constant
|   `-StringLiteral 0x7fd0878 'const char[65]' lvalue "result type must be constructible from value type of input range"
|-DeclStmt 0x81964c8
| `-TypedefDecl 0x8196470  referenced _RefType1 'typename iterator_traits<class move_iterator<int *> >::reference':'int &&'
|   `-ElaboratedType 0x8196420 'typename iterator_traits<class move_iterator<int *> >::reference' sugar
|     `-TypedefType 0x81963f0 'std::__iterator_traits<class std::move_iterator<int *> >::reference' sugar
|       |-Typedef 0x8195c00 'reference'
|       `-ElaboratedType 0x8195bb0 'typename class move_iterator<int *>::reference' sugar
|         `-TypedefType 0x818b140 'std::move_iterator<int *>::reference' sugar
|           |-Typedef 0x818a880 'reference'
|           `-ElaboratedType 0x818a830 'typename conditional<is_reference<__base_ref>::value, typename remove_reference<__base_ref>::type &&, __base_ref>::type' sugar
|             `-TypedefType 0x818a800 'std::conditional<true, int &&, int &>::type' sugar
|               |-Typedef 0x818a788 'type'
|               `-SubstTemplateTypeParmType 0x818a750 'int &&' sugar typename depth 0 index 1 _Iftrue
|                 |-ClassTemplateSpecialization 0x818a428 'conditional'
|                 `-RValueReferenceType 0x81455f0 'int &&'
|                   `-BuiltinType 0x7c36430 'int'
|-DeclStmt 0x8196628
| `-TypedefDecl 0x81965d0  referenced _RefType2 'typename iterator_traits<int *>::reference':'int &'
|   `-ElaboratedType 0x8196580 'typename iterator_traits<int *>::reference' sugar
|     `-TypedefType 0x8188650 'std::iterator_traits<int *>::reference' sugar
|       |-Typedef 0x8158928 'reference'
|       `-LValueReferenceType 0x81588f0 'int &'
|         `-SubstTemplateTypeParmType 0x8158770 'int' sugar typename depth 0 index 0 _Tp
|           |-ClassTemplateSpecialization 0x8158398 'iterator_traits'
|           `-BuiltinType 0x7c36430 'int'
|-DeclStmt 0x8196e78
| `-VarDecl 0x8196640  referenced __assignable 'const _Bool' cinit
|   `-ImplicitCastExpr 0x8196e08 '_Bool':'_Bool' <LValueToRValue>
|     `-DeclRefExpr 0x8196dd8 'const _Bool':'const _Bool' lvalue Var 0x7de3ee8 'value' 'const _Bool':'const _Bool' non_odr_use_constant
`-ReturnStmt 0x8197c98
  `-CallExpr 0x8197600 'int *':'int *'
    |-ImplicitCastExpr 0x81975e8 'int *(*)(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x8197588 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' lvalue CXXMethod 0x8197458 '__uninit_copy' 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' (FunctionTemplate 0x7fcfc20 '__uninit_copy')
    |-CXXConstructExpr 0x8197bc8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
    | `-ImplicitCastExpr 0x8197678 'const class std::move_iterator<int *>' lvalue <NoOp>
    |   `-DeclRefExpr 0x81970e8 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x8194838 '__first' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    |-CXXConstructExpr 0x8197c50 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
    | `-ImplicitCastExpr 0x8197c38 'const class std::move_iterator<int *>' lvalue <NoOp>
    |   `-DeclRefExpr 0x8197108 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x81948b0 '__last' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    `-ImplicitCastExpr 0x8197c80 'int *':'int *' <LValueToRValue>
      `-DeclRefExpr 0x8197128 'int *':'int *' lvalue ParmVar 0x8194928 '__result' 'int *':'int *'
Emitting fn: _ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_
__destroy
CompoundStmt 0x7fca290
Emitting fn: _ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim
deallocate
CompoundStmt 0x81570d8
`-CallExpr 0x8157080 'void'
  |-ImplicitCastExpr 0x8157068 'void (*)(void *) noexcept' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x8157038 'void (void *) noexcept' lvalue Function 0x7f782e8 'operator delete' 'void (void *) noexcept'
  `-ImplicitCastExpr 0x81570c0 'void *' <BitCast>
    `-ImplicitCastExpr 0x81570a8 'pointer':'int *' <LValueToRValue>
      `-DeclRefExpr 0x8157018 'pointer':'int *' lvalue ParmVar 0x812bdf0 '__p' 'pointer':'int *'
Emitting fn: _ZSt3maxImERKT_S2_S2_
max
CompoundStmt 0x81b8e70
|-IfStmt 0x81b8e20
| |-BinaryOperator 0x81b8dd0 '_Bool' '<'
| | |-ImplicitCastExpr 0x81b8da0 'unsigned long':'unsigned long' <LValueToRValue>
| | | `-DeclRefExpr 0x81b8d38 'const unsigned long':'const unsigned long' lvalue ParmVar 0x81b8538 '__a' 'const unsigned long &'
| | `-ImplicitCastExpr 0x81b8db8 'unsigned long':'unsigned long' <LValueToRValue>
| |   `-DeclRefExpr 0x81b8d80 'const unsigned long':'const unsigned long' lvalue ParmVar 0x81b85b0 '__b' 'const unsigned long &'
| `-ReturnStmt 0x81b8e10
|   `-DeclRefExpr 0x81b8df0 'const unsigned long':'const unsigned long' lvalue ParmVar 0x81b85b0 '__b' 'const unsigned long &'
`-ReturnStmt 0x81b8e60
  `-DeclRefExpr 0x81b8e40 'const unsigned long':'const unsigned long' lvalue ParmVar 0x81b8538 '__a' 'const unsigned long &'
Emitting fn: _ZN9__gnu_cxx13new_allocatorIiEC1Ev
new_allocator
CompoundStmt 0x7f7fb30
Emitting fn: _ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv
max_size
CompoundStmt 0x818f1d0
`-ReturnStmt 0x818f1c0
  `-BinaryOperator 0x818f1a0 'unsigned long' '/'
    |-CXXFunctionalCastExpr 0x818f148 'size_t':'unsigned long' functional cast to size_t <NoOp>
    | `-ImplicitCastExpr 0x818f130 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
    |   `-IntegerLiteral 0x7f83460 'long' 9223372036854775807
    `-UnaryExprOrTypeTraitExpr 0x818f180 'unsigned long' sizeof 'int':'int'
Emitting fn: _ZSt14__relocate_a_1IiiENSt9enable_ifIXsr3std24__is_bitwise_relocatableIT_EE5valueEPS1_E4typeES2_S2_S2_RSaIT0_E
__relocate_a_1
CompoundStmt 0x8191588
|-DeclStmt 0x81911a0
| `-VarDecl 0x8191058  used __count 'ptrdiff_t':'long' cinit
|   `-BinaryOperator 0x8191180 'long' '-'
|     |-ImplicitCastExpr 0x8191150 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x8191110 'int *' lvalue ParmVar 0x817ed48 '__last' 'int *'
|     `-ImplicitCastExpr 0x8191168 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x8191130 'int *' lvalue ParmVar 0x817ecd0 '__first' 'int *'
|-IfStmt 0x8191478
| |-BinaryOperator 0x8191208 '_Bool' '>'
| | |-ImplicitCastExpr 0x81911d8 'ptrdiff_t':'long' <LValueToRValue>
| | | `-DeclRefExpr 0x81911b8 'ptrdiff_t':'long' lvalue Var 0x8191058 '__count' 'ptrdiff_t':'long'
| | `-ImplicitCastExpr 0x81911f0 'ptrdiff_t':'long' <IntegralCast>
| |   `-IntegerLiteral 0x7ff6198 'int' 0
| `-CallExpr 0x81913e0 'void *'
|   |-ImplicitCastExpr 0x81913c8 'void *(*)(void *, const void *, unsigned long) noexcept' <BuiltinFnToFnPtr>
|   | `-DeclRefExpr 0x7ff6208 '<builtin fn type>' Function 0x7f134e0 '__builtin_memmove' 'void *(void *, const void *, unsigned long) noexcept'
|   |-ImplicitCastExpr 0x8191430 'void *' <BitCast>
|   | `-ImplicitCastExpr 0x8191418 'int *' <LValueToRValue>
|   |   `-DeclRefExpr 0x8191228 'int *' lvalue ParmVar 0x817edc0 '__result' 'int *'
|   |-ImplicitCastExpr 0x8191460 'const void *' <BitCast>
|   | `-ImplicitCastExpr 0x8191448 'int *' <LValueToRValue>
|   |   `-DeclRefExpr 0x8191248 'int *' lvalue ParmVar 0x817ecd0 '__first' 'int *'
|   `-BinaryOperator 0x8191318 'unsigned long' '*'
|     |-ImplicitCastExpr 0x8191300 'unsigned long' <IntegralCast>
|     | `-ImplicitCastExpr 0x81912e8 'ptrdiff_t':'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x8191268 'ptrdiff_t':'long' lvalue Var 0x8191058 '__count' 'ptrdiff_t':'long'
|     `-UnaryExprOrTypeTraitExpr 0x81912c8 'unsigned long' sizeof 'int':'int'
`-ReturnStmt 0x8191578
  `-BinaryOperator 0x8191558 'int *' '+'
    |-ImplicitCastExpr 0x8191528 'int *' <LValueToRValue>
    | `-DeclRefExpr 0x81914e8 'int *' lvalue ParmVar 0x817edc0 '__result' 'int *'
    `-ImplicitCastExpr 0x8191540 'ptrdiff_t':'long' <LValueToRValue>
      `-DeclRefExpr 0x8191508 'ptrdiff_t':'long' lvalue Var 0x8191058 '__count' 'ptrdiff_t':'long'
Emitting fn: _ZSt12__niter_baseIPiET_S1_
__niter_base
CompoundStmt 0x8191040
`-ReturnStmt 0x8191030
  `-ImplicitCastExpr 0x8191018 'int *':'int *' <LValueToRValue>
    `-DeclRefExpr 0x8190ff8 'int *':'int *' lvalue ParmVar 0x8173578 '__it' 'int *':'int *'
Emitting fn: _ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_
__uninit_copy
CompoundStmt 0x8198378
`-ReturnStmt 0x8198368
  `-CallExpr 0x81981e0 'int *':'int *'
    |-ImplicitCastExpr 0x81981c8 'int *(*)(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x8198168 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' lvalue Function 0x8198038 'copy' 'int *(class std::move_iterator<int *>, class std::move_iterator<int *>, int *)' (FunctionTemplate 0x7f19c60 'copy')
    |-CXXConstructExpr 0x8198298 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
    | `-ImplicitCastExpr 0x8198258 'const class std::move_iterator<int *>' lvalue <NoOp>
    |   `-DeclRefExpr 0x8197d38 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x8197288 '__first' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    |-CXXConstructExpr 0x8198320 'class std::move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
    | `-ImplicitCastExpr 0x8198308 'const class std::move_iterator<int *>' lvalue <NoOp>
    |   `-DeclRefExpr 0x8197d58 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x8197300 '__last' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    `-ImplicitCastExpr 0x8198350 'int *':'int *' <LValueToRValue>
      `-DeclRefExpr 0x8197d78 'int *':'int *' lvalue ParmVar 0x8197378 '__result' 'int *':'int *'
Emitting fn: _ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_
copy
CompoundStmt 0x819b590
|-NullStmt 0x7f19d48
`-ReturnStmt 0x819b580
  `-CallExpr 0x819b530 'int *':'int *'
    |-ImplicitCastExpr 0x819b518 'int *(*)(int *, int *, int *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x819b450 'int *(int *, int *, int *)' lvalue Function 0x819b308 '__copy_move_a2' 'int *(int *, int *, int *)' (FunctionTemplate 0x7f19380 '__copy_move_a2')
    |-CallExpr 0x8199520 'decltype(__miter_base(__it.base()))':'int *'
    | |-ImplicitCastExpr 0x8199508 'auto (*)(move_iterator<int *>) -> decltype(__miter_base(__it.base()))' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x8199470 'auto (move_iterator<int *>) -> decltype(__miter_base(__it.base()))' lvalue Function 0x8199368 '__miter_base' 'auto (move_iterator<int *>) -> decltype(__miter_base(__it.base()))' (FunctionTemplate 0x7ce1680 '__miter_base')
    | `-CXXConstructExpr 0x81995c8 'move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
    |   `-ImplicitCastExpr 0x8199588 'const class std::move_iterator<int *>' lvalue <NoOp>
    |     `-DeclRefExpr 0x8198a90 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x8197e68 '__first' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    |-CallExpr 0x8199768 'decltype(__miter_base(__it.base()))':'int *'
    | |-ImplicitCastExpr 0x8199750 'auto (*)(move_iterator<int *>) -> decltype(__miter_base(__it.base()))' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x8199718 'auto (move_iterator<int *>) -> decltype(__miter_base(__it.base()))' lvalue Function 0x8199368 '__miter_base' 'auto (move_iterator<int *>) -> decltype(__miter_base(__it.base()))' (FunctionTemplate 0x7ce1680 '__miter_base')
    | `-CXXConstructExpr 0x81997e8 'move_iterator<int *>':'class std::move_iterator<int *>' 'void (const class std::move_iterator<int *> &) noexcept'
    |   `-ImplicitCastExpr 0x81997d0 'const class std::move_iterator<int *>' lvalue <NoOp>
    |     `-DeclRefExpr 0x8199650 'class std::move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x8197ee0 '__last' 'class std::move_iterator<int *>':'class std::move_iterator<int *>'
    `-ImplicitCastExpr 0x819b568 'int *':'int *' <LValueToRValue>
      `-DeclRefExpr 0x8199818 'int *':'int *' lvalue ParmVar 0x8197f58 '__result' 'int *':'int *'
Emitting fn: _ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_
__copy_move_a2
CompoundStmt 0x819ec98
`-ReturnStmt 0x819ec88
  `-CallExpr 0x819ec40 'int *':'int *'
    |-ImplicitCastExpr 0x819ec28 'int *(*)(int *const &, int *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x819eb98 'int *(int *const &, int *)' lvalue Function 0x819ea88 '__niter_wrap' 'int *(int *const &, int *)' (FunctionTemplate 0x7f0ddd0 '__niter_wrap')
    |-ImplicitCastExpr 0x819ec70 'int *const':'int *const' lvalue <NoOp>
    | `-DeclRefExpr 0x819b8e8 'int *':'int *' lvalue ParmVar 0x819b1e8 '__result' 'int *':'int *'
    `-CallExpr 0x819e4a0 'int *':'int *'
      |-ImplicitCastExpr 0x819e488 'int *(*)(int *, int *, int *)' <FunctionToPointerDecay>
      | `-DeclRefExpr 0x819e3f0 'int *(int *, int *, int *)' lvalue Function 0x819e2a8 '__copy_move_a' 'int *(int *, int *, int *)' (FunctionTemplate 0x7f145b0 '__copy_move_a')
      |-CallExpr 0x819bb50 'int *':'int *'
      | |-ImplicitCastExpr 0x819bb38 'int *(*)(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x819bb00 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' lvalue Function 0x8173678 '__niter_base' 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' (FunctionTemplate 0x7f0d300 '__niter_base')
      | `-ImplicitCastExpr 0x819bb78 'int *':'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x819ba18 'int *':'int *' lvalue ParmVar 0x819b0f8 '__first' 'int *':'int *'
      |-CallExpr 0x819dc08 'int *':'int *'
      | |-ImplicitCastExpr 0x819dbf0 'int *(*)(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x819dbb8 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' lvalue Function 0x8173678 '__niter_base' 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' (FunctionTemplate 0x7f0d300 '__niter_base')
      | `-ImplicitCastExpr 0x819dc30 'int *':'int *' <LValueToRValue>
      |   `-DeclRefExpr 0x819dad0 'int *':'int *' lvalue ParmVar 0x819b170 '__last' 'int *':'int *'
      `-CallExpr 0x819dde0 'int *':'int *'
        |-ImplicitCastExpr 0x819ddc8 'int *(*)(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x819dd90 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' lvalue Function 0x8173678 '__niter_base' 'int *(int *) noexcept(std::is_nothrow_copy_constructible<int *>::value)' (FunctionTemplate 0x7f0d300 '__niter_base')
        `-ImplicitCastExpr 0x819de08 'int *':'int *' <LValueToRValue>
          `-DeclRefExpr 0x819dca8 'int *':'int *' lvalue ParmVar 0x819b1e8 '__result' 'int *':'int *'
Emitting fn: _ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E
__miter_base
CompoundStmt 0x819b7a0
`-ReturnStmt 0x819b790
  `-CallExpr 0x819b768 'int *':'int *'
    |-ImplicitCastExpr 0x819b750 'int *(*)(int *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x819b728 'int *(int *)' lvalue Function 0x81990d8 '__miter_base' 'int *(int *)' (FunctionTemplate 0x7cf6de0 '__miter_base')
    `-CXXMemberCallExpr 0x819b658 'iterator_type':'int *'
      `-MemberExpr 0x819b628 '<bound member function type>' .base 0x818b088
        `-ImplicitCastExpr 0x819b678 'const class std::move_iterator<int *>' lvalue <NoOp>
          `-DeclRefExpr 0x819b608 'move_iterator<int *>':'class std::move_iterator<int *>' lvalue ParmVar 0x8198e60 '__it' 'move_iterator<int *>':'class std::move_iterator<int *>'
Emitting fn: _ZSt12__niter_wrapIPiET_RKS1_S1_
__niter_wrap
CompoundStmt 0x81a4820
`-ReturnStmt 0x81a4810
  `-ImplicitCastExpr 0x81a47f8 'int *':'int *' <LValueToRValue>
    `-DeclRefExpr 0x81a47d8 'int *':'int *' lvalue ParmVar 0x819e970 '__res' 'int *':'int *'
Emitting fn: _ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_
__copy_move_a
CompoundStmt 0x81a0f80
|-DeclStmt 0x819ee28
| `-TypedefDecl 0x819edd0  referenced _ValueTypeI 'typename iterator_traits<int *>::value_type':'int'
|   `-ElaboratedType 0x819ed80 'typename iterator_traits<int *>::value_type' sugar
|     `-TypedefType 0x81589a0 'std::iterator_traits<int *>::value_type' sugar
|       |-Typedef 0x81587a8 'value_type'
|       `-SubstTemplateTypeParmType 0x8158770 'int' sugar typename depth 0 index 0 _Tp
|         |-ClassTemplateSpecialization 0x8158398 'iterator_traits'
|         `-BuiltinType 0x7c36430 'int'
|-DeclStmt 0x819efb8
| `-TypedefDecl 0x819ef60  referenced _ValueTypeO 'typename iterator_traits<int *>::value_type':'int'
|   `-ElaboratedType 0x819ef10 'typename iterator_traits<int *>::value_type' sugar
|     `-TypedefType 0x81589a0 'std::iterator_traits<int *>::value_type' sugar
|       |-Typedef 0x81587a8 'value_type'
|       `-SubstTemplateTypeParmType 0x8158770 'int' sugar typename depth 0 index 0 _Tp
|         |-ClassTemplateSpecialization 0x8158398 'iterator_traits'
|         `-BuiltinType 0x7c36430 'int'
|-DeclStmt 0x819f118
| `-TypedefDecl 0x819f0c0  referenced _Category 'typename iterator_traits<int *>::iterator_category':'struct std::random_access_iterator_tag'
|   `-ElaboratedType 0x819f070 'typename iterator_traits<int *>::iterator_category' sugar
|     `-TypedefType 0x81887e0 'std::iterator_traits<int *>::iterator_category' sugar
|       |-Typedef 0x8158718 'iterator_category'
|       `-ElaboratedType 0x7e8f6e0 'random_access_iterator_tag' sugar
|         `-RecordType 0x7e89ba0 'struct std::random_access_iterator_tag'
|           `-CXXRecord 0x7e89b08 'random_access_iterator_tag'
|-DeclStmt 0x819ff38
| `-VarDecl 0x819f130  referenced __simple 'const _Bool' cinit
|   `-ParenExpr 0x819fec0 '_Bool'
|     `-BinaryOperator 0x819fea0 '_Bool' '&&'
|       |-BinaryOperator 0x819f890 '_Bool' '&&'
|       | |-BinaryOperator 0x819f790 '_Bool' '&&'
|       | | |-TypeTraitExpr 0x819f210 '_Bool' __is_trivially_copyable
|       | | `-ImplicitCastExpr 0x819f778 '_Bool' <IntegralToBoolean>
|       | |   `-DeclRefExpr 0x819f748 'enum std::__is_pointer<int *>::(unnamed at /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/cpp_type_traits.h:329:7)' EnumConstant 0x819f670 '__value' 'enum std::__is_pointer<int *>::(unnamed at /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/cpp_type_traits.h:329:7)'
|       | `-ImplicitCastExpr 0x819f878 '_Bool' <IntegralToBoolean>
|       |   `-DeclRefExpr 0x819f848 'enum std::__is_pointer<int *>::(unnamed at /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/cpp_type_traits.h:329:7)' EnumConstant 0x819f670 '__value' 'enum std::__is_pointer<int *>::(unnamed at /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/cpp_type_traits.h:329:7)'
|       `-ImplicitCastExpr 0x819fe88 '_Bool' <IntegralToBoolean>
|         `-DeclRefExpr 0x819fe58 'enum std::__are_same<int, int>::(unnamed at /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/cpp_type_traits.h:104:7)' EnumConstant 0x819fd80 '__value' 'enum std::__are_same<int, int>::(unnamed at /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/cpp_type_traits.h:104:7)'
`-ReturnStmt 0x81a0f70
  `-CallExpr 0x81a0ec0 'int *'
    |-ImplicitCastExpr 0x81a0ea8 'int *(*)(const int *, const int *, int *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x81a0e10 'int *(const int *, const int *, int *)' lvalue CXXMethod 0x81a0cf8 '__copy_m' 'int *(const int *, const int *, int *)' (FunctionTemplate 0x81a0860 '__copy_m')
    |-ImplicitCastExpr 0x81a0f10 'const int *' <NoOp>
    | `-ImplicitCastExpr 0x81a0ef8 'int *':'int *' <LValueToRValue>
    |   `-DeclRefExpr 0x81a09a8 'int *':'int *' lvalue ParmVar 0x819e0d8 '__first' 'int *':'int *'
    |-ImplicitCastExpr 0x81a0f40 'const int *' <NoOp>
    | `-ImplicitCastExpr 0x81a0f28 'int *':'int *' <LValueToRValue>
    |   `-DeclRefExpr 0x81a09c8 'int *':'int *' lvalue ParmVar 0x819e150 '__last' 'int *':'int *'
    `-ImplicitCastExpr 0x81a0f58 'int *':'int *' <LValueToRValue>
      `-DeclRefExpr 0x81a09e8 'int *':'int *' lvalue ParmVar 0x819e1c8 '__result' 'int *':'int *'
Emitting fn: _ZSt12__miter_baseIPiET_S1_
__miter_base
CompoundStmt 0x819b880
`-ReturnStmt 0x819b870
  `-ImplicitCastExpr 0x819b858 'int *':'int *' <LValueToRValue>
    `-DeclRefExpr 0x819b838 'int *':'int *' lvalue ParmVar 0x8199018 '__it' 'int *':'int *'
Emitting fn: _ZNKSt13move_iteratorIPiE4baseEv
base
CompoundStmt 0x819b820
`-ReturnStmt 0x819b810
  `-ImplicitCastExpr 0x819b7f8 'int *':'int *' <LValueToRValue>
    `-MemberExpr 0x819b7c8 'int *const':'int *const' lvalue ->_M_current 0x8188498
      `-CXXThisExpr 0x819b7b8 'const class std::move_iterator<int *> *' implicit this
Emitting fn: _ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_
__copy_m
CompoundStmt 0x81a47a0
|-DeclStmt 0x81a1660
| `-TypeAliasDecl 0x81a1600  referenced __assignable 'conditional<true, is_move_assignable<int>, is_copy_assignable<int> >':'struct std::conditional<true, struct std::is_move_assignable<int>, struct std::is_copy_assignable<int> >'
|   `-ElaboratedType 0x81a15a0 'conditional<true, is_move_assignable<int>, is_copy_assignable<int> >' sugar
|     `-TemplateSpecializationType 0x81a1530 'conditional<true, is_move_assignable<int>, is_copy_assignable<int> >' sugar conditional
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x81a13e0 '_Bool'
|       |   |-value: Int 1
|       |   `-SubstNonTypeTemplateParmExpr 0x81a1040 '_Bool'
|       |     |-NonTypeTemplateParmDecl 0x7f12268  referenced '_Bool' depth 0 index 0 _IsMove
|       |     `-CXXBoolLiteralExpr 0x81a1030 '_Bool' true
|       |-TemplateArgument type 'is_move_assignable<int>':'struct std::is_move_assignable<int>'
|       | `-ElaboratedType 0x81a11f0 'is_move_assignable<int>' sugar
|       |   `-TemplateSpecializationType 0x81a11b0 'is_move_assignable<int>' sugar is_move_assignable
|       |     |-TemplateArgument type 'int':'int'
|       |     | `-SubstTemplateTypeParmType 0x81a1070 'int' sugar typename depth 0 index 0 _Tp
|       |     |   |-CXXMethod 0x81a0cf8 '__copy_m' 'int *(const int *, const int *, int *)'
|       |     |   `-BuiltinType 0x7c36430 'int'
|       |     `-RecordType 0x81a1190 'struct std::is_move_assignable<int>'
|       |       `-ClassTemplateSpecialization 0x81a10a8 'is_move_assignable'
|       |-TemplateArgument type 'is_copy_assignable<int>':'struct std::is_copy_assignable<int>'
|       | `-ElaboratedType 0x81a1390 'is_copy_assignable<int>' sugar
|       |   `-TemplateSpecializationType 0x81a1350 'is_copy_assignable<int>' sugar is_copy_assignable
|       |     |-TemplateArgument type 'int':'int'
|       |     | `-SubstTemplateTypeParmType 0x81a1070 'int' sugar typename depth 0 index 0 _Tp
|       |     |   |-CXXMethod 0x81a0cf8 '__copy_m' 'int *(const int *, const int *, int *)'
|       |     |   `-BuiltinType 0x7c36430 'int'
|       |     `-RecordType 0x81a1330 'struct std::is_copy_assignable<int>'
|       |       `-ClassTemplateSpecialization 0x81a1250 'is_copy_assignable'
|       `-RecordType 0x81a1510 'struct std::conditional<true, struct std::is_move_assignable<int>, struct std::is_copy_assignable<int> >'
|         `-ClassTemplateSpecialization 0x81a1400 'conditional'
|-DeclStmt 0x81a42b0
| `-StaticAssertDecl 0x81a4270 
|   |-ImplicitCastExpr 0x81a4238 '_Bool':'_Bool' <LValueToRValue>
|   | `-DeclRefExpr 0x81a4208 'const _Bool':'const _Bool' lvalue Var 0x7de3ee8 'value' 'const _Bool':'const _Bool' non_odr_use_constant
|   `-StringLiteral 0x7f131a8 'const char[23]' lvalue "type is not assignable"
|-DeclStmt 0x81a4468
| `-VarDecl 0x81a42c8  used _Num 'const ptrdiff_t':'const long' cinit
|   `-BinaryOperator 0x81a43f0 'long' '-'
|     |-ImplicitCastExpr 0x81a43c0 'const int *' <LValueToRValue>
|     | `-DeclRefExpr 0x81a4380 'const int *' lvalue ParmVar 0x81a0b60 '__last' 'const int *'
|     `-ImplicitCastExpr 0x81a43d8 'const int *' <LValueToRValue>
|       `-DeclRefExpr 0x81a43a0 'const int *' lvalue ParmVar 0x81a0ae8 '__first' 'const int *'
|-IfStmt 0x81a4690
| |-ImplicitCastExpr 0x81a44b8 '_Bool' <IntegralToBoolean>
| | `-ImplicitCastExpr 0x81a44a0 'ptrdiff_t':'long' <LValueToRValue>
| |   `-DeclRefExpr 0x81a4480 'const ptrdiff_t':'const long' lvalue Var 0x81a42c8 '_Num' 'const ptrdiff_t':'const long'
| `-CallExpr 0x81a45f8 'void *'
|   |-ImplicitCastExpr 0x81a45e0 'void *(*)(void *, const void *, unsigned long) noexcept' <BuiltinFnToFnPtr>
|   | `-DeclRefExpr 0x7f13758 '<builtin fn type>' Function 0x7f134e0 '__builtin_memmove' 'void *(void *, const void *, unsigned long) noexcept'
|   |-ImplicitCastExpr 0x81a4648 'void *' <BitCast>
|   | `-ImplicitCastExpr 0x81a4630 'int *' <LValueToRValue>
|   |   `-DeclRefExpr 0x81a44d0 'int *' lvalue ParmVar 0x81a0bd8 '__result' 'int *'
|   |-ImplicitCastExpr 0x81a4678 'const void *' <BitCast>
|   | `-ImplicitCastExpr 0x81a4660 'const int *' <LValueToRValue>
|   |   `-DeclRefExpr 0x81a44f0 'const int *' lvalue ParmVar 0x81a0ae8 '__first' 'const int *'
|   `-BinaryOperator 0x81a4590 'unsigned long' '*'
|     |-UnaryExprOrTypeTraitExpr 0x81a4520 'unsigned long' sizeof 'int':'int'
|     `-ImplicitCastExpr 0x81a4578 'unsigned long' <IntegralCast>
|       `-ImplicitCastExpr 0x81a4560 'ptrdiff_t':'long' <LValueToRValue>
|         `-DeclRefExpr 0x81a4540 'const ptrdiff_t':'const long' lvalue Var 0x81a42c8 '_Num' 'const ptrdiff_t':'const long'
`-ReturnStmt 0x81a4790
  `-BinaryOperator 0x81a4770 'int *' '+'
    |-ImplicitCastExpr 0x81a4740 'int *' <LValueToRValue>
    | `-DeclRefExpr 0x81a4700 'int *' lvalue ParmVar 0x81a0bd8 '__result' 'int *'
    `-ImplicitCastExpr 0x81a4758 'ptrdiff_t':'long' <LValueToRValue>
      `-DeclRefExpr 0x81a4720 'const ptrdiff_t':'const long' lvalue Var 0x81a42c8 '_Num' 'const ptrdiff_t':'const long'
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  llvm.mlir.global internal constant @str2("vector::_M_realloc_insert\00") {addr_space = 0 : i32}
  llvm.mlir.global internal constant @str1("vector::reserve\00") {addr_space = 0 : i32}
  llvm.func @printf(!llvm.ptr<i8>, ...) -> i32
  llvm.mlir.global internal constant @str0("%d\0A\00") {addr_space = 0 : i32}
  func.func @main() -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c16_i64 = arith.constant 16 : i64
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.mlir.undef : i32
    %alloca = memref.alloca() : memref<1xi32>
    %cast = memref.cast %alloca : memref<1xi32> to memref<?xi32>
    affine.store %0, %alloca[0] : memref<1xi32>
    %1 = llvm.alloca %c1_i64 x !llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)> : (i64) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>
    call @_ZNSt6vectorIiSaIiEEC1Ev(%1) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> ()
    call @_ZNSt6vectorIiSaIiEE7reserveEm(%1, %c16_i64) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, i64) -> ()
    affine.store %c1_i32, %alloca[0] : memref<1xi32>
    call @_ZNSt6vectorIiSaIiEE9push_backERKi(%1, %cast) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, memref<?xi32>) -> ()
    %2 = llvm.mlir.addressof @str0 : !llvm.ptr<array<4 x i8>>
    %3 = llvm.getelementptr %2[0, 0] : (!llvm.ptr<array<4 x i8>>) -> !llvm.ptr<i8>
    %4 = scf.while (%arg0 = %c0_i32) : (i32) -> i32 {
      %5 = arith.extsi %arg0 : i32 to i64
      %6 = func.call @_ZNKSt6vectorIiSaIiEE4sizeEv(%1) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
      %7 = arith.cmpi slt, %5, %6 : i64
      scf.condition(%7) %arg0 : i32
    } do {
    ^bb0(%arg0: i32):
      %5 = arith.extsi %arg0 : i32 to i64
      %6 = func.call @_ZNSt6vectorIiSaIiEEixEm(%1, %5) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, i64) -> memref<?xi32>
      %7 = affine.load %6[0] : memref<?xi32>
      %8 = llvm.call @printf(%3, %7) : (!llvm.ptr<i8>, i32) -> i32
      %9 = arith.addi %arg0, %c1_i32 : i32
      scf.yield %9 : i32
    }
    return %c0_i32 : i32
  }
  func.func @_ZNSt6vectorIiSaIiEEC1Ev(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    call @_ZNSt12_Vector_baseIiSaIiEEC1Ev(%0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> ()
    return
  }
  func.func @_ZNSt6vectorIiSaIiEE7reserveEm(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, %arg1: i64) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c4_i64 = arith.constant 4 : i64
    %c0_i8 = arith.constant 0 : i8
    %alloca = memref.alloca() : memref<1x1xmemref<?xi32>>
    %alloca_0 = memref.alloca() : memref<1x1xmemref<?xi32>>
    %alloca_1 = memref.alloca() : memref<1x1xmemref<?xi32>>
    %alloca_2 = memref.alloca() : memref<1x1xmemref<?xi32>>
    %cast = memref.cast %alloca_2 : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
    %alloca_3 = memref.alloca() : memref<1x1xmemref<?xi32>>
    %alloca_4 = memref.alloca() : memref<1x1xmemref<?xi32>>
    %cast_5 = memref.cast %alloca_4 : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
    %0 = call @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
    %1 = arith.cmpi sgt, %arg1, %0 : i64
    scf.if %1 {
      %4 = llvm.mlir.addressof @str1 : !llvm.ptr<array<16 x i8>>
      %5 = llvm.getelementptr %4[0, 0] : (!llvm.ptr<array<16 x i8>>) -> !llvm.ptr<i8>
      func.call @_ZSt20__throw_length_errorPKc(%5) : (!llvm.ptr<i8>) -> ()
    }
    %2 = call @_ZNKSt6vectorIiSaIiEE8capacityEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
    %3 = arith.cmpi slt, %2, %arg1 : i64
    scf.if %3 {
      %4 = func.call @_ZNKSt6vectorIiSaIiEE4sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
      %5 = func.call @_ZNSt6vectorIiSaIiEE15_S_use_relocateEv() : () -> i8
      %6 = arith.cmpi ne, %5, %c0_i8 : i8
      %7 = scf.if %6 -> (memref<?xi32>) {
        %27 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
        %28 = func.call @_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm(%27, %arg1) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>, i64) -> memref<?xi32>
        %29 = llvm.getelementptr %27[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
        %30 = llvm.getelementptr %29[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
        %31 = llvm.bitcast %30 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
        %32 = llvm.load %31 : !llvm.ptr<memref<?xi32>>
        %33 = llvm.getelementptr %31[1] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
        %34 = llvm.load %33 : !llvm.ptr<memref<?xi32>>
        %35 = func.call @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%27) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
        %36 = func.call @_ZSt14__relocate_a_1IiiENSt9enable_ifIXsr3std24__is_bitwise_relocatableIT_EE5valueEPS1_E4typeES2_S2_S2_RSaIT0_E(%32, %34, %28, %35) : (memref<?xi32>, memref<?xi32>, memref<?xi32>, !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32>
        scf.yield %28 : memref<?xi32>
      } else {
        %27 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
        %28 = llvm.getelementptr %27[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
        %29 = llvm.getelementptr %28[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
        %30 = llvm.bitcast %29 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
        %31 = llvm.load %30 : !llvm.ptr<memref<?xi32>>
        %cast_6 = memref.cast %alloca_3 : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
        func.call @_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_(%31, %cast_6) : (memref<?xi32>, memref<?x1xmemref<?xi32>>) -> ()
        func.call @_ZNSt13move_iteratorIPiEC1EOS1_(%cast_5, %cast_6) : (memref<?x1xmemref<?xi32>>, memref<?x1xmemref<?xi32>>) -> ()
        %32 = llvm.getelementptr %30[1] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
        %33 = llvm.load %32 : !llvm.ptr<memref<?xi32>>
        %cast_7 = memref.cast %alloca_1 : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
        func.call @_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_(%33, %cast_7) : (memref<?xi32>, memref<?x1xmemref<?xi32>>) -> ()
        func.call @_ZNSt13move_iteratorIPiEC1EOS1_(%cast, %cast_7) : (memref<?x1xmemref<?xi32>>, memref<?x1xmemref<?xi32>>) -> ()
        %34 = affine.load %alloca_4[0, 0] : memref<1x1xmemref<?xi32>>
        affine.store %34, %alloca_0[0, 0] : memref<1x1xmemref<?xi32>>
        %cast_8 = memref.cast %alloca_0 : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
        %35 = affine.load %alloca_2[0, 0] : memref<1x1xmemref<?xi32>>
        affine.store %35, %alloca[0, 0] : memref<1x1xmemref<?xi32>>
        %cast_9 = memref.cast %alloca : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
        %36 = func.call @_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyISt13move_iteratorIPiEEES4_mT_S6_(%arg0, %arg1, %cast_8, %cast_9) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, i64, memref<?x1xmemref<?xi32>>, memref<?x1xmemref<?xi32>>) -> memref<?xi32>
        %37 = func.call @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%27) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
        scf.yield %36 : memref<?xi32>
      }
      %8 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
      %9 = llvm.getelementptr %8[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
      %10 = llvm.getelementptr %9[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
      %11 = llvm.bitcast %10 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
      %12 = llvm.load %11 : !llvm.ptr<memref<?xi32>>
      %13 = llvm.getelementptr %11[2] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
      %14 = llvm.load %13 : !llvm.ptr<memref<?xi32>>
      %15 = "polygeist.memref2pointer"(%14) : (memref<?xi32>) -> !llvm.ptr<i32>
      %16 = "polygeist.memref2pointer"(%12) : (memref<?xi32>) -> !llvm.ptr<i32>
      %17 = llvm.ptrtoint %15 : !llvm.ptr<i32> to i64
      %18 = llvm.ptrtoint %16 : !llvm.ptr<i32> to i64
      %19 = arith.subi %17, %18 : i64
      %20 = arith.divsi %19, %c4_i64 : i64
      func.call @_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim(%8, %12, %20) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>, memref<?xi32>, i64) -> ()
      llvm.store %7, %11 : !llvm.ptr<memref<?xi32>>
      %21 = arith.index_cast %4 : i64 to index
      %22 = "polygeist.subindex"(%7, %21) : (memref<?xi32>, index) -> memref<?xi32>
      %23 = llvm.getelementptr %11[1] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
      llvm.store %22, %23 : !llvm.ptr<memref<?xi32>>
      %24 = llvm.load %11 : !llvm.ptr<memref<?xi32>>
      %25 = arith.index_cast %arg1 : i64 to index
      %26 = "polygeist.subindex"(%24, %25) : (memref<?xi32>, index) -> memref<?xi32>
      llvm.store %26, %13 : !llvm.ptr<memref<?xi32>>
    }
    return
  }
  func.func @_ZNSt6vectorIiSaIiEE9push_backERKi(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, %arg1: memref<?xi32>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c1 = arith.constant 1 : index
    %alloca = memref.alloca() : memref<1x1xmemref<?xi32>>
    %alloca_0 = memref.alloca() : memref<1x1xmemref<?xi32>>
    %alloca_1 = memref.alloca() : memref<1x1xmemref<?xi32>>
    %cast = memref.cast %alloca_1 : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %2 = llvm.getelementptr %1[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
    %3 = llvm.bitcast %2 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
    %4 = llvm.getelementptr %3[1] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
    %5 = llvm.load %4 : !llvm.ptr<memref<?xi32>>
    %6 = llvm.getelementptr %3[2] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
    %7 = llvm.load %6 : !llvm.ptr<memref<?xi32>>
    %8 = "polygeist.memref2pointer"(%5) : (memref<?xi32>) -> !llvm.ptr<i32>
    %9 = "polygeist.memref2pointer"(%7) : (memref<?xi32>) -> !llvm.ptr<i32>
    %10 = llvm.icmp "ne" %8, %9 : !llvm.ptr<i32>
    scf.if %10 {
      %11 = llvm.load %4 : !llvm.ptr<memref<?xi32>>
      %12 = "polygeist.subindex"(%11, %c1) : (memref<?xi32>, index) -> memref<?xi32>
      llvm.store %12, %4 : !llvm.ptr<memref<?xi32>>
    } else {
      %cast_2 = memref.cast %alloca_0 : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
      func.call @_ZNSt6vectorIiSaIiEE3endEv(%arg0, %cast_2) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, memref<?x1xmemref<?xi32>>) -> ()
      func.call @_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1EOS5_(%cast, %cast_2) : (memref<?x1xmemref<?xi32>>, memref<?x1xmemref<?xi32>>) -> ()
      %11 = affine.load %alloca_1[0, 0] : memref<1x1xmemref<?xi32>>
      affine.store %11, %alloca[0, 0] : memref<1x1xmemref<?xi32>>
      %cast_3 = memref.cast %alloca : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
      func.call @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%arg0, %cast_3, %arg1) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, memref<?x1xmemref<?xi32>>, memref<?xi32>) -> ()
    }
    return
  }
  func.func @_ZNKSt6vectorIiSaIiEE4sizeEv(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c4_i64 = arith.constant 4 : i64
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %2 = llvm.getelementptr %1[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
    %3 = llvm.bitcast %2 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
    %4 = llvm.getelementptr %3[1] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
    %5 = llvm.load %4 : !llvm.ptr<memref<?xi32>>
    %6 = llvm.load %3 : !llvm.ptr<memref<?xi32>>
    %7 = "polygeist.memref2pointer"(%5) : (memref<?xi32>) -> !llvm.ptr<i32>
    %8 = "polygeist.memref2pointer"(%6) : (memref<?xi32>) -> !llvm.ptr<i32>
    %9 = llvm.ptrtoint %7 : !llvm.ptr<i32> to i64
    %10 = llvm.ptrtoint %8 : !llvm.ptr<i32> to i64
    %11 = arith.subi %9, %10 : i64
    %12 = arith.divsi %11, %c4_i64 : i64
    return %12 : i64
  }
  func.func @_ZNSt6vectorIiSaIiEEixEm(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, %arg1: i64) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %2 = llvm.getelementptr %1[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
    %3 = llvm.bitcast %2 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
    %4 = llvm.load %3 : !llvm.ptr<memref<?xi32>>
    %5 = arith.index_cast %arg1 : i64 to index
    %6 = "polygeist.subindex"(%4, %5) : (memref<?xi32>, index) -> memref<?xi32>
    return %6 : memref<?xi32>
  }
  func.func @_ZNSt12_Vector_baseIiSaIiEEC1Ev(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    call @_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev(%0) : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> ()
    return
  }
  func.func @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %1 = call @_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
    %2 = call @_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_(%1) : (!llvm.ptr<struct<(struct<(i8)>)>>) -> i64
    return %2 : i64
  }
  func.func private @_ZSt20__throw_length_errorPKc(!llvm.ptr<i8>) attributes {llvm.linkage = #llvm.linkage<external>}
  func.func @_ZNKSt6vectorIiSaIiEE8capacityEv(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c4_i64 = arith.constant 4 : i64
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %2 = llvm.getelementptr %1[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
    %3 = llvm.bitcast %2 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
    %4 = llvm.getelementptr %3[2] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
    %5 = llvm.load %4 : !llvm.ptr<memref<?xi32>>
    %6 = llvm.load %3 : !llvm.ptr<memref<?xi32>>
    %7 = "polygeist.memref2pointer"(%5) : (memref<?xi32>) -> !llvm.ptr<i32>
    %8 = "polygeist.memref2pointer"(%6) : (memref<?xi32>) -> !llvm.ptr<i32>
    %9 = llvm.ptrtoint %7 : !llvm.ptr<i32> to i64
    %10 = llvm.ptrtoint %8 : !llvm.ptr<i32> to i64
    %11 = arith.subi %9, %10 : i64
    %12 = arith.divsi %11, %c4_i64 : i64
    return %12 : i64
  }
  func.func @_ZNSt6vectorIiSaIiEE15_S_use_relocateEv() -> i8 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c1_i8 = arith.constant 1 : i8
    %false = arith.constant false
    %c0_i8 = arith.constant 0 : i8
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x !llvm.struct<(struct<(struct<(struct<(struct<(i8)>)>)>)>)> : (i64) -> !llvm.ptr<struct<(struct<(struct<(struct<(struct<(i8)>)>)>)>)>>
    %1 = llvm.bitcast %0 : !llvm.ptr<struct<(struct<(struct<(struct<(struct<(i8)>)>)>)>)>> to !llvm.ptr<i8>
    "llvm.intr.memset"(%1, %c0_i8, %c1_i64, %false) : (!llvm.ptr<i8>, i8, i64, i1) -> ()
    return %c1_i8 : i8
  }
  func.func @_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>, %arg1: i64) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c0_i64 = arith.constant 0 : i64
    %0 = arith.cmpi ne, %arg1, %c0_i64 : i64
    %1 = scf.if %0 -> (memref<?xi32>) {
      %2 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
      %3 = llvm.getelementptr %2[0, 0] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
      %4 = llvm.mlir.null : !llvm.ptr<struct<(struct<(i8)>)>>
      %5 = llvm.icmp "ne" %3, %4 : !llvm.ptr<struct<(struct<(i8)>)>>
      %6 = arith.select %5, %3, %4 : !llvm.ptr<struct<(struct<(i8)>)>>
      %7 = func.call @_ZNSt16allocator_traitsISaIiEE8allocateERS0_m(%6, %arg1) : (!llvm.ptr<struct<(struct<(i8)>)>>, i64) -> memref<?xi32>
      scf.yield %7 : memref<?xi32>
    } else {
      %2 = llvm.mlir.null : !llvm.ptr<i8>
      %3 = "polygeist.pointer2memref"(%2) : (!llvm.ptr<i8>) -> memref<?xi32>
      scf.yield %3 : memref<?xi32>
    }
    return %1 : memref<?xi32>
  }
  func.func @_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: memref<?xi32>, %arg3: !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = call @_ZSt14__relocate_a_1IiiENSt9enable_ifIXsr3std24__is_bitwise_relocatableIT_EE5valueEPS1_E4typeES2_S2_S2_RSaIT0_E(%arg0, %arg1, %arg2, %arg3) : (memref<?xi32>, memref<?xi32>, memref<?xi32>, !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32>
    return %0 : memref<?xi32>
  }
  func.func @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
    %2 = llvm.mlir.null : !llvm.ptr<struct<(struct<(i8)>)>>
    %3 = llvm.icmp "ne" %1, %2 : !llvm.ptr<struct<(struct<(i8)>)>>
    %4 = arith.select %3, %1, %2 : !llvm.ptr<struct<(struct<(i8)>)>>
    return %4 : !llvm.ptr<struct<(struct<(i8)>)>>
  }
  func.func @_ZNSt6vectorIiSaIiEE20_M_allocate_and_copyISt13move_iteratorIPiEEES4_mT_S6_(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, %arg1: i64, %arg2: memref<?x1xmemref<?xi32>>, %arg3: memref<?x1xmemref<?xi32>>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %1 = call @_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm(%0, %arg1) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>, i64) -> memref<?xi32>
    %2 = affine.load %arg2[0, 0] : memref<?x1xmemref<?xi32>>
    %3 = affine.load %arg3[0, 0] : memref<?x1xmemref<?xi32>>
    %4 = call @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
    %5 = call @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%2, %3, %1) : (memref<?xi32>, memref<?xi32>, memref<?xi32>) -> memref<?xi32>
    return %1 : memref<?xi32>
  }
  func.func @_ZNSt13move_iteratorIPiEC1EOS1_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?x1xmemref<?xi32>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    affine.store %0, %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    return
  }
  func.func @_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_(%arg0: memref<?xi32>, %arg1: memref<?x1xmemref<?xi32>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    affine.store %arg0, %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    return
  }
  func.func @_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: !llvm.ptr<struct<(struct<(i8)>)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return
  }
  func.func @_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>, %arg1: memref<?xi32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?xi32>) -> !llvm.ptr<i32>
    %1 = llvm.mlir.null : !llvm.ptr<i32>
    %2 = llvm.icmp "ne" %0, %1 : !llvm.ptr<i32>
    scf.if %2 {
      %3 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
      %4 = llvm.getelementptr %3[0, 0] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
      %5 = llvm.mlir.null : !llvm.ptr<struct<(struct<(i8)>)>>
      %6 = llvm.icmp "ne" %4, %5 : !llvm.ptr<struct<(struct<(i8)>)>>
      %7 = arith.select %6, %4, %5 : !llvm.ptr<struct<(struct<(i8)>)>>
      func.call @_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pim(%7, %arg1, %arg2) : (!llvm.ptr<struct<(struct<(i8)>)>>, memref<?xi32>, i64) -> ()
    }
    return
  }
  func.func @_ZNSt16allocator_traitsISaIiEE9constructIiJRKiEEEvRS0_PT_DpOT0_(%arg0: !llvm.ptr<struct<(struct<(i8)>)>>, %arg1: memref<?xi32>, %arg2: memref<?xi32>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return
  }
  func.func @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, %arg1: memref<?x1xmemref<?xi32>>, %arg2: memref<?xi32>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c4_i64 = arith.constant 4 : i64
    %c0_i8 = arith.constant 0 : i8
    %c1_i64 = arith.constant 1 : i64
    %c1 = arith.constant 1 : index
    %alloca = memref.alloca() : memref<1x1xmemref<?xi32>>
    %0 = llvm.mlir.addressof @str2 : !llvm.ptr<array<26 x i8>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<array<26 x i8>>) -> !llvm.ptr<i8>
    %2 = call @_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc(%arg0, %c1_i64, %1) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, i64, !llvm.ptr<i8>) -> i64
    %3 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %4 = llvm.getelementptr %3[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %5 = llvm.getelementptr %4[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
    %6 = llvm.bitcast %5 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
    %7 = llvm.load %6 : !llvm.ptr<memref<?xi32>>
    %8 = llvm.getelementptr %6[1] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
    %9 = llvm.load %8 : !llvm.ptr<memref<?xi32>>
    %cast = memref.cast %alloca : memref<1x1xmemref<?xi32>> to memref<?x1xmemref<?xi32>>
    call @_ZNSt6vectorIiSaIiEE5beginEv(%arg0, %cast) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, memref<?x1xmemref<?xi32>>) -> ()
    %10 = call @_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%arg1, %cast) : (memref<?x1xmemref<?xi32>>, memref<?x1xmemref<?xi32>>) -> i64
    %11 = call @_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm(%3, %2) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>, i64) -> memref<?xi32>
    %12 = call @_ZNSt6vectorIiSaIiEE15_S_use_relocateEv() : () -> i8
    %13 = arith.cmpi ne, %12, %c0_i8 : i8
    %14 = scf.if %13 -> (memref<?xi32>) {
      %27 = func.call @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%arg1) : (memref<?x1xmemref<?xi32>>) -> memref<?xmemref<?xi32>>
      %28 = affine.load %27[0] : memref<?xmemref<?xi32>>
      %29 = func.call @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%3) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
      %30 = func.call @_ZSt14__relocate_a_1IiiENSt9enable_ifIXsr3std24__is_bitwise_relocatableIT_EE5valueEPS1_E4typeES2_S2_S2_RSaIT0_E(%7, %28, %11, %29) : (memref<?xi32>, memref<?xi32>, memref<?xi32>, !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32>
      %31 = "polygeist.subindex"(%30, %c1) : (memref<?xi32>, index) -> memref<?xi32>
      %32 = func.call @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%arg1) : (memref<?x1xmemref<?xi32>>) -> memref<?xmemref<?xi32>>
      %33 = affine.load %32[0] : memref<?xmemref<?xi32>>
      %34 = func.call @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%3) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
      %35 = func.call @_ZSt14__relocate_a_1IiiENSt9enable_ifIXsr3std24__is_bitwise_relocatableIT_EE5valueEPS1_E4typeES2_S2_S2_RSaIT0_E(%33, %9, %31, %34) : (memref<?xi32>, memref<?xi32>, memref<?xi32>, !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32>
      scf.yield %35 : memref<?xi32>
    } else {
      %27 = func.call @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%arg1) : (memref<?x1xmemref<?xi32>>) -> memref<?xmemref<?xi32>>
      %28 = affine.load %27[0] : memref<?xmemref<?xi32>>
      %29 = func.call @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%3) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
      %30 = func.call @_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_(%7, %28, %11, %29) : (memref<?xi32>, memref<?xi32>, memref<?xi32>, !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32>
      %31 = "polygeist.subindex"(%30, %c1) : (memref<?xi32>, index) -> memref<?xi32>
      %32 = func.call @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%arg1) : (memref<?x1xmemref<?xi32>>) -> memref<?xmemref<?xi32>>
      %33 = affine.load %32[0] : memref<?xmemref<?xi32>>
      %34 = func.call @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%3) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
      %35 = func.call @_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_(%33, %9, %31, %34) : (memref<?xi32>, memref<?xi32>, memref<?xi32>, !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32>
      scf.yield %35 : memref<?xi32>
    }
    %15 = call @_ZNSt6vectorIiSaIiEE15_S_use_relocateEv() : () -> i8
    %16 = arith.cmpi eq, %15, %c0_i8 : i8
    scf.if %16 {
      %27 = func.call @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%3) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
    }
    %17 = llvm.getelementptr %6[2] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
    %18 = llvm.load %17 : !llvm.ptr<memref<?xi32>>
    %19 = "polygeist.memref2pointer"(%18) : (memref<?xi32>) -> !llvm.ptr<i32>
    %20 = "polygeist.memref2pointer"(%7) : (memref<?xi32>) -> !llvm.ptr<i32>
    %21 = llvm.ptrtoint %19 : !llvm.ptr<i32> to i64
    %22 = llvm.ptrtoint %20 : !llvm.ptr<i32> to i64
    %23 = arith.subi %21, %22 : i64
    %24 = arith.divsi %23, %c4_i64 : i64
    call @_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim(%3, %7, %24) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>, memref<?xi32>, i64) -> ()
    llvm.store %11, %6 : !llvm.ptr<memref<?xi32>>
    llvm.store %14, %8 : !llvm.ptr<memref<?xi32>>
    %25 = arith.index_cast %2 : i64 to index
    %26 = "polygeist.subindex"(%11, %25) : (memref<?xi32>, index) -> memref<?xi32>
    llvm.store %26, %17 : !llvm.ptr<memref<?xi32>>
    return
  }
  func.func @_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1EOS5_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?x1xmemref<?xi32>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    affine.store %0, %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    return
  }
  func.func @_ZNSt6vectorIiSaIiEE3endEv(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, %arg1: memref<?x1xmemref<?xi32>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %2 = llvm.getelementptr %1[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
    %3 = llvm.bitcast %2 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
    %4 = llvm.getelementptr %3[1] : (!llvm.ptr<memref<?xi32>>) -> !llvm.ptr<memref<?xi32>>
    %5 = llvm.load %4 : !llvm.ptr<memref<?xi32>>
    affine.store %5, %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    return
  }
  func.func @_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev(%arg0: !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
    %1 = "polygeist.pointer2memref"(%0) : (!llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>) -> memref<?x3xmemref<?xi32>>
    call @_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev(%1) : (memref<?x3xmemref<?xi32>>) -> ()
    return
  }
  func.func @_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_(%arg0: !llvm.ptr<struct<(struct<(i8)>)>>) -> i64 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c2305843009213693951_i64 = arith.constant 2305843009213693951 : i64
    return %c2305843009213693951_i64 : i64
  }
  func.func @_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<struct<(struct<(i8)>)>>
    %2 = llvm.mlir.null : !llvm.ptr<struct<(struct<(i8)>)>>
    %3 = llvm.icmp "ne" %1, %2 : !llvm.ptr<struct<(struct<(i8)>)>>
    %4 = arith.select %3, %1, %2 : !llvm.ptr<struct<(struct<(i8)>)>>
    return %4 : !llvm.ptr<struct<(struct<(i8)>)>>
  }
  func.func @_ZNSt6vectorIiSaIiEE19_S_nothrow_relocateESt17integral_constantIbLb1EE(%arg0: !llvm.struct<(i8)>) -> i8 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c1_i8 = arith.constant 1 : i8
    return %c1_i8 : i8
  }
  func.func @_ZNSt17integral_constantIbLb1EEC1EOS0_(%arg0: !llvm.ptr<struct<(i8)>>, %arg1: !llvm.ptr<struct<(i8)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return
  }
  func.func @_ZNSt16allocator_traitsISaIiEE8allocateERS0_m(%arg0: !llvm.ptr<struct<(struct<(i8)>)>>, %arg1: i64) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<struct<(struct<(i8)>)>>) -> !llvm.ptr<struct<(i8)>>
    %1 = llvm.mlir.null : !llvm.ptr<i8>
    %2 = call @_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv(%0, %arg1, %1) : (!llvm.ptr<struct<(i8)>>, i64, !llvm.ptr<i8>) -> memref<?xi32>
    return %2 : memref<?xi32>
  }
  func.func @_ZNSt6vectorIiSaIiEE14_S_do_relocateEPiS2_S2_RS0_St17integral_constantIbLb1EE(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: memref<?xi32>, %arg3: !llvm.ptr<struct<(struct<(i8)>)>>, %arg4: !llvm.struct<(i8)>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = call @_ZSt14__relocate_a_1IiiENSt9enable_ifIXsr3std24__is_bitwise_relocatableIT_EE5valueEPS1_E4typeES2_S2_S2_RSaIT0_E(%arg0, %arg1, %arg2, %arg3) : (memref<?xi32>, memref<?xi32>, memref<?xi32>, !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32>
    return %0 : memref<?xi32>
  }
  func.func @_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?x1xmemref<?xi32>>, %arg2: memref<?xi32>, %arg3: !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    %1 = affine.load %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    %2 = call @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%0, %1, %arg2) : (memref<?xi32>, memref<?xi32>, memref<?xi32>) -> memref<?xi32>
    return %2 : memref<?xi32>
  }
  func.func @_ZNSt13move_iteratorIPiEC1ERKS1_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?x1xmemref<?xi32>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    affine.store %0, %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    return
  }
  func.func @_ZNSt13move_iteratorIPiEC1ES0_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?xi32>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    affine.store %arg1, %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    return
  }
  func.func @_ZSt8_DestroyIPiEvT_S1_(%arg0: memref<?xi32>, %arg1: memref<?xi32>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return
  }
  func.func @_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pim(%arg0: !llvm.ptr<struct<(struct<(i8)>)>>, %arg1: memref<?xi32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<struct<(struct<(i8)>)>>) -> !llvm.ptr<struct<(i8)>>
    call @_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim(%0, %arg1, %arg2) : (!llvm.ptr<struct<(i8)>>, memref<?xi32>, i64) -> ()
    return
  }
  func.func @_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_(%arg0: !llvm.ptr<struct<(i8)>>, %arg1: memref<?xi32>, %arg2: memref<?xi32>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return
  }
  func.func @_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, %arg1: i64, %arg2: !llvm.ptr<i8>) -> i64 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %true = arith.constant true
    %0 = call @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
    %1 = call @_ZNKSt6vectorIiSaIiEE4sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
    %2 = arith.subi %0, %1 : i64
    %3 = arith.cmpi slt, %2, %arg1 : i64
    scf.if %3 {
      func.call @_ZSt20__throw_length_errorPKc(%arg2) : (!llvm.ptr<i8>) -> ()
    }
    %4 = call @_ZNKSt6vectorIiSaIiEE4sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
    %5 = call @_ZNKSt6vectorIiSaIiEE4sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
    %6 = arith.cmpi slt, %5, %arg1 : i64
    %7 = arith.select %6, %arg1, %5 : i64
    %8 = arith.addi %4, %7 : i64
    %9 = call @_ZNKSt6vectorIiSaIiEE4sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
    %10 = arith.cmpi slt, %8, %9 : i64
    %11 = scf.if %10 -> (i1) {
      scf.yield %true : i1
    } else {
      %13 = func.call @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
      %14 = arith.cmpi sgt, %8, %13 : i64
      scf.yield %14 : i1
    }
    %12 = scf.if %11 -> (i64) {
      %13 = func.call @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%arg0) : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> i64
      scf.yield %13 : i64
    } else {
      scf.yield %8 : i64
    }
    return %12 : i64
  }
  func.func @_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?x1xmemref<?xi32>>) -> i64 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c4_i64 = arith.constant 4 : i64
    %0 = call @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%arg0) : (memref<?x1xmemref<?xi32>>) -> memref<?xmemref<?xi32>>
    %1 = affine.load %0[0] : memref<?xmemref<?xi32>>
    %2 = call @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%arg1) : (memref<?x1xmemref<?xi32>>) -> memref<?xmemref<?xi32>>
    %3 = affine.load %2[0] : memref<?xmemref<?xi32>>
    %4 = "polygeist.memref2pointer"(%1) : (memref<?xi32>) -> !llvm.ptr<i32>
    %5 = "polygeist.memref2pointer"(%3) : (memref<?xi32>) -> !llvm.ptr<i32>
    %6 = llvm.ptrtoint %4 : !llvm.ptr<i32> to i64
    %7 = llvm.ptrtoint %5 : !llvm.ptr<i32> to i64
    %8 = arith.subi %6, %7 : i64
    %9 = arith.divsi %8, %c4_i64 : i64
    return %9 : i64
  }
  func.func @_ZNSt6vectorIiSaIiEE5beginEv(%arg0: !llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>, %arg1: memref<?x1xmemref<?xi32>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.getelementptr %arg0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>)>>) -> !llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>
    %1 = llvm.getelementptr %0[0, 0] : (!llvm.ptr<!llvm.struct<(!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>)>>) -> !llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>
    %2 = llvm.getelementptr %1[0, 1] : (!llvm.ptr<!llvm.struct<(struct<(struct<(i8)>)>, !llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>)>>) -> !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>>
    %3 = llvm.bitcast %2 : !llvm.ptr<!llvm.struct<(memref<?xi32>, memref<?xi32>, memref<?xi32>)>> to !llvm.ptr<memref<?xi32>>
    %4 = llvm.load %3 : !llvm.ptr<memref<?xi32>>
    affine.store %4, %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    return
  }
  func.func @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%arg0: memref<?x1xmemref<?xi32>>) -> memref<?xmemref<?xi32>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c0 = arith.constant 0 : index
    %0 = "polygeist.subindex"(%arg0, %c0) : (memref<?x1xmemref<?xi32>>, index) -> memref<1xmemref<?xi32>>
    %1 = "polygeist.subindex"(%0, %c0) : (memref<1xmemref<?xi32>>, index) -> memref<?xmemref<?xi32>>
    return %1 : memref<?xmemref<?xi32>>
  }
  func.func @_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: memref<?xi32>, %arg3: !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = call @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%arg0, %arg1, %arg2) : (memref<?xi32>, memref<?xi32>, memref<?xi32>) -> memref<?xi32>
    return %0 : memref<?xi32>
  }
  func.func @_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?xmemref<?xi32>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg1[0] : memref<?xmemref<?xi32>>
    affine.store %0, %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    return
  }
  func.func @_ZNSaIiEC1Ev(%arg0: !llvm.ptr<struct<(struct<(i8)>)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return
  }
  func.func @_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev(%arg0: memref<?x3xmemref<?xi32>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = llvm.mlir.null : !llvm.ptr<i8>
    %1 = "polygeist.pointer2memref"(%0) : (!llvm.ptr<i8>) -> memref<?xi32>
    affine.store %1, %arg0[0, 0] : memref<?x3xmemref<?xi32>>
    affine.store %1, %arg0[0, 1] : memref<?x3xmemref<?xi32>>
    affine.store %1, %arg0[0, 2] : memref<?x3xmemref<?xi32>>
    return
  }
  func.func @_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_(%arg0: !llvm.ptr<struct<(struct<(i8)>)>>) -> i64 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c2305843009213693951_i64 = arith.constant 2305843009213693951 : i64
    return %c2305843009213693951_i64 : i64
  }
  func.func @_ZSt3minImERKT_S2_S2_(%arg0: memref<?xi64>, %arg1: memref<?xi64>) -> memref<?xi64> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg1[0] : memref<?xi64>
    %1 = affine.load %arg0[0] : memref<?xi64>
    %2 = arith.cmpi slt, %0, %1 : i64
    %3 = arith.select %2, %arg1, %arg0 : memref<?xi64>
    return %3 : memref<?xi64>
  }
  func.func @_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv(%arg0: !llvm.ptr<struct<(i8)>>, %arg1: i64, %arg2: !llvm.ptr<i8>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c4_i64 = arith.constant 4 : i64
    %c2305843009213693951_i64 = arith.constant 2305843009213693951 : i64
    %0 = arith.cmpi sgt, %arg1, %c2305843009213693951_i64 : i64
    scf.if %0 {
      func.call @_ZSt17__throw_bad_allocv() : () -> ()
    }
    %1 = arith.muli %arg1, %c4_i64 : i64
    %2 = call @_Znwm(%1) : (i64) -> !llvm.ptr<i8>
    %3 = "polygeist.pointer2memref"(%2) : (!llvm.ptr<i8>) -> memref<?xi32>
    return %3 : memref<?xi32>
  }
  func.func @_ZSt12__relocate_aIPiS0_SaIiEET0_T_S3_S2_RT1_(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: memref<?xi32>, %arg3: !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = call @_ZSt14__relocate_a_1IiiENSt9enable_ifIXsr3std24__is_bitwise_relocatableIT_EE5valueEPS1_E4typeES2_S2_S2_RSaIT0_E(%arg0, %arg1, %arg2, %arg3) : (memref<?xi32>, memref<?xi32>, memref<?xi32>, !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32>
    return %0 : memref<?xi32>
  }
  func.func @_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?x1xmemref<?xi32>>, %arg2: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    %1 = affine.load %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    %2 = call @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%0, %1, %arg2) : (memref<?xi32>, memref<?xi32>, memref<?xi32>) -> memref<?xi32>
    return %2 : memref<?xi32>
  }
  func.func @_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_(%arg0: memref<?xi32>, %arg1: memref<?xi32>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return
  }
  func.func @_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim(%arg0: !llvm.ptr<struct<(i8)>>, %arg1: memref<?xi32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?xi32>) -> !llvm.ptr<i8>
    call @_ZdlPv(%0) : (!llvm.ptr<i8>) -> ()
    return
  }
  func.func @_ZSt3maxImERKT_S2_S2_(%arg0: memref<?xi64>, %arg1: memref<?xi64>) -> memref<?xi64> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg0[0] : memref<?xi64>
    %1 = affine.load %arg1[0] : memref<?xi64>
    %2 = arith.cmpi slt, %0, %1 : i64
    %3 = arith.select %2, %arg1, %arg0 : memref<?xi64>
    return %3 : memref<?xi64>
  }
  func.func @_ZN9__gnu_cxx13new_allocatorIiEC1Ev(%arg0: !llvm.ptr<struct<(i8)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return
  }
  func.func @_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv(%arg0: !llvm.ptr<struct<(i8)>>) -> i64 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c2305843009213693951_i64 = arith.constant 2305843009213693951 : i64
    return %c2305843009213693951_i64 : i64
  }
  func.func private @_ZSt17__throw_bad_allocv() attributes {llvm.linkage = #llvm.linkage<external>}
  func.func private @_Znwm(i64) -> !llvm.ptr<i8> attributes {llvm.linkage = #llvm.linkage<external>}
  func.func @_ZSt14__relocate_a_1IiiENSt9enable_ifIXsr3std24__is_bitwise_relocatableIT_EE5valueEPS1_E4typeES2_S2_S2_RSaIT0_E(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: memref<?xi32>, %arg3: !llvm.ptr<struct<(struct<(i8)>)>>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c4_i64 = arith.constant 4 : i64
    %c0_i64 = arith.constant 0 : i64
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?xi32>) -> !llvm.ptr<i32>
    %1 = "polygeist.memref2pointer"(%arg0) : (memref<?xi32>) -> !llvm.ptr<i32>
    %2 = llvm.ptrtoint %0 : !llvm.ptr<i32> to i64
    %3 = llvm.ptrtoint %1 : !llvm.ptr<i32> to i64
    %4 = arith.subi %2, %3 : i64
    %5 = arith.divsi %4, %c4_i64 : i64
    %6 = arith.cmpi sgt, %5, %c0_i64 : i64
    scf.if %6 {
      %9 = arith.muli %5, %c4_i64 : i64
      %10 = arith.index_cast %9 : i64 to index
      %11 = arith.divui %10, %c4 : index
      scf.for %arg4 = %c0 to %11 step %c1 {
        %12 = memref.load %arg0[%arg4] : memref<?xi32>
        memref.store %12, %arg2[%arg4] : memref<?xi32>
      }
    }
    %7 = arith.index_cast %5 : i64 to index
    %8 = "polygeist.subindex"(%arg2, %7) : (memref<?xi32>, index) -> memref<?xi32>
    return %8 : memref<?xi32>
  }
  func.func @_ZSt12__niter_baseIPiET_S1_(%arg0: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return %arg0 : memref<?xi32>
  }
  func.func @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?x1xmemref<?xi32>>, %arg2: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    %1 = affine.load %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    %2 = call @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%0, %1, %arg2) : (memref<?xi32>, memref<?xi32>, memref<?xi32>) -> memref<?xi32>
    return %2 : memref<?xi32>
  }
  func.func private @_ZdlPv(!llvm.ptr<i8>) attributes {llvm.linkage = #llvm.linkage<external>}
  func.func @_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_(%arg0: memref<?x1xmemref<?xi32>>, %arg1: memref<?x1xmemref<?xi32>>, %arg2: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    %1 = affine.load %arg1[0, 0] : memref<?x1xmemref<?xi32>>
    %2 = call @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%0, %1, %arg2) : (memref<?xi32>, memref<?xi32>, memref<?xi32>) -> memref<?xi32>
    return %2 : memref<?xi32>
  }
  func.func @_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = call @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%arg0, %arg1, %arg2) : (memref<?xi32>, memref<?xi32>, memref<?xi32>) -> memref<?xi32>
    return %0 : memref<?xi32>
  }
  func.func @_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E(%arg0: memref<?x1xmemref<?xi32>>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    return %0 : memref<?xi32>
  }
  func.func @_ZSt12__niter_wrapIPiET_RKS1_S1_(%arg0: memref<?xmemref<?xi32>>, %arg1: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return %arg1 : memref<?xi32>
  }
  func.func @_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = call @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%arg0, %arg1, %arg2) : (memref<?xi32>, memref<?xi32>, memref<?xi32>) -> memref<?xi32>
    return %0 : memref<?xi32>
  }
  func.func @_ZSt12__miter_baseIPiET_S1_(%arg0: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    return %arg0 : memref<?xi32>
  }
  func.func @_ZNKSt13move_iteratorIPiE4baseEv(%arg0: memref<?x1xmemref<?xi32>>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = affine.load %arg0[0, 0] : memref<?x1xmemref<?xi32>>
    return %0 : memref<?xi32>
  }
  func.func @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(%arg0: memref<?xi32>, %arg1: memref<?xi32>, %arg2: memref<?xi32>) -> memref<?xi32> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c4_i64 = arith.constant 4 : i64
    %c0_i64 = arith.constant 0 : i64
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?xi32>) -> !llvm.ptr<i32>
    %1 = "polygeist.memref2pointer"(%arg0) : (memref<?xi32>) -> !llvm.ptr<i32>
    %2 = llvm.ptrtoint %0 : !llvm.ptr<i32> to i64
    %3 = llvm.ptrtoint %1 : !llvm.ptr<i32> to i64
    %4 = arith.subi %2, %3 : i64
    %5 = arith.divsi %4, %c4_i64 : i64
    %6 = arith.cmpi ne, %5, %c0_i64 : i64
    scf.if %6 {
      %9 = arith.muli %5, %c4_i64 : i64
      %10 = arith.index_cast %9 : i64 to index
      %11 = arith.divui %10, %c4 : index
      scf.for %arg3 = %c0 to %11 step %c1 {
        %12 = memref.load %arg0[%arg3] : memref<?xi32>
        memref.store %12, %arg2[%arg3] : memref<?xi32>
      }
    }
    %7 = arith.index_cast %5 : i64 to index
    %8 = "polygeist.subindex"(%arg2, %7) : (memref<?xi32>, index) -> memref<?xi32>
    return %8 : memref<?xi32>
  }
}
